#+TAGS: sys anal perf


* SystemTap                                                   :sys:anal:perf:
HomePage: [[https://sourceware.org/systemtap/][sourceware.org/systemtap]]
* Cmds
- [[file://home/crito/org/tech/cmds/stap.org][stap]] is the SystemTap tool frontend

* Description
* Usage
** RHEL
- packages required
#+BEGIN_SRC sh
yum install systemtap systemtap-runtime
stap-prep
#+END_SRC

* Lecture
** [[https://www.youtube.com/watch?v%3Dl7aQWoTRqKw&list%3DWL&index%3D53][What my is my system doing? Full System Observability with SystemTap - Mark Wielaard]]
+ The circle of observability

             Profiling - top, oprofile, perf 


                        SytemTap




   Debugging - GDB                      Tracing - strace, ltrace, ftrace
   

+ Tracing
  - nice to have
    - provides info while running
    - quick overview of code

  - Limitations
    - often specialized tools (strace, ltrace, ftrace)
    - limited filtering
    - overwhelming amount of information
      
+ Profiling
  - monitors while running (sampling)
  - can (often) see sys wide
    
  - Limitations
    - often one kind of event (time)
      
+ Debugging
  - full context (vars, paras, mem, regs, backtrace)
  - conditional breakpoints

  - Limitations
    - Stops the program under inspection
    - one program at a time (not sys wide)
      
+ SystemTap
  - unobtrusive, non-stop
  - system wide
  - monitoring multiple event types. Synchronous and Asynchronous
  - Scriptable filtering and stats
  - Safe (enforces limits, stops dumb things)

+ How it works
  - probe <event> {handler}
    - where event is kernel function, process.statement, timer.ms, begin, end
  - handler can have:
    - filtering/conditionals (if...next)
    - control structures (foreach, while)
  - Variables are primitive (number, string), ass arrays or statistical aggregate
  - Helper functions (log, pringf, gettimeofday, pid)

+ How to run
> stap -e '<script'> [-c <target program>]

** [[https://www.youtube.com/watch?v=Ps9889XwyVc][How We're Making SystemTap More User Friendly]]
- How it works
  - Script -> Module -> Feedback

- Each script uses a number of probes
- the form of the scripts
#+BEGIN_SRC sh
probe <trigger>{
  <handler>
}
#+END_SRC
- simple example
#+BEGIN_SRC sh
probe begin{
  println("Hello, World!")
}
#+END_SRC
- an example using ls
#+BEGIN_SRC sh
probe process.("ls").begin{
  println("ls has started")
}
#+END_SRC

+ More Probes
- probe kernel.statement("sys_read@fs/read_write.c:501")
- probe process("/usr/bin/ls").function("main")
- probe java(PID).class("CLASSNAME").method("PATTERN")

- other types
  - Timer
  - Netfilter
  - Perf

- View all available probes
#+BEGIN_SRC sh
stap --dump-probe-type
#+END_SRC
docs for probe
#+BEGIN_SRC sh
man probe
#+END_SRC

+ Tapsets
These are essentially libs to help write scripts

* Tutorial
* Books
[[file://home/crito/Documents/Linux/SystemTap_Beginners_Guide.pdf][SystemTap Beginners Guide]]
* Links
[[http://dtrace.org/blogs/brendan/2011/10/15/using-systemtap/][Using SystemTap - Brendan Gregg]]
[[https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/SystemTap_Beginners_Guide/][RHEL 6 SystemTap Beginners Guide]]
[[https://wiki.archlinux.org/index.php/SystemTap][Arch - SystemTap]]




