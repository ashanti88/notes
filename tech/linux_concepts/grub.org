#+TAGS: boot grub grub2 bootloader


* Grub
Manual: [[https://www.gnu.org/software/grub/manual/grub.html][gnu.org/grub]]
Manual: [[https://www.gnu.org/software/grub/manual/grub.html][gnu.org]]
* Overview
* Files
/boot/grub/grubenv - this shows the default kernel to be booted
/boot/grub/grub.cfg - this file is automatically created from /etc/grub.d/ and /etc/default/grub
/etc/sysconfig/grub - this contains the options used to create the grub.cfg (redhat)
/etc/default/grub - this contains the options used to create the grub.cfg (debian)
/etc/grub.d/ - the files in here are used to build the grub.cfg file, they indicate individual kernels and OSs

* Cmds
- grub2-mkconfig (centOS7) - this builds the grub.cfg from the grub.d/* and /etc/default/grub
- grub-mkconfig  (manjaro) - same as grub2-mkconfig
- grub-install

* Usage
** what version do I have?
#+BEGIN_SRC sh
grub-install --version
#+END_SRC

** Grub Shell
*** Cmds
- setting the pager
grub> set pager=1

- view what partitions are available
  
** Booting into runlevel one (sysv)
- setting runlevel one
1. open boot config by pressing 'e'

[[file://home/crito/Pictures/org/grub_runlevel_01.png]]

2. Edit the line that starts with linux and add a 1 to the end. Then press Ctrl-x to boot 
   
[[file://home/crito/Pictures/org/grub_runlevel_02.png]]

3. This will now drop you into runlevel 1, system will prompt you for the root password
   
[[file://home/crito/Pictures/org/grub_runlevel_03.png]]

4. Once changes/rescue has been completed move to runlevel 5 (multi-user).

** Booting into emergency mode (sysd)
Emergency mode runs the most minimal environment, the system mounts the root file system as read-only, does not not mount any other file systems and does not activate any network interfaces.
1. Edit boot by typing 'e'

[[file://home/crito/Pictures/org/grub_runlevel_01.png]]

2. Add the following parameter systemd.unit=emergency.target to the line that starts with linux
   
[[file://home/crito/Pictures/org/grub_runlevel_04.png]]

3. Press ctrl-x to boot the system
   
** Booting into rescue mode (sysd)
This is equivalent to sysv single user mode and requires root password. Rescue mode will attempt to mount all local file systems and will start the important services, but will not bring up networking interfaces.
There are two methods
*** Method One
1. At the grub menu you are provided with the rescue option

[[file://home/crito/Pictures/org/grub_runlevel_05.png]]

*** Method Two
1. At grub type 'e' and this will allow you to edit boot options

[[file://home/crito/Pictures/org/grub_runlevel_01.png]]

2. Edit the line that starts with linux and add the parameter systemd.unit=rescue.target 

[[file://home/crito/Pictures/org/grub_runlevel_06.png]]

3. Ctrl+x will prompt for root password
   
[[file://home/crito/Pictures/org/grub_runlevel_07.png]]

** Changing the default kernel
/boot/grub/grubenv - this shows which kernel is currently being booted

1. Query which kernels and OSs are available
- Arch, Manjaro
#+BEGIN_SRC sh
awk -F\' /^menuentry/{print\$2} /boot/grub/grub.cfg
#+END_SRC

- CentOS/RHEL
#+BEGIN_SRC sh
awk -F\' /^menuentry/{print\$2} /etc/grub2.cfg
#+END_SRC
This will print out all available options (numbering starts from 0)

2. Selecting a new boot option
#+BEGIN_SRC sh
grub-set-default 1
#+END_SRC
This will select the second line printed with above command as the default boot option

3. Confirm the defualt option has been selected
#+BEGIN_SRC sh
cat /boot/grub/grubenv
#+END_SRC
This will show the new option as the saved_entry=<new_option>

4. Reboot system for change to take effect

** Adding a new kernel to the conf
#+BEGIN_SRC sh
grub-mkconfig -o /boot/grub/grub.cfg
#+END_SRC
This will rebuild the configuration
** Hidden menu
- comment out this variable
#+BEGIN_EXAMPLE
#GRUB_HIDDEN_TIMEOUT=5
#+END_EXAMPLE

** How to reinstall Grub onto the MBR
http://www.av8n.com/computer/htm/grub-reinstall.htm
- boot system with a live disk
  
- become root
#+BEGIN_SRC sh
su -
#+END_SRC

- mkdir to mount the disk with the corrupt MBR
#+BEGIN_SRC sh
mkdir mtp
#+END_SRC

- determine the correct disk and mount
#+BEGIN_SRC sh
fdisk -l
mount /dev/sda1
#+END_SRC

- reinstall grub to the partition
#+BEGIN_SRC sh
grub-install
#+END_SRC

** Grub (Legacy)
grub went out around the time of RHEL6

/boot/grub - in here there are all the stage files (this is the file that is edited to make changes)
  - menu.lst -> grub.conf - menu.lst is usally a sym link, and it's this file that creates the menu that starts with grub, and details what OS is available, what kernel to use, and what partition holds the boot partition
  
Each option is configured in blocks
#+BEGIN_EXAMPLE
title CentOS (2.6.18-419.el5)
	root (hd0,0)
	kernel /boot/vmlinuz-2.6.18-419.el5 ro root=LABEL=/ rhgb quiet
	initrd /boot/initrd-2.6.18-419.el5.img
#+END_EXAMPLE
title - can be any name that you like
root  - disk and partition that the boot sector can be found (count starts at 0)
kernel - which kernel to boot and its location, also add any kernel parameters here
initrd - which initrd.img to boot and its location

- Re-install Grub
#+BEGIN_SRC sh
grub-install /dev/sda
#+END_SRC

* Lecture
* Tutorial
** Linux Academy - Bootloading with GRUB
*** Lesson One - What is Grub

- What is GRUB
  - Grand Unified Bootloader
  - works with multiple OS
  - allow for the system to be changed before the OS boots
    
- Bootloaders
  - Bios -> bootloader -> OS
  - CHS - Cylinder-Head-Sector - this was how bios was the intended method to address storage space.
    - in its modern form CHS can only address about 2 terabytes
    - without assistance CHS is limited to addressing 504 megabytes
    - most modern OS ignore CHS information or rely on translation
  - they can be installed on disks, partitions, loopback devices
  - EFI (Extensible Firmware Interface) and UEFI (Unified Extensible Firmeware Interface) have been develooped by intel to replace the BIOS interface and the limitations it imposes.
  

- Addressing Block Storage
  - Block storage refers to any system in which an arbitarary number of bytes are handled as a single unit.
  - CHS was the prevailing standard for rotational media in the PC industry
  - CHS doesn't describe only the amount of storage space available but the characteristics of the storage device.
  - CHS is limited by design.
    
- Cylinders, Sectors and Tracks
  
[[file://home/crito/Pictures/org/cylinder_sector_track.png]]
      
- Cylinders and Sectors (Vertical)
  
[[file://home/crito/Pictures/org/cylinders_sector_vertical.png]]

- Why use CHS
  - CHS came into play to meet the needs of IBM's hardware. Beacause of the design of the PC BIOS and MS-DOS's dependence of BIOS, CHS addressin was a must.
  - CPU expected boot code in teh exact location in RAM at every boot. In like manner, BIOS expected the boot code reside in the exact same location on every storage device.
  - BIOS still reports CHS information but this is mostly ignored now.
  - CHS-dependent sys must take care when accessing sectors beyound the 504MB threshold on any device.
    
- Moving past CHS
  - LBA (Logical Block Addressing)
  - ZBR (Zoned Bit Recording)
    - Each track numbers the sectors within it sequentially. 
    - The first sector of each track starts at 0.
  - Solid-State Devices

*** Lesson Two - Legacy Grub: Adding Boot Parameters
    
- Paritions
  - Most disks provide for the storage space to be divided into multiple parts.
  - Individual parts are called partitions and are used for a variety of purposes.
    
  MBR(Master Boot Record)
    - has limitations apart from those associated with BIOS and CHS addressing
    - Partitions must always start on a track boundary and end on a cylinder boundary
    - MBR devices report 512-byte sector sizes, even if the device actually uses 4k sectors, which can lead to degraded performance.
    - If a drive has more than one partition, the bootable partition must be marked "active"
    - A small amount of empty space is left between the first sector of the drive and the first sector of the first partition.
    - Partitions may be labelled, but primarily their number is used to identify them.
      
  GPT(Gobally unique Partition Table)
    - Compatible with (U)EFI
    - A reserved EFI partition used to boot the system
    - Sequential addressing using LBA or ZBR schemes
    - up to 128 primary partitions
    - Recognizes the actual sector size of the block devices(512 or 4K)
    - Uses PMBR(Protective Master Boot Record)
      - embeds a backward-compatible MBR into the boot secotr to enable booting on BIOS-based computers
      - PMBR prevents disk utilitires which are not GPT-aware from destroying the GPT partition
    - On systems which use BIOS, hybrid MBR code is installed, which allows the recognition of GPT partitions, this code must not presume sectors are 512 bytes in size
    - Partitions may be labelled but are identified by a UUID
      
    
- Adding Boot Parameters
  - Legacy Grub
    - changes to GRUB's config should be made in one of the following files
      - /etc/grub.conf
      - /boot/grub/grub.conf
	
    - legacy GRUB symlinks the following files to /boot/grub/grub.conf for compatibility reasons
      - /etc/grub.conf
      - /boot/grub/menu.lst
	




*** Lesson Three - GRUB2 - Adding Boot Parameters
    
- Adding boot parameers
  - /etc/sysconfig/grub - redhat/centos grub config location
  - /etc/deault/grub - debian/arch grub config location
  - /etc/grub.d/ - script files
    
  - The configuration does not take effect until the /etc/grub2.cfg (for BIOS systems) or /etc/grub2-efi.cfg (for EFI systems) has been updated.
  - updating the GRUB2 configuration can be done using the "grub2-mkconfig" command
  - edititing the grub.cfg manually is not recommened

*** Lesson Four - Chainloading and Dual-Booting
    
- Dual-Booting
  - GRUB can be used to load other bootloaders and to boot non-Linux OS
  - If installing Windows after Linux, be aware that Windows will write over the bootloader configuration, which may have to be installed from scratch.
    
  - windows requires
    insmod part_gpt
    insmod fat
    
*** Lesson Five - Using the GRUB Command Line Interface
    
- first thing make sure that pager value is set to 1
#+BEGIN_EXAMPLE
grub> set pager=1
#+END_EXAMPLE
this makesure that text will hold on each screen until instructed to move to next page

- list bootable devices
#+BEGIN_EXAMPLE
grub> ls
#+END_EXAMPLE
(hd0) (hd0,msdos3) (hd0,msdos2) (hd0,msdos1)

hd = disk
msdos = partition

- setting root
#+BEGIN_EXAMPLE
set root='hd0,msdos1'
#+END_EXAMPLE
this sets hd0,msdos1 as the root partition

- HINT
  - this provide a way to search for information from disks, partitions
    
- view all partitions and information
#+BEGIN_EXAMPLE
grub> ls -all
#+END_EXAMPLE

- booting into linux
#+BEGIN_EXAMPLE
grub> set root='hd0,msdos2'
grub> set boot='hd0,msdos1'
grub> linux /vmlinuz root='hd0,msdos2'
#+END_EXAMPLE

* Books
* Links
[[https://www.linux.com/learn/how-rescue-non-booting-grub-2-linux][How to Rescue a Non-Booting GRUB 2 on Linux]]
[[https://opensource.com/article/17/3/introduction-grub2-configuration-linux?sc_cid=70160000001273HAAQ][An Introduction to GRUB2 configuration for your Linux machine]]
