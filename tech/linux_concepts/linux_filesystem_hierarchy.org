#+TAGS: filesystem fhs hierarchy


* Linux Filesystem Hierarchy
HomePage: https://wiki.linuxfoundation.org/lsb/fhs
Wiki: https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard

* Description
* FHS - Filesystem Hierarchy Standard
** /
** /boot
This directory contains everything required for the boot process except for configuration files not needed at boot time (the most notable of those being those that belong to the GRUB boot-loader) and the map installer. Thus, the /boot directory stores data that is used before the kernel begins executing user-mode programs. This may include redundant (back-up) master boot records, sector/system map files, the kernel and other important boot files and data that is not directly edited by hand. Programs necessary to arrange for the boot loader to be able to boot a file are placed in /sbin. Configuration files for boot loaders are placed in /etc.
/boot/intel-ucode.img
/boot/vmlinuz-4.9-x86_64
/boot/initramfs-4.9-x86_64.img -
*** /grub
/boot/grub/grub.cfg - this is the Grub2 main configuration file (this file shouldn't be edited manually)
/boot/grub/grubenv

** /bin
Unlike /sbin, the bin directory contains several useful commands that are of use to both the system administrator as well as non-privileged users. It usually contains the shells like bash, csh, etc.... and commonly used commands like cp, mv, rm, cat, ls. For this reason and in contrast to /usr/bin, the binaries in this directory are considered to be essential. The reason for this is that it contains essential system programs that must be available even if only the partition containing / is mounted. This situation may arise should you need to repair other partitions but have no access to shared directories (ie. you are in single user mode and hence have no network access). It also contains programs which boot scripts may depend on.

** /sbin
Linux discriminates between 'normal' executables and those used for system maintenance and/or administrative tasks. The latter reside either here or - the less important ones - in /usr/sbin. Locally installed system administration programs should be placed into /usr/local/sbin. 

Some distro's have now symlinked this directory to /bin .

** /lib - b
The /lib directory contains kernel modules and those shared library images (the C programming code library) needed to boot the system and run the commands in the root filesystem, ie. by binaries in /bin and /sbin. Libraries are readily identifiable through their filename extension of *.so.

** /usr - Secondary hierarchy for read-only user data
*** /usr/bin
This directory contains the vast majority of binaries on your system. Executables in this directory vary widely.

*** /usr/sbin - Non-essential system binaries 
This directory contains programs for administering a system, meant to be run by 'root'. Like '/sbin', it's not part of a user's $PATH. Examples of included binaries here are chroot, useradd, in.tftpd and pppconfig.

*** /usr/include
The directory for 'header files', needed for compiling user space source code.

*** /usr/lib
This directory contains program libraries. Libraries are collections of frequently used program routines.

*** /usr/lib32
*** /usr/lib64
*** /usr/local
The original idea behind '/usr/local' was to have a separate ('local') '/usr' directory on every machine besides '/usr', which might be just mounted read-only from somewhere else. It copies the structure of '/usr'. These days, '/usr/local' is widely regarded as a good place in which to keep self-compiled or third-party programs. The /usr/local hierarchy is for use by the system administrator when installing software locally. It needs to be safe from being overwritten when the system software is updated. It may be used for programs and data that are shareable amongst a group of hosts, but not found in /usr. Locally installed software must be placed within /usr/local rather than /usr unless it is being installed to replace or upgrade software in /usr.

*** /usr/share
This directory contains 'shareable', architecture-independent files (docs, icons, fonts etc). Note, however, that '/usr/share' is generally not intended to be shared by different operating systems or by different releases of the same operating system. Any program or package which contains or requires data that doesn't need to be modified should store that data in '/usr/share' (or '/usr/local/share', if installed locally). It is recommended that a subdirectory be used in /usr/share for this purpose."

**** /usr/share/fonts
**** /usr/share/hwdata/
  - pci.ids - this file holds the id information of vendors
**** /usr/share/man
**** /usr/share/doc
**** /usr/share/info

*** /usr/src
The 'linux' sub-directory holds the Linux kernel sources, header-files and documentation.

**** /usr/src/linux
Contains the source code for the Linux kernel.

** /etc - host specific configuration files (no binaries should be stored here) 
This is the nerve center of your system, it contains all system related configuration files in here or in its sub-directories. A "configuration file" is defined as a local file used to control the operation of a program; it must be static and cannot be an executable binary. For this reason, it's a good idea to backup this directory regularly. It will definitely save you a lot of re-configuration later if you re-install or lose your current installation. Normally, no binaries should be or are located here.

/etc/alternatives/ - this is used by debian to allow ease of switching between different versions of an application
/etc/dhcpcd.conf   - this file is a config file for the dhcp client deamon
/etc/exports       - this files is used to add NFS shares that are available for sharing
/etc/hostname	   - this holds the hostname of the machine
/etc/hosts         - this file is first read to find IP to hostname lookup
/etc/hosts.allowed - this is an Access Control File that specifies allowed hosts
/etc/hosts.deny    - this is the counter part to hosts.allowed, if only this file all allowed to access except what is contained in this file
/etc/httpd         - this is the directory that Red Hat uses to hold apache config files
/etc/init.d        - this directory holds the runlevel scripts on Debian sysvinit machines
/etc/inittab       - this file would tell sysvinit what run level to start by default - <identifier>:<runlevel>:<action>:<process>
/etc/issue.net     - this is the sshd banner file - has to be enabled in sshd_config (Banner /etc/issue.net)
/etc/motd          - this is where we set the message that users see after logging in
/etc/named.conf    - this is the configuration file for the bind server(DNS)
/etc/nologin       - if this file is present then no-one will be able to login, access can only be had through a rescue shell, single user login.
/etc/nologin.txt   - if this file is present it is printed to the screen when a login is attempted, instead of the default message.
/etc/pacman.cof    - this is the main configuration file for the pacman package management system
/etc/pki           - this is the default directory for certificates
/etc/rc.d/         - this directory holds the runlevel scripts on Red Hat sysvinit machines (rc = run commands)
/etc/rc.d/rc.local - this file is run after the runlevel script has finished
/etc/rc.d/rc.sysinit - this file is run before the runlevel script is run, and performs some initial house keeping
/etc/resolv.conf   - this file read after /etc/hosts to find a nameserver that will be able to resolve our search.
/etc/services      - this file contains a list of services and the common ports that are associated with it
/etc/skel/         - skel directory, short for skeleton is copied into new users home directories on creation
/etc/sudoers       - this file is where user privileges can be added, such as sudo, or giving a user access to certain applications
/etc/xinetd.d/     - this directory is used to control services on a system
*** /etc/default - contains some parameters that the end user or administrator is likely to change, rather than embedding the values in the actual boot scripts. In this way, changes will persist even if you upgrade the package and the boot script is replaced.
/etc/default/grub - this file can be modified to make changes to the grub.cfg file
**** /etc/default/useradd - this file holds the defaults to be applied to a newly created user
# This is the default for rhel7
GROUP=100               
HOME=/home
INACTIVE=-1      
EXPIRE=
SHELL=/bin/bash
SKEL=/etc/skel
CREATE_MAIL_SPOOL=yes

*** /etc/fstab         - contains the devices to mounted at boot
options
  - async/sync - how data is stored whtn a write is made
    - sync - writes to disk straight away
    - asymc - data is kept in a buffer until it is written to the disk
  - atime/notime - File accessed timestamp
    - atime - writes - last time file was modified
                     - last time meta-data was modified 
		     - last time file was accessed
    - notime - no file timestamps are written
  - dev/nodev - whether to allow a device file on the drive
  - rw/ro - Read write or read only (rw is deafult)
  - suid/nosuid - allow a user to drun a program as root
  - exec/noexec - turn off executable files on the file system
  - defaults - rw,suid,dev,exec,auto,nouser,async
    - auto   - mount the partition automatically
    - nouser - only root can mount/umount the partition
*** /etc/group         - contains all the groups on the system and who the members are
    
wheel:x:10:centos,user

f1 - group name
f2 - group password
f3 - group id
f4 - users that are part of the group (comma seperated)

*** /etc/gshadow       - this holds the hashes for the group passwords
    
marketing:$6$B0OQvO8mtjPL$0EfR0xGn8HcwWjDM0mH2g22T3kd.57xBMn9jn2cb6sLMqLeLBiHXItnbmqtx5B8YIROGc4CikZsLbmRPyVCYB/::

f1 - group name
f2 - password hash
f3 -
f4 - group members

*** /etc/login.defs    - this file holds the defaults for creating a new user
Here we can set password expiration 
#+BEGIN_EXAMPLE
PASS_MAX_DAYS   99999
PASS_MIN_DAYS   0
PASS_MIN_LEN    5
PASS_WARN_AGE   7
#+END_EXAMPLE

Here we can set the UID number limits
#+BEGIN_EXAMPLE
UID_MIN                  1000
UID_MAX                 60000
#+END_EXAMPLE

Create a home directory
#+BEGIN_EXAMPLE
CREATE_HOME     yes
#+END_EXAMPLE

*** /etc/issue   - this is where a pre-login message can be configured
https://www.cyberciti.biz/faq/howto-change-login-message/

Escape code that can be included in the issue file
\b : Insert the baudrate of the current line.
\d : Insert the current date.
\s : Insert the system name, the name of the operating system.
\l : Insert the name of the current tty line.
\m : Insert the architecture identifier of the machine, eg. i486
\n : Insert the nodename of the machine, also known as the hostname.
\o : Insert the domainname of the machine.
\r : Insert the release number of the OS, eg. 1.1.9.
\t : Insert the current time.
\u : Insert the number of current users logged in.
\U : Insert the string “1 user” or “ users” where is the number of current users logged in.
\v : Insert the version of the OS, eg. the build-date etc.

*** /etc/netctl
ArchLinux: https://wiki.archlinux.org/index.php/Netctl
netctl uses profiles to manage network connections and different modes of operation to start profiles automatically or manually on demand.

**** /interfaces
**** /hooks
**** /examples
To use any of the example just copy the file to /etc/netctl and edit

*** /etc/pam.d/        - this holds all the Pluggable Authentication Modules 
*** /etc/passwd        - this file contains all the systems users
*** /etc/polkit-1/  - this contains the policy rules 
**** /etc/polkit-1/rules.d/ - this contains rule files
*** /etc/shadow    - this file holds all the hases and other password information

user:$6$1b0OzIM9$fY4UD1JKlqXrDO3RAd2sUvCuYfR0NP5Gsu4v0g6Rcy3NwVWPBgOBB7MmaZet1StyasZR/aFI85VdVTvrUiLO1.:17683:0::7:::

f1 - name
f2 - password hash
f3 - date password was last changed (days from january 1 1970 to last password change)
f4 - date the password was last changed
f5 - number of days before the password must be changed
f6 - number of days warning, before password expires
f7 - number of days before the account becomes disabled after password expires
f8 - days since epoch since the account was disabled

*** /etc/X11/
** /dev - holds information on machine devices (block|character)  
/dev is the location of special or device files. It is a very interesting directory that highlights one important aspect of the Linux filesystem - everything is a file or a directory. Look through this directory and you should hopefully see sda1, sda2 etc.... which represent the various partitions on the first master drive of the system and /dev/sr0 represent your CD-ROM drive.
/dev/hda   - ide connected hard drive
/dev/psaux - PS/2 connection (mice, keyboard)
/dev/urandom - this is the pseudo random device
/dev/sda   - sata connected hard drive
/dev/shm   - shared memory device
/dev/ttySX - serial ports
 
** /opt
This directory is reserved for all the software and add-on packages that are not part of the default installation. Here is where packages are placed that are not installed by the distro's package management tool.

** /proc - kernel and process files
/proc is very special in that it is also a virtual filesystem. It's sometimes referred to as a process information pseudo-file system. It doesn't contain 'real' files but runtime system information (e.g. system memory, devices mounted, hardware configuration, etc). For this reason it can be regarded as a control and information centre for the kernel. In fact, quite a lot of system utilities are simply calls to files in this directory. For example, 'lsmod' is the same as 'cat /proc/modules' while 'lspci' is a synonym for 'cat /proc/pci'. By altering files located in this directory you can even read/change kernel parameters (sysctl) while the system is running.
/proc/X/         - proc holds a directory for every process on the system, and the dir contains a set of properties about the process
/proc/interrupts - this shows the cpu interrupts and how they are being used
/proc/dma        - dma (direct memory access), this is issued to allow access to the memory

** /lost+found
As was explained earlier during the overview of the FSSTND, Linux should always go through a proper shutdown. Sometimes your system might crash or a power failure might take the machine down. Either way, at the next boot, a lengthy filesystem check (the speed of this check is dependent on the type of filesystem that you actually use. ie. ext3 is faster than ext2 because it is a journalled filesystem) using fsck will be done. Fsck will go through the system and try to recover any corrupt files that it finds. The result of this recovery operation will be placed in this directory. The files recovered are not likely to be complete or make much sense but there always is a chance that something worthwhile is recovered.

** /media - Mount point for removable media (CD, DVD, etc) 
This directory contains subdirectories which are used as mount points for
removeable media such as flash drives, cdroms and zip disks.

** /mnt   - Temporary mount point
This is a generic mount point under which you mount your filesystems or devices. Mounting is the process by which you make a filesystem available to the system. After mounting your files will be accessible under the mount-point. This directory usually contains mount points or sub-directories where you mount your floppy and your CD. You can also create additional mount-points here if you wish. Standard mount points would include /mnt/cdrom and /mnt/floppy. There is no limitation to creating a mount-point anywhere on your system but by convention and for sheer practicality do not litter your file system with mount-points. It should be noted that some distributions like Debian allocate /floppy and /cdrom as mount points while Redhat and Mandrake puts them in /mnt/floppy and /mnt/cdrom respectively.

** /run   - Run-time variable data, information about the running system since last boot  
- /run/media/user/ - this is where external drives are added with Gnome
- /run/log/journal/ - this is where systemd stores its logging information
** /root  - This is the home directory of the System Administrator, 'root'.
** /srv   - contains site-specific data which is served by this system.

This main purpose of specifying this is so that users may find
the location of the data files for particular service, and so that
services which require a single tree for readonly data, writable data
and scripts (such as cgi scripts) can be reasonably placed. Data that
is only of interest to a specific user should go in that users'
home directory.

The methodology used to name subdirectories of /srv is unspecified as there.
One method for structuring data under /srv is by protocol, eg. ftp, rsync, 
www, and cvs. On large systems it can be useful to structure /srv by 
administrative context, such as /srv/physics/www, /srv/compsci/cvs, etc. 
This setup will differ from host to host. Therefore, no program should rely 
on a specific subdirectory structure of /srv existing or data necessarily 
being stored in /srv. However /srv should always exist on FHS compliant 
systems and should be used as the default location for such data.

Distributions must take care not to remove locally placed files in these
directories without administrator permission.

This is particularly important as these areas will often contain both
files initially installed by the distributor, and those added by the
administrator.

** /sys   - Contains information about devices, drivers, and some kernel features
The /sys/ directory utilizes the new sysfs virtual file system specific to the 2.6 kernel. With the increased support for hot plug hardware devices in the 2.6 kernel, the /sys/ directory contains information similarly held in /proc/, but displays a hierarchical view of specific device information in regards to hot plug devices.
/proc/sys/kernel/pid_max - this sets the maximum number of processors that can be spawned on a system

** /tmp   - holds files that will be removed on reboot
This directory contains mostly files that are required temporarily. Many programs use this to create lock files and for temporary storage of data. Do not remove files from this directory unless you know exactly what you are doing! Many of these files are important for currently running programs and deleting them may result in a system crash.

** /var - Variable files whose content is expected to change during normal system use and operation
Contains variable data like system logging files, mail and printer spool directories, and transient and temporary files. Some portions of /var are not shareable between different systems. For instance, /var/log, /var/lock, and /var/run. Other portions may be shared, notably /var/mail, /var/cache/man, /var/cache/fonts, and /var/spool/news. Why not put it into /usr? Because there might be circumstances when you may want to mount /usr as read-only, e.g. if it is on a CD or on another computer. '/var' contains variable data, i.e. files and directories the system must be able to write to during operation, whereas /usr should only contain static data. Some directories can be put onto separate partitions or systems, e.g. for easier backups, due to network topology or security concerns.

*** /var/backups
Directory containing backups of various key system files such as /etc/shadow, /etc/group, /etc/inetd.conf and dpkg.status. They are normally renamed to something like dpkg.status.0, group.bak, gshadow.bak, inetd.conf.bak, passwd.bak, shadow.bak

*** /var/cache
Is intended for cached data from applications. Such data is locally generated as a result of time-consuming I/O or calculation. This data can generally be regenerated or be restored. Unlike /var/spool, files here can be deleted without data loss. This data remains valid between invocations of the application and rebooting of the system. The existence of a separate directory for cached data allows system administrators to set different disk and backup policies from other directories in /var.
/var/cache/pacman/pkg/ - is the location that pacman downloads tarball files to for installation.

**** /var/cache/fonts
Locally-generated fonts. In particular, all of the fonts which are automatically generated by mktexpk must be located in appropriately-named subdirectories of /var/cache/ fonts.

*** /var/cache/man
A cache for man pages that are formatted on demand. The source for manual pages is usually stored in /usr/share/man/; some manual pages might come with a pre-formatted version, which is stored in /usr/share/man/cat* (this is fairly rare now). Other manual pages need to be formatted when they are first viewed; the formatted version is then stored in /var/man so that the next person to view the same page won't have to wait for it to be formatted (/var/catman is often cleaned in the same way temporary directories are cleaned).

*** /var/cache/'package'
Package specific cache data.

*** /var/cache/www
WWW proxy or cache data.

*** /var/crash
This directory will eventually hold system crash dumps. Currently, system crash dumps are not supported under Linux. However, development is already complete and is awaiting unification into the Linux kernel.

*** /var/db
Data bank store
/var/db/sudo 
  - this will sort a timestamp of users with sudo privs and it is checked everytime sudo is used.
  - if the timestamp is within 15 minutes no password is requested

*** /var/games
Any variable data relating to games in /usr is placed here. It holds variable data that was previously found in /usr. Static data, such as help text, level descriptions, and so on, remains elsewhere though, such as in /usr/share/games. The separation of /var/games and /var/lib as in release FSSTND 1.2 allows local control of backup strategies, permissions, and disk usage, as well as allowing inter-host sharing and reducing clutter in /var/lib. Additionally, /var/games is the path traditionally used by BSD.

*** /var/lib
Holds dynamic data libraries/files like the rpm/dpkg database and game scores. Furthermore, this hierarchy holds state information pertaining to an application or the system. State information is data that programs modify while they run, and that pertains to one specific host. Users shouldn't ever need to modify files in /var/lib to configure a package's operation. State information is generally used to preserve the condition of an application (or a group of inter-related applications) between invocations and between different instances of the same application. An application (or a group of inter-related applications) use a subdirectory of /var/lib for their data. There is one subdirectory, /var/lib/misc, which is intended for state files that don't need a subdirectory; the other subdirectories should only be present if the application in question is included in the distribution. /var/lib/'name' is the location that must be used for all distribution packaging support. Different distributions may use different names, of course.

**** /var/lib/libvirt/ - this holds variable data for libvirt
/var/lib/libvirt/images/ - default home for OS images for VM creation

**** /var/lib/machines/ - this directory holds systemd containers
*** /var/local
Variable data for local programs (i.e., programs that have been installed by the system administrator) that are installed in /usr/local (as opposed to a remotely mounted '/var' partition). Note that even locally installed programs should use the other /var directories if they are appropriate, e.g., /var/lock.

*** /var/lock
Many programs follow a convention to create a lock file in /var/lock to indicate that they are using a particular device or file. This directory holds those lock files (for some devices) and hopefully other programs will notice the lock file and won't attempt to use the device or file.

Lock files should be stored within the /var/lock directory structure. Lock files for devices and other resources shared by multiple applications, such as the serial device lock files that were originally found in either /usr/spool/locks or /usr/spool/uucp, must now be stored in /var/lock. The naming convention which must be used is LCK.. followed by the base name of the device file. For example, to lock /dev/ttyS0 the file LCK..ttyS0 would be created. The format used for the contents of such lock files must be the HDB UUCP lock file format. The HDB format is to store the process identifier (PID) as a ten byte ASCII decimal number, with a trailing newline. For example, if process 1230 holds a lock file, it would contain the eleven characters: space, space, space, space, space, space, one, two, three, zero, and newline.

*** /var/log
Log files from the system and various programs/services, especially login (/var/log/wtmp, which logs all logins and logouts into the system) and syslog (/var/log/messages, where all kernel and system program message are usually stored). Files in /var/log can often grow indefinitely, and may require cleaning at regular intervals. Something that is now normally managed via log rotation utilities such as 'logrotate'. This utility also allows for the automatic rotation compression, removal and mailing of log files. Logrotate can be set to handle a log file daily, weekly, monthly or when the log file gets to a certain size. Normally, logrotate runs as a daily cron job. This is a good place to start troubleshooting general technical problems.

**** /var/log/auth.log
Record of all logins and logouts by normal users and system processes.

**** /var/log/btmp
Log of all attempted bad logins to the system. Accessed via the lastb command.

**** /var/log/debug
Debugging output from various packages.

**** /var/log/dmesg
Kernel ring buffer. The content of this file is referred to by the dmesg command.

**** /var/log/'display_manager'
- kdm
KDM log file. Normally a subset of the last X log file. See /var/log/xdm.log for more details.
- gdm
GDM log files. Normally a subset of the last X log file. See /var/log/xdm.log for mode details.

**** /var/log/journal
this contains all the binary journal logs for the systemd logging service
**** /var/log/libvirt
/var/log/libvirt/lxc  - this holds logs for each linux container
/var/log/libvirt/qemu - this holds logs for each created virtual machine
/var/log/libvirt/uml
**** /var/log/messages
This will log all system messages

**** /var/log/pacct
Process accounting is the bookkeeping of process activity. The raw data of process activity is maintained here. Three commands can be used to access the contents of this file dump-acct, sa (summary of process accounting) and lastcomm (list the commands executed on the system).

**** /var/log/samba
This will create seperate logs for each created connection

**** /var/log/secure
Contains information related to authentication and authorization privileges. For example, sshd logs all the messages here, including unsuccessful login.
**** /var/log/utmp
Active user sessions. This is a data file and as such it can not be viewed normally. A human-readable form can be created via the dump-utmp command or through the w, who or users commands.

**** /var/log/wtmp
Log of all users who have logged into and out of the system. The last command can be used to access a human readable form of this file. It also lists every connection and run-level change.

**** /var/log/xdm
XDM log file. Normally subset of the last X startup log and pretty much useless in light of the details the X logs is able to provide us with. Only consult this file if you have XDM specific issues otherwise just use the X logfile.

**** /var/log/Xorg.0.log
X startup logfile. An excellent resource for uncovering problems with X configuration. Log files are numbered according to when they were last used. For example, the last log file would be stored in /var/log/Xorg.0.log, the next /var/log/Xorg.9.log, so on and so forth.

**** /var/log/syslog
The 'system' log file. The contents of this file is managed via the syslogd daemon which more often than not takes care of all log manipulation on most systems.

*** /var/mail
Contains user mailbox files. The mail files take the form /var/mail/'username' (Note that /var/mail may be a symbolic link to another directory). User mailbox files in this location are stored in the standard UNIX mailbox format. The reason for the location of this directory was to bring the FHS inline with nearly every UNIX implementation (it was previously located in /var/spool/mail). This change is important for inter-operability since a single /var/mail is often shared between multiple hosts and multiple UNIX implementations (despite NFS locking issues).

*** /var/opt
Variable data of the program packages in /opt must be installed in /var/opt/'package-name', where 'package-name' is the name of the subtree in /opt where the static data from an add-on software package is stored, except where superceded by another file in /etc. No structure is imposed on the internal arrangement of /var/opt/'package-name'.

*** /var/run
Contains the process identification files (PIDs) of system services and other information about the system that is valid until the system is next booted. For example, /var/run/utmp contains information about users currently logged in.

*** /var/spool
Holds spool files, for instance for mail, news, and printing (lpd) and other queued work. Spool files store data to be processed after the job currently occupying a device is finished or the appropriate cron job is started. Each different spool has its own subdirectory below /var/spool, e.g., the cron tables are stored in /var/spool/cron/crontabs.

*** /var/tmp
Temporary files that are large or that need to exist for a longer time than what is allowed for /tmp. (Although the system administrator might not allow very old files in /var/tmp either.)

*** /var/named
Database for BIND. The Berkeley Internet Name Domain (BIND) implements an Internet domain name server. BIND is the most widely used name server software on the Internet, and is supported by the Internet Software Consortium, www.isc.org.

*** /var/yp
Database for NIS (Network Information Services). NIS is mostly used to let several machines in a network share the same account information (eg. /etc/passwd). NIS was formerly called Yellow Pages (YP).

** /home - The users home directoriesh
Linux is a multi-user environment so each user is also assigned a specific directory that is accessible only to them and the system administrator. These are the user home directories, which can be found under '/home/$USER' (~/). It is your playground: everything is at your command, you can write files, delete them, install programs, etc.... Your home directory contains your personal configuration files, the so-called dot files (their name is preceded by a dot). Personal configuration files are usually 'hidden', if you want to see them, you either have to turn on the appropriate option in your file manager or run ls with the -a switch. If there is a conflict between personal and system wide configuration files, the settings in the perse will prevail. 

* The Root Directory
To comply with the FSSTND the following directories or symbolic links to directories are required in /
/bin   - Essential command binaries
/boot  - Static files of the boot loader 
/dev   - Device files
/etc   - Host-specific system configuration
/lib   - Essential shared libraries and kernel modules
/media - Mount point for removeable media
/mnt   - Mount point for mounting a filesystem temporarily
/opt   - Add-on application software packages
/sbin  - Essential system binaries
/srv   - Data for services provided by this system
/tmp   - Temporary files
/usr   - Secondary hierarchy
/var   - Variable data
   
Other Directories
** /proc  - Deprecated filesystem (procfs) is home to system data structures 
- This directory has many status files that can be used to get current operations system parameters
- Many performance analysing tools mine the contents of /proc for data
- Linux can be optimized through /proc
  - parameters are applied in a flexible way through the /proc/sys file systems (in older would have to be recompilied to get the parameters changed)
  - Differnt interfaces are offered through /proc/sys to tune different aspects of the OS
  
- Indside of /proc
  - First you will notice a lot of numbered directories, the number corresponds to the process pid 
    - inside these directories is information pertaining to the pid
    - cat the cmdline file to find out what application is tied to the pid
  - partitions file contains all the partitions on the current system
  - cpuinfo contains details of the system cpu
  - filesystems file tells what filesystems the current system supports
    - if you don't see a filesystem that you tink your system should support missing it only means the modules hasn't been loaded by the kernel 
- /proc/sys
  - this houses lots of parameters that can be altered as needed
    - swappiness variable is housed here /proc/sys/vm/swappiness

* Lecture
* Tutorial
* Books
* Links
[[http://tldp.org/LDP/Linux-Filesystem-Hierarchy/html/Linux-Filesystem-Hierarchy.html#usr][Linux Filesystem Hierarchy]]
