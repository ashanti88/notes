#+TAGS: package package_management yum apt rpm dnf dpkg deb pacman yaourt pkg


* Package Management
* Debian
** Cmds
*** dpkg
**** Basic Administration
Install
#+BEGIN_SRC sh
dpkg -i application.deb
#+END_SRC
*makesure to add the deb-src to the source.list for updates

Remove
#+BEGIN_SRC sh
dpkg -r application.deb
#+END_SRC

Purge
#+BEGIN_SRC sh
dpkg -P application.deb
#+END_SRC

- List all installed packages
#+BEGIN_SRC sh
dpkg -l
#+END_SRC

- List all files installed with package
#+BEGIN_SRC sh
dpkg -L nano
#+END_SRC

**** Adding an additional architecture
this comes in handy when you need to install a 32bit application on a
64bit machine
#+BEGIN_SRC sh
dpkg --add-architecture i386
apt-get update
#+END_SRC

*** apt
**** Basic Actions
- Update available software database
#+BEGIN_SRC sh
apt-get update
apt update
#+END_SRC

- Upgrade all software available for upgrade
#+BEGIN_SRC sh
apt-get upgrade
apt upgrade
#+END_SRC

- Upgrade with a little intelligence
#+BEGIN_SRC sh
apt-get dist-upgrade
#+END_SRC
Tries to not break any applications

- Install
#+BEGIN_SRC sh
apt-get install application
#+END_SRC

- Remove
#+BEGIN_SRC sh
apt-get remove application
#+END_SRC

- Purge
#+BEGIN_SRC sh
apt-get purge apllication
#+END_SRC
This will attempt to remove all configuration files

- Search for an application
#+BEGIN_SRC sh
apt-cache search $KEYWORD
#+END_SRC

- Show all installed applications
#+BEGIN_SRC sh
apt-cache pkgnames
#+END_SRC
Apt only will not know about software installed with dpkg or from source
unless told

- Fix broken dependencies
#+BEGIN_SRC sh
apt-get -f install
#+END_SRC
This comes in hand if you have installed a .deb with dpkg and there are
some dependencies missing

- Download the source file
#+BEGIN_SRC sh
apt-get source application
#+END_SRC
To keep track of installed applications from source make sure the source
is added to /etc/apt/source.list. It will be a deb-src ....

- Installing dependencies for a source file
#+BEGIN_SRC sh
apt-get build-dep application
#+END_SRC

- list all infomation on a package
#+BEGIN_SRC sh
apt-file find tmux
#+END_SRC

**** Advanced Actions
- apt-key
#+BEGIN_SRC sh
apt-key add saved_gpg_key
#+END_SRC
to add a gpg key to a repository, first download the key and save as a file.

- apt-Src
!Think this just brings both "apt-get" and "dpkg" togeather

Downloading the source

  Building source files
  #+BEGIN_SRC sh
  apt-src build package
  #+END_SRC
  
  Installing source files
  #+BEGIN_SRC sh
  apt-src package
  #+END_SRC

- Updating debian kernel
#+BEGIN_SRC 
apt-cache search linux-image
#+END_SRC
this will provide all available debian linux kernels

**** rollback an apt-get upgrade
Article: [[https://www.cyberciti.biz/howto/debian-linux/ubuntu-linux-rollback-an-apt-get-upgrade/][nixcraft]]
1. search the apt history for the date of the upgrade to rollback from
  > grep -A 2 'Start-Date: YYYY-MM-DD HH:MM:SS' /var/log/apt/history.log
2. create list of programs that are to be removed
  > grep -A 2 'Start-Date: YYYY-MM-DD HH:MM:SS' /var/log/apt/history.log | tail -1 >/tmp/packages.txt
3. edit the /tmp/packages.txt and delete the Install: word
  > sed -i 's/Install://' /tmp/packages.txt
4. Final clean up
  > tr ',' '\n' < /tmp/packages.txt | sed '/automatic)/d' | awk '{ print $1}' > /tmp/final.packages.txt
  > wc -l /tmp/packages.txt - this will give the number packages that were installed
5. run this script as root
# Run as root
# Store packages name in $p
p="$(</tmp/final.packages.txt)"
 
# Nuke it
apt-get --purge remove $p
 
#clears out the local repository of retrieved package files
apt-get clean
 
# Just in case ...
apt-get autoremove
 
# Verify disk space
df -H

** Files
/etc/apt/sources.list

* Ubuntu
** Cmds
*** dpkg
**** Basic Administration
Install
#+BEGIN_SRC sh
dpkg -i application.deb
#+END_SRC
*makesure to add the deb-src to the source.list for updates

Remove
#+BEGIN_SRC sh
dpkg -r application.deb
#+END_SRC

Purge
#+BEGIN_SRC sh
dpkg -P application.deb
#+END_SRC

**** Adding an additional architecture
this comes in handy when you need to install a 32bit application on a
64bit machine
#+BEGIN_SRC sh
dpkg --add-architecture i386
apt-get update
#+END_SRC

*** apt
**** Basic Actions
- Update available software database
#+BEGIN_SRC sh
apt-get update
#+END_SRC
or
#+BEGIN_SRC sh
apt update
#+END_SRC

- Upgrade all software available for upgrade
#+BEGIN_SRC sh
apt-get upgrade
#+END_SRC
or
#+BEGIN_SRC sh
apt upgrade
#+END_SRC

- Upgrade with a little intelligence
#+BEGIN_SRC sh
apt-get dist-upgrade
#+END_SRC
Tries to not break any applications

- Install
#+BEGIN_SRC sh
apt-get install application
#+END_SRC

- Remove
#+BEGIN_SRC sh
apt-get remove application
#+END_SRC

- Purge
#+BEGIN_SRC sh
apt-get purge apllication
#+END_SRC
This will attempt to remove all configuration files

- Search for an application
#+BEGIN_SRC sh
apt-cache search $KEYWORD
#+END_SRC

- Show all installed applications
#+BEGIN_SRC sh
apt-cache pkgnames
#+END_SRC
Apt only will not know about software installed with dpkg or from source
unless told

- Fix broken dependencies
#+BEGIN_SRC sh
apt-get -f install
#+END_SRC
This comes in hand if you have installed a .deb with dpkg and there are
some dependencies missing

- Download the source file
#+BEGIN_SRC sh
apt-get source application
#+END_SRC
To keep track of installed applications from source make sure the source
is added to /etc/apt/source.list. It will be a deb-src ....

- Installing dependencies for a source file
#+BEGIN_SRC sh
apt-get build-dep application
#+END_SRC

**** Advanced Actions
- apt-key
#+BEGIN_SRC sh
apt-key add saved_gpg_key
#+END_SRC
to add a gpg key to a repository, first download the key and save as a file.

- apt-Src
!Think this just brings both "apt-get" and "dpkg" togeather

Downloading the source

  Building source files
  #+BEGIN_SRC sh
  apt-src build package
  #+END_SRC
  
  Installing source files
  #+BEGIN_SRC sh
  apt-src package
  #+END_SRC

- Updating debian kernel
#+BEGIN_SRC 
apt-cache search linux-image
#+END_SRC
this will provide all available debian linux kernels

**** rollback an apt-get upgrade
Article: [[https://www.cyberciti.biz/howto/debian-linux/ubuntu-linux-rollback-an-apt-get-upgrade/][nixcraft]]
1. search the apt history for the date of the upgrade to rollback from
  > grep -A 2 'Start-Date: YYYY-MM-DD HH:MM:SS' /var/log/apt/history.log
2. create list of programs that are to be removed
  > grep -A 2 'Start-Date: YYYY-MM-DD HH:MM:SS' /var/log/apt/history.log | tail -1 >/tmp/packages.txt
3. edit the /tmp/packages.txt and delete the Install: word
  > sed -i 's/Install://' /tmp/packages.txt
4. Final clean up
  > tr ',' '\n' < /tmp/packages.txt | sed '/automatic)/d' | awk '{ print $1}' > /tmp/final.packages.txt
  > wc -l /tmp/packages.txt - this will give the number packages that were installed
5. run this script as root
# Run as root
# Store packages name in $p
p="$(</tmp/final.packages.txt)"
 
# Nuke it
apt-get --purge remove $p
 
#clears out the local repository of retrieved package files
apt-get clean
 
# Just in case ...
apt-get autoremove
 
# Verify disk space
df -H

*** Snappy
** Files
/etc/apt/sources.list
** Create a local repository for Ubuntu (for local updates)

- install proftpd and apt-mirror 
#+BEGIN_SRC sh
apt-get install apt-mirror proftpd-basic
#+END_SRC

- proftd will provide an ncurses setup

[[file://home/crito/Pictures/org/deb_local_repo0.png]]
the inetd is more appropriate for sysvinit, whereas standalone is more suited for systemd   

- test ftp with localhost
#+BEGIN_SRC sh
ftp localhost
#+END_SRC
this should connect you to the ftp server

- Now vist the Ubuntu Mirror Acheive https://launchpad.net/ubuntu/+archivemirrors
  - choose a mirror that has ftp, sftp options
    
- edit mirror
#+BEGIN_EXAMPLE
set base_path /opt/dist-mirror
set_nthreads 20
set _tilde 0

# Where I am mirroring from
deb http://mirror.lstn.net/ubuntu/ trusty main
deb-src http://mirror.lstn.net/ubuntu/ trusty main
#+END_EXAMPLE
the "Where I am mirroring from, should be the mirror that you choose

- mkdir /opt/dist-mirror and download the mirrorlist
#+BEGIN_SRC sh
mkdir /opt/dist-mirror
cd /opt/dist-mirror
apt-mirror
#+END_SRC
this will download the repo from the mirror (around an hour)

- configure a mirror path for the proftpd
#+BEGIN_SRC sh
mount --bind /opt/dist-mirror/mirror/mirror.lstn.net/ /srv/ftp/
#+END_SRC

- make the mount bind at boot add this to /etc/rc.local
#+BEGIN_EXAMPLE
mount --bind /opt/dist-mirror/mirror/mirror.lstn.net/ /srv/ftp/
#+END_EXAMPLE

- use cron to update the repo
#+BEGIN_SRC sh
cron -e
#+END_SRC
#+BEGIN_EXAMPLE
0 3 * * * /usr/bin/apt-mirror >> /home/jim/mirror.log
#+END_EXAMPLE
3 am every day update the log files

*** Configuring the client
    
- edit the /etc/apt/sources.list, add the following
#+BEGIN_EXAMPLE
deb ftp://192.168.1.135:/ubuntu trusty main
deb-src ftp://192.168.1.135:/ubuntu trusty main
#+END_EXAMPLE

- update
#+BEGIN_SRC sh
apt-get update
#+END_SRC
errors may occur, such as throwing errors asking for 32bit arch on a 64bit arch

- if this does occur edit the /etc/apt/sources.list
#+BEGIN_SRC sh
deb [arch=amd64]ftp://192.168.1.135:/ubuntu trusty main
deb-src [arch=amd64]ftp://192.168.1.135:/ubuntu trusty main
#+END_SRC
this should resolve this issue

- test by running an apt-cache search and view the repo address
#+BEGIN_SRC sh
apt-cache search git
#+END_SRC

* Redhat
** Cmds
*** rpm
http://repoforge.org/

**** Basic Actions
- List of all installed packages
#+BEGIN_SRC sh
rpm -qa
#+END_SRC
q - query the database

- Show any changes since installation
#+BEGIN_SRC sh
rpm -Va
#+END_SRC

- import any publickeys that are missing
#+BEGIN_SRC sh
rpm -qa gpg-pubkey*
#+END_SRC

- view requirements of an rpm file
#+BEGIN_SRC sh
rpm -qpR nmap-6.40-7.el7.x86_64.rpm
#+END_SRC

- insall application
#+BEGIN_SRC sh
rpm -ivh xterm-295.3.el7.x86_64.rpm
rpm -Uvh xterm-295.3.el7.x86_64.rpm
#+END_SRC
the second version will update if present or install if not present

- is a package installed
#+BEGIN_SRC sh
rpm -q openssh-server
#+END_SRC

- what packages were installed with a package
#+BEGIN_SRC sh
rpm -ql opwnssh-server
#+END_SRC

- remove a package
#+BEGIN_SRC sh
rpm -evv nmap
#+END_SRC

- query package documentation
#+BEGIN_SRC sh
rpm -qdf /usr/bin/vmstat
#+END_SRC
this will list all the documentation where the package is mentioned

- is package database cache becomes corrupt
#+BEGIN_SRC sh
rpm --rebuilddb
#+END_SRC

**** Repo Administration
Adding a repo
#+BEGIN_SRC sh
wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
rpm -Uvh remi-release-6*.rpm
#+END_SRC
In this example we are downloading the remi repo

- Find package binary is associated with
#+BEGIN_SRC sh
rpm -qf /sbin/chronyd
#+END_SRC

- Find all packages that are associated with a binary
#+BEGIN_SRC sh
rpm -ql chrony
#+END_SRC
this will provide a list of all the files

- Find the configuration files of a binary
#+BEGIN_SRC sh
rpm -qc chrony
#+END_SRC

- Find all documentation that is stored for a binary
#+BEGIN_SRC sh
rpm -qd chrony
#+END_SRC

- Check the installation script of an rpm
  - already installed
  #+BEGIN_SRC sh
  rpm -q --scripts http
  #+END_SRC
  This allows us to check the installation script of a package
  
  - before installation
  Download the rpm from the repo
  #+BEGIN_SRC sh
  rpm -qp --scripts the_none_veri_pkg.rpm
  #+END_SRC
  qp - query package

- Query repo for package
#+BEGIN_SRC sh
repoquery -ql yp-tools
#+END_SRC

***** Exclude Specfic Repository
Get repo list
#+BEGIN_SRC sh
yum repolist
#+END_SRC

****** Method One - Temporary
On the cmd line
#+BEGIN_SRC sh
yum update --disablerepo=isu 
#+END_SRC
This will not upgrade the packages that belong to the given repo.

****** Method Two - Permanent
Edit the repo files in /etc/yum.repos.d
set the enable parameter to 0.

***** EPEL (Extra Packages for Enterprise Linux)
Centos
#+BEGIN_SRC sh
yum install epel-release
#+END_SRC

***** IUS (Inline with Upstream Stable)
#+BEGIN_SRC sh
wget https://centos7.iuscommunity.org/ius-release.rpm
rpm -Uvh ius-release.rpm
yum repolist
#+END_SRC

*** yum
CheatSheet: [[file://home/crito/Documents/Linux/RHEL/yum_cheatsheet.pdf][YUM CheatSheet]]
**** Basic Administration
- Install application
#+BEGIN_SRC sh
yum install nmap
#+END_SRC

- Remove application
#+BEGIN_SRC sh
yum remove nmap
yum erase nmap
#+END_SRC

- autoremove application (similar to purge on deb)
#+BEGIN_SRC sh
yum autoremove nmap
#+END_SRC

- update all packages on the sysystem
#+BEGIN_SRC sh
yum update
yum upgrade
#+END_SRC

- Install a downloaded rpm
#+BEGIN_SRC sh
yum --nogpgcheck localinstall dl_pkg.rpm
#+END_SRC
this will use the repo list to check for deps

- List all installed packages
#+BEGIN_SRC sh
yum list installed
#+END_SRC
use grep to narrow the search window

- list the dependencies of a package
#+BEGIN_SRC sh
yum deplist httpd
#+END_SRC
this will return the dependencies of the httpd

- list all information on a package
#+BEGIN_SRC sh
yum info tmux
#+END_SRC

- clean out the /var/cache/yum directory
#+BEGIN_SRC sh
yum clean all
#+END_SRC



**** Repo Administration
- list all enabled repos
#+BEGIN_SRC sh
yum repolist
#+END_SRC

- list all enabled and disabled repos
#+BEGIN_SRC sh
yum repolist all
#+END_SRC

**** Check for system wide upgrades
- check what has an available update     
#+BEGIN_SRC sh
yum check-update
#+END_SRC

#+BEGIN_SRC sh
yum update
#+END_SRC
or
#+BEGIN_SRC sh
yum upgrade
#+END_SRC

**** Search for application
#+BEGIN_SRC sh
yum search nmap
#+END_SRC

- Know the binary but not the package
#+BEGIN_SRC sh
yum whatprovides */semanage
#+END_SRC
the */ is to indicate to search for a filename semanage

- list all available packages
#+BEGIN_SRC sh
yum list
#+END_SRC

**** Group Packages
***** Search Group Packages
#+BEGIN_SRC sh
yum grouplist
#+END_SRC

***** Install Package
#+BEGIN_SRC sh
yum groupinstall $GROUP 
#+END_SRC

**** yum-utils
***** Installation
#+BEGIN_SRC sh
yum update && yum install yum-utils
#+END_SRC
***** Find Repo of Installed Pkg
#+BEGIN_SRC sh
find-repo-of-installed httpd
#+END_SRC
***** Remove Duplicate or Ophaned Package
#+BEGIN_SRC sh
package-cleanup --orphans
package-cleanup --oldkernels
#+END_SRC
***** Find out Package dependency lists
#+BEGIN_SRC sh
repo-graph --repoid=updates | less
#+END_SRC
This will print out put all package dependencies format
"libvirt-daemon-driver-nwfilter" -> {
"libnl3"  -- dependent pkg
"glibc"   -- dependent pkg
"libvirt-daemon"
} [color="0.578260869565 0.678260869565 1.0"];

***** Check list of unresolved dependencies
#+BEGIN_SRC sh
repoclosure
#+END_SRC

***** Query Yum for information on package
#+BEGIN_SRC sh
repoquery --requires htop
#+END_SRC

***** Dump all installed RPM Pkgs into Zip file
#+BEGIN_SRC sh
yum-debug-dump
#+END_SRC

***** Restore the dump file
#+BEGIN_SRC sh
yum-debug-restore yum_debug_dump-localhost.localdomain-2017-02-24_20:59:05.txt.gz
#+END_SRC

***** Fix Unfinished or Aborted Yum Transactions
#+BEGIN_SRC sh
yum-complete-transaction --cleanup-only
yum update
#+END_SRC
Incomplete transactions can be found in /var/lib/yum/transaction-all* and transaction-done*

**** Update to a minor version
#+BEGIN_SRC sh
yum --releaserver=7.3 update
#+END_SRC
this will update the current install to 7.3

**** Download only the rpm
#+BEGIN_SRC sh
yumdownloader nmap
#+END_SRC
this will just download the nmap rpm
*** dnf
**** Basic Administration					   :rhel:dnf:
- Install application
#+BEGIN_SRC sh
dnf install vim
#+END_SRC

- Remove application
#+BEGIN_SRC sh
dnf remove vim
#+END_SRC

- Search for application
#+BEGIN_SRC sh
dnf search vim
#+END_SRC

- Check for available updates
#+BEGIN_SRC sh
dnf check-update
#+END_SRC

- Upgrade All Software to Newest Version
#+BEGIN_SRC sh
dnf upgrade
#+END_SRC

- Upgrade a specific package
#+BEGIN_SRC sh
dnf upgrade vim
#+END_SRC

** Files
/etc/yum.repos.d/
/var/cache/yum - temp files for package installation are stored here
** Create a local repository for CentOS6 (for local updates)
- apache needs to be installed
#+BEGIN_SRC sh
yum install httpd
mkdir -p /var/www/html/repos/centos/6/7
#+END_SRC

- makesure that "direcotry browsing" is not turned off in "/var/www/html" directory config in httpd.conf
  - Should look similar to this
    #+BEGIN_EXAMPLE
    Options Indexes FollowSymlinks MultiViews ExecCGI
    AllowOverride None
    Order allow,deny
    allow from all
    #+END_EXAMPLE
    the directory browsing option is the "Indexes". Makesure that a - isn't infront, as this negates the option(same as removing it).
    
- create an index file /www/html/
#+BEGIN_EXAMPLE
Centos 6.7 Local Network Repository

Browse to http://192.168.1.135/repos/centos/os/6/7
#+END_EXAMPLE

- add the createrepo tool
#+BEGIN_SRC sh
yum update
yum install craterepo
#+END_SRC

- build the local repo
#+BEGIN_SRC sh
createrepo /var/www/html/repos/centos/6/7
#+END_SRC
this updates the sqlitedb for the repos

- select the mirror that will allow us to download over http and rsync
  - centos.org/downloads/mirrors
  - check the mirror has the correct options
    
- create the rsync
#+BEGIN_SRC sh
rsync -avz rsync://mirrors.usinternet.com/centos/6.7/os/x86_64/ /var/www/html/centos/6/7/
#+END_SRC
this will pull down all the required files

- update
#+BEGIN_SRC sh
createrepo --update /var/www/html/repos/centos/6/7/
#+END_SRC
this updates the local sqlitedb of the repo

*** Configure a machine to update using a local repository
    
- move all files in the /etc/yum.repos.d/ to a backup directory
#+BEGIN_SRC sh
mv /etc/yum.repos.d/* /root/repo_backup/
#+END_SRC

- configure a file called /etc/yum.repos.d/local_repo.repo
#+BEGIN_EXAMPLE
[local_repo]
name=Local Repo
baseurl=http://192.168.1.135/repos/centos/6/7/
gpgcheck=1
gpgkey=http://mirror.centos.org/centos/RPM-GPG-key-CentOS-6
#+END_EXAMPLE

- now update the machine
#+BEGIN_SRC sh
yum update
#+END_SRC

- to confirm that the local repo is being used, run a query on an application
#+BEGIN_SRC sh
yum info git
#+END_SRC
the repo option should be "Local_Repo"

* Suse
*** zypper							   :suse:pkg:
* Arch(Manjaro|Antergos)

*** ABS(Arch Build System)
Arch: [[https://wiki.archlinux.org/index.php/Arch_Build_System][archlinux.org/Arch_Build_System]]
*** Repos
The repos are edited in /etc/pacman.conf

*** pacman
[[https://wiki.archlinux.org/index.php/Pacman][Arch: archlinux.org/pacman]]
- list installed pkgs
#+BEGIN_SRC sh
pacman -Q > pkg_list.txt
#+END_SRC

- delete orphaned pkgs
#+BEGIN_SRC sh
pacman -Rns $(pacman -Qtdq)
#+END_SRC

- Similar to autoremove in debian
#+BEGIN_SRC sh
pacman -R $(pacman -Qtdq)
#+END_SRC

- Clean out the old pkg from /var/cache/pacman/pkg/
#+BEGIN_SRC sh
pacman -Sc
#+END_SRC
this will remove all pkgs that are not installed on the system

*** yaourt
**** Diagnosis
- Search for pkg
#+BEGIN_SRC sh
yaourt -Ss python
#+END_SRC

- Provide yaourt Stats
#+BEGIN_SRC sh
yaourt --stats
#+END_SRC

- View all installed software
#+BEGIN_SRC sh
yaourt -Q
#+END_SRC

--date - will output list in chronological order
-t - this will output packages that have no dependencies

**** Operations
- Install pkg
#+BEGIN_SRC sh
yaourt -S python3.5
#+END_SRC

- Remove pkg
#+BEGIN_SRC sh
yaourt -Sr python3.5
#+END_SRC

- upgrade system
#+BEGIN_SRC sh
yaourt -Syu
#+END_SRC

- Update repos
#+BEGIN_SRC sh
yaourt -Sy
#+END_SRC

- Build from source
#+BEGIN_SRC sh
yaourt -Sb
#+END_SRC

- Backup Database
#+BEGIN_SRC sh
yaourt -B
#+END_SRC
*** pacli
This tool is a tui for both pacman and yaourt
* FreeBSD
*** pkg
*** ports
