#+TAGS: sys pkg


* Package Management Tools					    :sys:pkg:
** Deb								:sys:pkg:deb:
*** dpkg							    :deb:pkg:
**** Basic Administration
Install
#+BEGIN_SRC sh
dpkg -i application.deb
#+END_SRC
*makesure to add the deb-src to the source.list for updates

Remove
#+BEGIN_SRC sh
dpkg -r application.deb
#+END_SRC

Purge
#+BEGIN_SRC sh
dpkg -P application.deb
#+END_SRC

**** Adding an additional architecture
this comes in handy when you need to install a 32bit application on a
64bit machine
#+BEGIN_SRC sh
dpkg --add-architecture i386
apt-get update
#+END_SRC

*** apt								    :deb:pkg:
**** Basic Actions
+ Update available software database
#+BEGIN_SRC sh
apt-get update
#+END_SRC
or
#+BEGIN_SRC sh
apt update
#+END_SRC

+ Upgrade all software available for upgrade
#+BEGIN_SRC sh
apt-get upgrade
#+END_SRC
or
#+BEGIN_SRC sh
apt upgrade
#+END_SRC

+ Upgrade with a little intelligence
#+BEGIN_SRC sh
apt-get dist-upgrade
#+END_SRC
Tries to not break any applications

+ Install
#+BEGIN_SRC sh
apt-get install application
#+END_SRC

+ Remove
#+BEGIN_SRC sh
apt-get remove application
#+END_SRC

+ Purge
#+BEGIN_SRC sh
apt-get purge apllication
#+END_SRC
This will attempt to remove all configuration files

+ Search for an application
#+BEGIN_SRC sh
apt-cache search $KEYWORD
#+END_SRC

+ Show all installed applications
#+BEGIN_SRC sh
apt-cache pkgnames
#+END_SRC
Apt only will not know about software installed with dpkg or from source
unless told

+ Fix broken dependencies
#+BEGIN_SRC sh
apt-get -f install
#+END_SRC
This comes in hand if you have installed a .deb with dpkg and there are
some dependencies missing

+ Download the source file
#+BEGIN_SRC sh
apt-get source application
#+END_SRC
To keep track of installed applications from source make sure the source
is added to /etc/apt/source.list. It will be a deb-src ....

+ Installing dependencies for a source file
#+BEGIN_SRC sh
apt-get build-dep application
#+END_SRC

**** Advanced Actions
+ apt-key
#+BEGIN_SRC sh
apt-key add <saved\_gpg\_key>
#+END_SRC
to add a gpg key to a repository, first download the key and save as a
file.

+ Apt-Src

! Think this just brings both "apt-get" and "dpkg" togeather

Downloading the source

Building source files

> apt-src build <package>

Installing source files

>apt-src

+ Updating debian kernel
#+BEGIN_SRC 
apt-cache search linux-image
#+END_SRC
this will provide all available debian linux kernels

**** rollback an apt-get upgrade
Article: [[https://www.cyberciti.biz/howto/debian-linux/ubuntu-linux-rollback-an-apt-get-upgrade/][nixcraft]]
1. search the apt history for the date of the upgrade to rollback from
  > grep -A 2 'Start-Date: YYYY-MM-DD HH:MM:SS' /var/log/apt/history.log
2. create list of programs that are to be removed
  > grep -A 2 'Start-Date: YYYY-MM-DD HH:MM:SS' /var/log/apt/history.log | tail -1 >/tmp/packages.txt
3. edit the /tmp/packages.txt and delete the Install: word
  > sed -i 's/Install://' /tmp/packages.txt
4. Final clean up
  > tr ',' '\n' < /tmp/packages.txt | sed '/automatic)/d' | awk '{ print $1}' > /tmp/final.packages.txt
  > wc -l /tmp/packages.txt - this will give the number packages that were installed
5. run this script as root
# Run as root
# Store packages name in $p
p="$(</tmp/final.packages.txt)"
 
# Nuke it
apt-get --purge remove $p
 
#clears out the local repository of retrieved package files
apt-get clean
 
# Just in case ...
apt-get autoremove
 
# Verify disk space
df -H

** Ubuntu
*** Snappy
** Rhel							       :sys:pkg:rhel:
***** Exclude Specfic Repository
Get repo list
#+BEGIN_SRC sh
yum repolist
#+END_SRC

****** Method One - Temporary
On the cmd line
#+BEGIN_SRC sh
yum update --disablerepo=isu 
#+END_SRC
This will not upgrade the packages that belong to the given repo.

****** Method Two - Permanent
Edit the repo files in /etc/yum.repos.d
set the enable parameter to 0.

***** EPEL (Extra Packages for Enterprise Linux)
Centos
#+BEGIN_SRC sh
yum install epel-release
#+END_SRC

***** IUS (Inline with Upstream Stable)
#+BEGIN_SRC sh
wget https://centos7.iuscommunity.org/ius-release.rpm
rpm -Uvh ius-release.rpm
yum repolist
#+END_SRC
*** rpm								   :rhel:pkg:
**** Basic Actions
- List of all installed packages
#+BEGIN_SRC sh
rpm -qa
#+END_SRC
q - query the database

- Show any changes since installation
#+BEGIN_SRC sh
rpm -Vv
#+END_SRC



**** Repo Administration
Adding a repo
#+BEGIN_SRC sh
wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
rpm -Uvh remi-release-6*.rpm
#+END_SRC
In this example we are downloading the remi repo

- Find package binary is associated with
#+BEGIN_SRC sh
rpm -qf /sbin/chronyd
#+END_SRC

- Find all packages that are associated with a binary
#+BEGIN_SRC sh
rpm -ql chrony
#+END_SRC
this will provide a list of all the files

- Find the configuration files of a binary
#+BEGIN_SRC sh
rpm -qc chrony
#+END_SRC

- Find all documentation that is stored for a binary
#+BEGIN_SRC sh
rpm -qd chrony
#+END_SRC

- Check the installation script of an rpm
  - already installed
  #+BEGIN_SRC sh
  rpm -q --scripts http
  #+END_SRC
  This allows us to check the installation script of a package
  
  - before installation
  Download the rpm from the repo
  #+BEGIN_SRC sh
  rpm -qp --scripts the_none_veri_pkg.rpm
  #+END_SRC
  qp - query package

- Query repo for package
#+BEGIN_SRC sh
repoquery -ql yp-tools
#+END_SRC

*** yum								   :rhel:pkg:
**** Basic Administration
- Install application
#+BEGIN_SRC sh
yum install nmap
#+END_SRC

- Remove application
#+BEGIN_SRC sh
yum remove nmap
#+END_SRC

- Purge application
#+BEGIN_SRC sh
yum purge nmap
#+END_SRC

- Install a downloaded rpm
#+BEGIN_SRC sh
yum --nogpgcheck localinstall dl_pkg.rpm
#+END_SRC
this will use the repo list to check for deps

- List all installed packages
#+BEGIN_SRC sh
yum list installed
#+END_SRC
use grep to narrow the search window

**** Repo Administration
list all the repos
#+BEGIN_SRC sh
yum repolist
#+END_SRC

**** Check for system wide upgrades
#+BEGIN_SRC sh
yum update
#+END_SRC
or
#+BEGIN_SRC sh
yum upgrade
#+END_SRC

**** Search for application
#+BEGIN_SRC sh
yum search nmap
#+END_SRC

- Know the binary but not the package
#+BEGIN_SRC sh
yum whatprovides */semanage
#+END_SRC
the */ is to indicate to search for a filename semanage

**** Group Packages
***** Search Group Packages
#+BEGIN_SRC sh
yum grouplist
#+END_SRC

***** Install Package
#+BEGIN_SRC sh
yum groupinstall $GROUP 
#+END_SRC

**** yum-utils
***** Installation
#+BEGIN_SRC sh
yum update && yum install yum-utils
#+END_SRC
***** Find Repo of Installed Pkg
#+BEGIN_SRC sh
find-repo-of-installed httpd
#+END_SRC
***** Remove Duplicate or Ophaned Package
#+BEGIN_SRC sh
package-cleanup --orphans
package-cleanup --oldkernels
#+END_SRC
***** Find out Package dependency lists
#+BEGIN_SRC sh
repo-graph --repoid=updates | less
#+END_SRC
This will print out put all package dependencies format
"libvirt-daemon-driver-nwfilter" -> {
"libnl3"  -- dependent pkg
"glibc"   -- dependent pkg
"libvirt-daemon"
} [color="0.578260869565 0.678260869565 1.0"];

***** Check list of unresolved dependencies
#+BEGIN_SRC sh
repoclosure
#+END_SRC

***** Query Yum for information on package
#+BEGIN_SRC sh
repoquery --requires htop
#+END_SRC

***** Dump all installed RPM Pkgs into Zip file
#+BEGIN_SRC sh
yum-debug-dump
#+END_SRC

***** Restore the dump file
#+BEGIN_SRC sh
yum-debug-restore yum_debug_dump-localhost.localdomain-2017-02-24_20:59:05.txt.gz
#+END_SRC

***** Fix Unfinished or Aborted Yum Transactions
#+BEGIN_SRC sh
yum-complete-transaction --cleanup-only
yum update
#+END_SRC
Incomplete transactions can be found in /var/lib/yum/transaction-all* and transaction-done*

*** dnf 						       :sys:rhel:pkg:
**** Basic Administration					   :rhel:dnf:
- Install application
#+BEGIN_SRC sh
dnf install $APP
#+END_SRC

- Remove application
#+BEGIN_SRC sh
dnf remove $APP
#+END_SRC

- Search for application
#+BEGIN_SRC sh
dnf search $APP
#+END_SRC

- Upgrade All Software to Newest Version
#+BEGIN_SRC sh
dnf upgrade
#+END_SRC
** Suse							       :sys:pkg:suse:
*** zypper							   :suse:pkg:
** Arch							       :sys:pkg:arch:
*** ABS(Arch Build System)
Arch: [[https://wiki.archlinux.org/index.php/Arch_Build_System][archlinux.org/Arch_Build_System]]
*** pacman							   :arch:pkg:
- list installed pkgs
#+BEGIN_SRC sh
pacman -Q > pkg_list.txt
#+END_SRC

- delete orphaned pkgs
#+BEGIN_SRC sh
pacman -Rns $(pacman -Qtdq)
#+END_SRC

- Similar to autoremove in debian
#+BEGIN_SRC sh
pacman -R $(pacman -Qtdq)
#+END_SRC

- Clean out the old pkg from /var/cache/pacman/pkg/


*** yaourt							   :arch:pkg:
**** Diagnosis
- Search for pkg
#+BEGIN_SRC sh
yaourt -Ss python
#+END_SRC

- Provide yaourt Stats
#+BEGIN_SRC sh
yaourt --stats
#+END_SRC

**** Operations
- Install pkg
#+BEGIN_SRC sh
yaourt -S python3.5
#+END_SRC

- Remove pkg
#+BEGIN_SRC sh
yaourt -Sr python3.5
#+END_SRC

- upgrade system
#+BEGIN_SRC sh
yaourt -Syu
#+END_SRC

- Update repos
#+BEGIN_SRC sh
yaourt -Sy
#+END_SRC

- Build from source
#+BEGIN_SRC sh
yaourt -Sb
#+END_SRC

- Backup Database
#+BEGIN_SRC sh
yaourt -B
#+END_SRC
*** pacli                                                          :arch:pkg:
This tool is a tui for both pacman and yaourt
