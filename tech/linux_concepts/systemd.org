#+TAGS: sys init sysd


* systemd                                                     :sys:init:sysd:
HomePage: [[https://www.freedesktop.org/wiki/Software/systemd/][freedesktop.org/systemd]]
* Cmds
[[file://home/crito/org/tech/cmds/systemctl.org][systemctl]]
[[file://home/crito/org/tech/cmds/systemd-cgtop.org][systemd-cgtop]]
[[file://home/crito/org/tech/cmds/coredumpctl.org][coredumptl]]
[[file://home/crito/org/tech/cmds/bootctl.org][bootctl]]
[[file://home/crito/org/tech/cmds/journalctl.org][journalctl]]
* States (Runlevels)
0      - poweroff.target - halt the system
1      - rescue.target - single-user mode
2,3,4  - multi-user mode without network services started
5      - graphical
6      - reboot.target - system reboot
       - emergency.target - emergency shell

** Change the default Boot target (runlevel)
#+BEGIN_SRC sh
ln -sf /usr/lib/systemd/system/multi-user.target /etc/systemd/system/default.target
#+END_SRC
- This will set the multi-user.target as the default boot target
- If a default is set in /usr/lib this will take precedence as it is placed in /etc/systemd
- muluti-user is equilavent to RHEL runlevel 3

** Change the current target (telinit)
#+BEGIN_SRC sh
systemctl isolate graphical.target 
#+END_SRC
* Files
- /etc/systemd/system - this is where we can place unit files
- /usr/lib/systemd/system - this is where pkgs install services
/etc takes precedence over /usr/lib

- ~/.config/systemd/user/

- Example Unit File
#+BEGIN_SRC sh
[Unit]
Description=The Apache HTTP Server
After=network.target remote-fs.target nss-lookup.target
[Service]
Type=notify
EnvironmentFile=/etc/sysconfig/httpd
ExecStart=/usr/sbin/httpd/ $OPTIONS -DFOREGROUND
ExecReload=/usr/sbin/httpd $OPTIONS -k graceful
ExecStop=/bin/kill -WINCH ${MAINPID}
KillSignal=SIGCONT
PrivateTmp=true
[Install]
WantedBy=multi.user.target
#+END_SRC

* Targets
* Services
** accounts-daemon.service
It is part of AccountsService, which allows programs to get and manipulate user account information. I can't think of a good reason to allow this kind of behind-my-back operations, so I mask it.
** avahi-daemon.service
Provide zero-configuration network discovery, and make it super-easy to find printers and other hosts on your network.
** brltty.service
Braille device support, for example, Braille displays.
** debug-shell.service
Opens a giant security hole and should never be enabled except when you are using it. This provides a password-less root shell to help with debugging systemd problems.
** ModemManager.service
A DBus-activated daemon that controls mobile broadband (2G/3G/4G) interfaces.
** pppd-dns.service
Relic of the dim past. If you use dial-up Internet, keep it.
** rtkit-daemon.service
Real-time kernel scheduler.
** whoopsie.service
The Ubuntu error reporting service. It collects crash reports and sends them to https://daisy.ubuntu.com.
** wpa_supplicant.service
This is the service that interacts with wifi connections
* Timers
Arch: https://wiki.archlinux.org/index.php/Systemd/Timers
This files are a replacement for cron services
** Set Simple Script to Run Every Hour
1. we have a file named /home/crito/bin/myscript
2. Create a service file
#+BEGIN_EXAMPLE
[Unit]
Description=MyScript

[Service]
ExecStart=/home/crito/bin/myscript
#+END_EXAMPLE
This needs to be placed in either /etc/systemd/system or ~/.config/systemd/user/

3. Create the timer file and place this in the same place as the service file
#+BEGIN_EXAMPLE
[Unit]
Description=Runs myscript every hour

[Timer]
#Time to wait after booting before we run first time
OnBootSec=10min
#Time between running each consecutive time
OnUnitActiveSec=1h
Unit=myscript.service

[Install]
WantedBy=multi-user.target
#+END_EXAMPLE

4. Enable / Start - we use the timer file rather than the service file
#+BEGIN_SRC sh
systemctl start myscript.timer
systemctl enable myscript.timer
#+END_SRC

** Running multiple scripts at the same time
* Mounts
/usr/lib/systemd/system/*.mount - system mount files
/etc/systemd/system/*.mount - admin can place mounts in here (instead of fstab)

- simple mount example
lvdisk.mount
#+BEGIN_EXAMPLE
[Unit]
Description = my test mount

[Mount]
What = /dev/vgdisk/lvdisk
Where = /lvdisk
Type = xfs

[Install]
WantedBy = multi-user.target
#+END_EXAMPLE

- auto mount example
lvdisk.automount
#+BEGIN_EXAMPLE
[Unit]
Description = lvdisk automount

[Automount]
Where = /lvdisk

[Install]
WantedBy = multi-user.target
#+END_EXAMPLE
the automount requires the corresponding mount file

* Examples
** View targets initialised for for the curent target
#+BEGIN_SRC sh
systemctl list-units --type=target
#+END_SRC
** Show current default target
#+BEGIN_SRC sh
systemctl get-default
#+END_SRC
** Switching defualt target
#+BEGIN_SRC sh
systemctl set-default multi-user.target
#+END_SRC

** Exit resuce mode
This in this mode you need to type "exit" and take you to the grub screen
** Changing the current target
#+BEGIN_SRC sh
systemctl isolate multi-user.target
#+END_SRC
this move you to the non-graphical multi-user mode

* Lecture
** [[https://www.youtube.com/watch?v=VIPonFvPlAs&index=64&list=WL][Systemd at the Core of the OS - CoreOS Fest 2015]]
+ Containers
- Rocket
- Docker
- LXC
- libvirt-lxc
- OpenVZ

- Containers first brought in by Solaris with Zones 15yr previous.
- systemd-machined - is there to list containers
- Any container or vm manager can register its machine with systemd-machined
- systemd-run - run a cmd in any container
- machinectl-login - no matter the container manager it will provide a login
- Automatic host name resolution - using nss-mycontainers
- systemd-nspawn - minimal container manager, integrates with systemd-machined
  - used to run Container as a service
  - prefered container directory /var/lib/machines
  - disassembles GPT partition tables and boots raw disks
  - same systemctl cmd runs on host and guest containers
- systemd-networkd - does its own dhcp
  - Container support by default
- systemd-resolved - allows hostnames to be used on containers
  - register host name by default via LLMNR, regardless if host or container

** [[https://www.youtube.com/watch?v=S9YmaNuvw5U&t=6s][Demystifying Systemd - 2015 Red Hat Summit]]

+ Systemd Units Locations
- Maintainer: /usr/lib/systemd/system - don't touch/edit, this is where rpm/dpkg puts unit files. Edits may be over wirtten with update
- Administrator: /etc/systemd/system  - these will over-ride the above unit file 
- Non-persistent, runtime: /run/systemd/system

+ Managing Services
List loaded Services
#+BEGIN_SRC sh
systemctl -t service
#+END_SRC
-t - type

List installed services 
#+BEGIN_SRC sh
systemctl list-unit-files -t service
#+END_SRC
This is similar to chkconfig --list

Check for services in failed state
#+BEGIN_SRC sh
systemctl --state failed
#+END_SRC

Cockpit is a RHEL gui for systemd

+ Customizing Units

- List a unit's proprties
#+BEGIN_SRC sh
systemctl show --all httpd
#+END_SRC
- Query a single property
#+BEGIN_SRC sh
systemctl show -p Restart httpd
#+END_SRC

- View all local changes
#+BEGIN_SRC sh
systemd-delta
#+END_SRC

+ Slices Scopes Services
Slice - Unit type for creating the cgroup hierarchy for resource management
Scope - Organizational unit that groups a services' worker processes
Service - Process or group of processes contolled by systemd 

+ Resource Management 
#+BEGIN_SRC sh
systemd-cgtop
#+END_SRC
This needs to be turned on for memory and io

+ Unit file layout - Custom application example
#+BEGIN_SRC sh
[Unit]
Description=Describe the daemon
After=network.target

[Service]
ExecStart=/usr/sbin/[myapp] -D
Type=forking
PIDFile=/var/run/myapp.pid

[Install]
WantedBy=multi-user.target
#+END_SRC

* Tutorial
* Books
[[file://home/crito/Documents/SysAdmin/systemd-ebook-psankar.pdf][Systemd for Administrators]]
[[file://home/crito/Documents/SysAdmin/rh_systemd_reference_card.pdf][Systemd Reference Card]]
* Links
[[https://www.linux.com/learn/here-we-go-again-another-linux-init-intro-systemd][Here we go again another linux init]]
[[https://www.linux.com/learn/understanding-and-using-systemd][Understanding and Using Systemd]]
[[https://www.linux.com/learn/5-systemd-tools-you-should-start-using-now][5 Systemd Tools You Should Start Using Now]]
[[https://www.linux.com/learn/cleaning-your-linux-startup-process][Cleaning up your linux startup process]]
[[https://www.linux.com/learn/intro-systemd-runlevels-and-service-management-commands][Intro to Systemd Runlevels and Service Management Commands]]
[[https://www.digitalocean.com/community/tutorials/understanding-systemd-units-and-unit-files][Understanding Systemd Units and Unit Files - DigitalOcean]]
