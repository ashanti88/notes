#+TAGS: cron job_synchronisation application_synchronisation anacron


* cron
Gentoo: [[https://wiki.gentoo.org/wiki/Cron][wiki.gentoo.org/cron]]
* Services
** cronie
Cronie (sys-process/cronie) is a fork of vixie-cron done by Fedora. Because of it being a fork it has the same feature set the original vixie-cron provides. Additionally cronie comes with an anacron implementation which must be enabled through the anacron USE flag.
** fcron
Fcron aims at replacing vixie-cron and anacron. It is designed to work on systems that are not continuously running and it is packed with extra features. It has job startup constraints, job serialization controls, the ability to assign nice values to jobs and the ability to schedule jobs to run at system startup. See fcron's home page for more information.

Features of sys-process/fcron:
  - Designed to work on systems that are not continuously running, i.e. it can run a job after restarting if it was missed;
  - Setting of environment variables and many other options in crontabs;
  - Enhanced crontab syntax with support for many new features;
  - Each user can have a personal crontab, access is controlled by cron.allow and cron.deny
** dcron
A simple, elegant and secure implementation of cron. It does not allow the specification of environment variables in crontabs and all cron-jobs are run from /bin/sh. Like vixie-cron, each user has his own crontab. As of version 4 it contains anacron-like features.

Features of sys-process/dcron:
  - Fast, simple and free of unnecessary features;
  - Access to crontab is limited to the cron group, i.e. it doesn't rely on any external faculties.
** vixie-cron
Vixie-cron is a full featured cron implementation based on SysV cron. Each user has his own crontab and is allowed to specify environment variables within that crontab. Unlike the other cron variants, it also offers support for SELinux and PAM. It supports fewer architectures than Dcron, but more than Fcron. Latest version is 4.1 released on January 2004.

Features of sys-process/vixie-cron:
  - Support for SELinux;
  - Support for PAM (/etc/security/limits.conf);
  - Setting of environment variables in crontabs (PATH, SHELL, HOME, etc.);
  - Each user can have a personal crontab; access is controlled by cron.allow and cron.deny

** bcron
Bcron is a new cron system designed with secure operations in mind. To do this, the system is divided into several separate programs, each responsible for a separate task, with strictly controlled communications between them. The user interface is a drop-in replacement for similar systems (such as vixie-cron), but the internals differ greatly. For more information, see the bcron homepage at http://untroubled.org/bcron.

Features of sys-process/bcron:
  - Drop-in replacement for vixie-cron;
  - Multiprocess design;
  - Native daylight savings time support.
** anacron
Anacron is not a cron daemon, it is something that usually works in conjunction with one. It executes commands at intervals specified in days and it does not assume that the system is running continuously; it will run jobs that were missed while the system was down. Anacron usually relies on a cron daemon to run it each day.
* Cmds
- crontab

* Files
/etc/crontab - shouldn't normally be edited as it can be over written, user/admin should use crontab cmd 
/etc/cron.hourly ------
/etc/cron.daily
/etc/cron.weekly    These are normally used by the pgk manager, or system to add any cron jobs that certain applicaiton requires
/etc/cron.monthly
/etc/cron.allow - if present only the users added can use the cron facility
/etc/cron.deny  - if the allow isn't present and the deny is everyone but those on this file can use cron 
/etc/cron.d/ - this is where users/admins can place cron jobs or they can add jobs with crontab -e with the specific user the cron job is for

* Alternative
- Systemd timers
- at
* Description
* Usage
- schedule a cron job with the current user
#+BEGIN_SRC sh
crontab -e
#+END_SRC
This opens the users default editor
#+BEGIN_EXAMPLE
30 14 * * * logger hello
#+END_EXAMPLE
This will write hello to the log at 2:30pm each day

* Lecture
* Tutorial
* Books
* Links
[[https://opensource.com/article/17/11/how-use-cron-linux][How to use cron in Linux]]


* anacron
* Description
* Usage
* Lecture
* Tutorial
* Books
* Links
