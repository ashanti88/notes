#+TAGS: virtualization kvm


* KVM
HomePage: https://www.linux-kvm.org/page/Main_Page

* Description
This is an overview of how linux implements virtualization
[[file://home/crito/Pictures/org/kvm_arch_overview.jpg]]

This is an overview of libvirt and the types of virtualization it is able to interact with and corresponding tools
[[file://home/crito/Pictures/org/Libvirt_support.png]]

* Usage
- checking that the cpu is virt enabled
#+BEGIN_SRC sh
egrep 'vmx | svm' /proc/cpuinfo
#+END_SRC
any number greater than 0 means that virtulization is possible
vmx - intel based virt
svm - amd based virt

- checking that the linux kvm modules are installed
#+BEGIN_SRC sh
lsmod | grep kvm
#+END_SRC
This is the command run a RHEL system
[[file://home/crito/Pictures/org/kvm_modules.png]]

- check that libvirtd is running
#+BEGIN_SRC sh
systemctl status libvirtd
#+END_SRC
this will shows if it is running

** Configure a Hypervisor to Host Virtual Guests (Ubuntu 15.04)
- installation
#+BEGIN_SRC sh
apt-get install qemu-kvm qemu libvirt-bin virtinst bridge-utils virt-manager virt-viewer
#+END_SRC

- check virtualization is possible
#+BEGIN_SRC sh
egrep 'vmx | svm' /proc/cpuinfo
#+END_SRC
any number greater than 0 means that virtulization is possible

- check the module is installed
#+BEGIN_SRC sh
lsmod | grepvhost
modprobe vhost_net
lsmod | grepvhost
#+END_SRC
if not intalled then run the modprobe cmd

** Configure Virtual Networking to Support Virtualized Guests

- create a file /etc/network/interfaces
#+BEGIN_EXAMPLE
auto lo
iface lo inet loopback
auto eth0
dns-nameservers 10.0.0.30
iface br0 inet static
address 10.0.0.30
network 10.0.0.0
netmask 255.255.255.0
broadcast 10.0.0.255
gateway 10.0.0.1
dns-nameservers 10.0.0.30
bridge_ports eth0
brdige_stp off
auto br0
#+END_EXAMPLE
reboot the system for this to take effect

- confirm that the bridge has been added
#+BEGIN_SRC sh
ifconfig
#+END_SRC
this should show the virbr0

- start the virt-manager
#+BEGIN_SRC sh
sudo virt-manager
#+END_SRC
you will now be able to create virtual machines that can communicate with each other


* Lecture
** KVM and QEMU Internals - Understanding the IO subsystem - Kyle Bader :openstack:
   
+ Full virtualization and Paravirtualization
  - Full 
    - runs normal guest os iso
    - slow
    - trap emulate
    - doesn't require intel-VT or AMD-V extensions

  - Paravirtualization
    - best for I/O performance.
    - requires modification of guest os.
    - virtio-blk and virtio-scsi
      - either of these drivers can be choosen on the glance image.  
	
+ AIO Modes in Nova
  - Asynchronious IO
    - uses kernel AIO io_submit(2)
    - can help performance, but io_submit can block causing jitter in VM(missed ticks)
  - Synchronious IO
    - default in Nova
    - pread64, pwrite64 calls
    - userspace implementation of AIO using thread pool.

+ Caching modes available in QEMU
  - uses host caching
  - guest disk WCE
  - rbd_cache
  - rbd_max_dirty

- cache modes are influenced by Nova.
- Example: disk_cachemodes='writeback' in nova.conf
- forces same cache behaviour for all vm's and cinder volume types

*** L^
- Supermicro - mentioned with percona
- gorilla scalability model - neil gunther
- rbd based cluster
* Tutorial
** [[https://www.linux.com/learn/intro-to-linux/2017/5/creating-virtual-machines-kvm-part-1][KVM - Linux.com]]

* Books
* Links



