#+TAGS: virtualization kvm


* KVM
HomePage: https://www.linux-kvm.org/page/Main_Page

* Files
* Cmds
- [[file://home/crito/org/tech/virt_and_cloud/virt-manager.org][virt-manager]]
- [[file://home/crito/org/tech/virt_and_cloud/virsh.org][virsh]]
- [[file://home/crito/org/tech/virt_and_cloud/virt-viewer.org][virt-viewer]]



* Description
This is an overview of how linux implements virtualization
[[file://home/crito/Pictures/org/kvm_arch_overview.jpg]]

This is an overview of libvirt and the types of virtualization it is able to interact with and corresponding tools
[[file://home/crito/Pictures/org/Libvirt_support.png]]

* Usage
** Initial setup
- checking that the cpu is virt enabled
#+BEGIN_SRC sh
egrep 'vmx | svm' /proc/cpuinfo
#+END_SRC
any number greater than 0 means that virtulization is possible
vmx - intel based virt
svm - amd based virt
1M  - 64bit virtualization capable

- checking that the linux kvm modules are installed
#+BEGIN_SRC sh
lsmod | grep kvm
#+END_SRC
This is the command run in a RHEL system
[[file://home/crito/Pictures/org/kvm_modules.png]]

- if module is missing run
#+BEGIN_SRC sh
modprobe kvm kvm_intel
modprobe kvm kvm_amd
#+END_SRC
run whichever type of processor you have

- for the addition of physical hardware to VMs Virtaulization extensions needs to be enabled, these are found in the bios if available.

- install the required packages
#+BEGIN_SRC sh
yum install qemu-kvm libvirtd virt-install virt-manager
pacman -S virt-manager qemu vde2 ebtables dnsmasq bridge-utils openbsd-netcat
#+END_SRC

- alternative install for rhel
#+BEGIN_SRC sh
yum group install virtualization
#+END_SRC

- check that libvirtd is running and enable
#+BEGIN_SRC sh
systemctl status libvirtd
systemctl enable libvirtd
#+END_SRC

- sanity check that libvirt can use or system
#+BEGIN_SRC sh
virt-host-validate
#+END_SRC
#+BEGIN_EXAMPLE
/etc/sysctl.d ᐅ cd  
~ ᐅ virt-host-validate  
  QEMU: Checking for hardware virtualization                                 : PASS
  QEMU: Checking if device /dev/kvm exists                                   : PASS
  QEMU: Checking if device /dev/kvm is accessible                            : PASS
  QEMU: Checking if device /dev/vhost-net exists                             : PASS
  QEMU: Checking if device /dev/net/tun exists                               : PASS
  QEMU: Checking for cgroup 'memory' controller support                      : PASS
  QEMU: Checking for cgroup 'memory' controller mount-point                  : PASS
  QEMU: Checking for cgroup 'cpu' controller support                         : PASS
  QEMU: Checking for cgroup 'cpu' controller mount-point                     : PASS
  QEMU: Checking for cgroup 'cpuacct' controller support                     : PASS
  QEMU: Checking for cgroup 'cpuacct' controller mount-point                 : PASS
  QEMU: Checking for cgroup 'cpuset' controller support                      : PASS
  QEMU: Checking for cgroup 'cpuset' controller mount-point                  : PASS
  QEMU: Checking for cgroup 'devices' controller support                     : PASS
  QEMU: Checking for cgroup 'devices' controller mount-point                 : PASS
  QEMU: Checking for cgroup 'blkio' controller support                       : PASS
  QEMU: Checking for cgroup 'blkio' controller mount-point                   : PASS
  QEMU: Checking for device assignment IOMMU support                         : PASS
  QEMU: Checking if IOMMU is enabled by kernel                               : WARN (IOMMU appears to be disabled in kernel. Add intel_iommu=on to kernel cmdline arguments)
   LXC: Checking for Linux >= 2.6.26                                         : PASS
   LXC: Checking for namespace ipc                                           : PASS
   LXC: Checking for namespace mnt                                           : PASS
   LXC: Checking for namespace pid                                           : PASS
   LXC: Checking for namespace uts                                           : PASS
   LXC: Checking for namespace net                                           : PASS
   LXC: Checking for namespace user                                          : WARN (User namespace support is recommended)
   LXC: Checking for cgroup 'memory' controller support                      : PASS
   LXC: Checking for cgroup 'memory' controller mount-point                  : PASS
   LXC: Checking for cgroup 'cpu' controller support                         : PASS
   LXC: Checking for cgroup 'cpu' controller mount-point                     : PASS
   LXC: Checking for cgroup 'cpuacct' controller support                     : PASS
   LXC: Checking for cgroup 'cpuacct' controller mount-point                 : PASS
   LXC: Checking for cgroup 'cpuset' controller support                      : PASS
   LXC: Checking for cgroup 'cpuset' controller mount-point                  : PASS
   LXC: Checking for cgroup 'devices' controller support                     : PASS
   LXC: Checking for cgroup 'devices' controller mount-point                 : PASS
   LXC: Checking for cgroup 'blkio' controller support                       : PASS
   LXC: Checking for cgroup 'blkio' controller mount-point                   : PASS
   LXC: Checking if device /sys/fs/fuse/connections exists                   : PASS
#+END_EXAMPLE
This will provide a print out of test with pass, fail, warn. If warn it will provide a possible solution

- overview of the node and show the nodes capablities
#+BEGIN_SRC sh
virsh nodeinfo
virsh domcapabilities
#+END_SRC

** Post Installation Tasks
Users will require root access to access virt-manager as the system currently stands.
- To remedy this we can either add the user to the kvm group or if the user is in the wheel add a polkit rule(in RHEL this rule is already created as 50-default.rules
/etc/polkit-1/rules.d/50-default.rules
#+BEGIN_EXAMPLE
/* -*- mode: js; js-indent-level: 4; indent-tabs-mode: nil -*- */

// DO NOT EDIT THIS FILE, it will be overwritten on update
//
// Default rules for polkit
//
// See the polkit(8) man page for more information
// about configuring polkit.

polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
#+END_EXAMPLE
- adding the user to the kvm group means that you won't be prompted for a password  


** Configure a Hypervisor to Host Virtual Guests (Ubuntu 15.04)
- installation
#+BEGIN_SRC sh
apt-get install qemu-kvm qemu libvirt-bin virtinst bridge-utils virt-manager virt-viewer
#+END_SRC

- check virtualization is possible
#+BEGIN_SRC sh
egrep 'vmx | svm' /proc/cpuinfo
#+END_SRC
any number greater than 0 means that virtulization is possible

- check the module is installed
#+BEGIN_SRC sh
lsmod | grepvhost
modprobe vhost_net
lsmod | grepvhost
#+END_SRC
if not intalled then run the modprobe cmd

** Configure Virtual Networking to Support Virtualized Guests

- create a file /etc/network/interfaces
#+BEGIN_EXAMPLE
auto lo
iface lo inet loopback
auto eth0
dns-nameservers 10.0.0.30
iface br0 inet static
address 10.0.0.30
network 10.0.0.0
netmask 255.255.255.0
broadcast 10.0.0.255
gateway 10.0.0.1
dns-nameservers 10.0.0.30
bridge_ports eth0
brdige_stp off
auto br0
#+END_EXAMPLE
reboot the system for this to take effect

- confirm that the bridge has been added
#+BEGIN_SRC sh
ifconfig
#+END_SRC
this should show the virbr0

- start the virt-manager
#+BEGIN_SRC sh
sudo virt-manager
#+END_SRC
you will now be able to create virtual machines that can communicate with each other

* Trouble Shooting
** Permissions issue due to removing acl attrs from home directory
- noticed that these acl attrs where present on my home directory, but unsure as to why so removed.
#+BEGIN_EXAMPLE
/home ᐅ getfacl VMs
# file: VMs
# owner: crito
# group: kvm
user::rwx
user:nobody:--x
group::---
mask::--x
other::---
#+END_EXAMPLE
- this caused access permission issues for virt-manager
- once these acl were reset the permissions issue was corrected.

* Lecture
** KVM and QEMU Internals - Understanding the IO subsystem - Kyle Bader :openstack:
   
+ Full virtualization and Paravirtualization
  - Full 
    - runs normal guest os iso
    - slow
    - trap emulate
    - doesn't require intel-VT or AMD-V extensions

  - Paravirtualization
    - best for I/O performance.
    - requires modification of guest os.
    - virtio-blk and virtio-scsi
      - either of these drivers can be choosen on the glance image.  
	
+ AIO Modes in Nova
  - Asynchronious IO
    - uses kernel AIO io_submit(2)
    - can help performance, but io_submit can block causing jitter in VM(missed ticks)
  - Synchronious IO
    - default in Nova
    - pread64, pwrite64 calls
    - userspace implementation of AIO using thread pool.

+ Caching modes available in QEMU
  - uses host caching
  - guest disk WCE
  - rbd_cache
  - rbd_max_dirty

- cache modes are influenced by Nova.
- Example: disk_cachemodes='writeback' in nova.conf
- forces same cache behaviour for all vm's and cinder volume types

*** L^
- Supermicro - mentioned with percona
- gorilla scalability model - neil gunther
- rbd based cluster
* Tutorial
** [[https://www.linux.com/learn/intro-to-linux/2017/5/creating-virtual-machines-kvm-part-1][KVM - Linux.com]]

* Books
* Links
[[https://fatmin.com/2016/12/20/how-to-resize-a-qcow2-image-and-filesystem-with-virt-resize/][How to Resize a qcow2 Image and Filesystem with Virt-Resize - Fatmin Blog]]
[[https://www.benweb.eu/2015/04/virtualbox-vs-kvm/][VirtualBox Vs KVM - BenWeb]]



