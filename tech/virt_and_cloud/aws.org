#+TAGS: cloud aws


* Amazon Web Services
* Description
* Compute
* Lex
** [[https://www.youtube.com/watch?v=I5OlTMLinio][Introducing Amazon Lex]]
- Conversational Access
  - Natural
  - On-demand
  - Accessible
  - Efficient

- Development Challenges
  - Security
  - Availability
  - Speech Recognition
  - Language Understanding
  - Mobile
  - Business Logic
  - Testing
  - Messaging platforms
  - Authentication

- Lex Feautures
  - Test and speech language understanding: 
  - Deployment to chat services
  - Designed for builderrs
  - Versioning and alias support
  - Enterprise SaaS connectors
    
- Deployment to Chat Services
  - Facebook Messenger
  - Twilio
  - Manual development   

- Bot Use Cases
  - Informational Bots
    - Chattbots for consumer requests
  - Application Bots
    - Build poerful interfaces to mobile applicatons
      - hotel reservation
      - car hire
      - restaurant reservation
  - Enterprise Productivity Bots
    - Steramline enterprise work activities and improve efficiencies
  - IoT Bots
    - Enable conversational interface for device interactions

- Bot Monitoring
  - Missed Utterance Count
    - didn't hit any of your intents
  - Latency
  - Traffic 
    - which bots are being used
    - which intents are asked the most

* Dynamo
* Lambda
* IoT
* Lecture
** [[https://www.youtube.com/watch?v%3DeKyS9rvbj40][Introduction to Database Services - Brian Rice]]
+ If you host your DB on-site
  - App optimization
  - Scaling
  - HA
  - DB bakups
  - DB patches
  - OS patches
  - OS installation
  - Server maintenance
  - Rack and stack
  - Power, HVAC, networking

+ Host DB in Amazon EC2
You:                     AWS:
  - App optimization       - OS installation
  - Scaling                - Server maintenance
  - HA                     - Rack and stack
  - DB bakups              - Power, HVAC, networking
  - DB patches
  - OS patches
    
+ Host DB with managed DB service
You:                        AWS:
  - App optimization           - Scaling
                               - HA
                               - DB bakups
                               - DB patches
                               - OS patches
                               - OS installation
                               - Server maintenance
                               - Rack and stack
                               - Power, HVAC, networking
				 
+ Managed Services
  - DynamoDB - NoSQL
  - RDS - SQL database engines
  - ElastiCache - In-memory cache
  - Redshift - Data warehouse
- These services provide alternatives to ssh to access the DB    

+ DynamoDB
  - Simple and fast to deploy
  - Simple and fast to scale
    - To millions of IOPS
  - Data is automatically replicated
  - Fast, predicatable performance
- No cost to get started; pay only for what you consume
  
+ Amazon RDS
  - Amazon Aurora, MySQL, PostgreSQL, Oracle, SQL Server
- No cost to get started; pay only for what you consume
- Choose a DB instance type with the right amount of CPU and memory
- Automated bakups
  - restore your db to a point in time
  - enabled by default
  - choose a retention period, up to 35 days
- Manual snapshots
  - persist until you delete them
  - stored in Amazon S3
  - Build a new DB instance from a snapshot when needed
- choose Multi-AZ
  - Availability Zone is a physically distinct independent infrastructure
  - Failover occurs automatically in response to the most important failure scenarios
  - failover usually under 90secs

+ ElastiCache
  - High performance, resizable in-memory caching
  - memcached and Redis engines
  - ElastiCache is wrapper around either of the above engine that is chosen
    
+ Redshift
  - Petabyte-scale columnar DB
  - Fast response time
    - ~ 10x that of typical relational stores
- Pricing $1,000 per TB per year
  - Uses PostgrsSQL JDBC/ODBC
  - is built to reduce I/O
    - data compression
    - zone maps
    - direct-attached storage

** [[https://www.youtube.com/watch?v%3DezpMM1dzN68][Using Domain Verification with Amazon Simple Email Service]]
Back in 2012 Free Tier
  - 2000 messages for free each day when you call SES from your EC2 instance or through AWS Elastic Beanstalk
    
SES - Getting Started
The Amazon SES Sandbox
 - verifying Senders(email accounts that are going to send mail)
 - in the sandbox 
   - 200 messages per 24 hours
 - in production
   - quota - starts at 10000 per day
   - still can only send from verified emails
** [[https://www.youtube.com/watch?v%3DVC0k-noNwOU][Amazon S3 Masterclass - Ian Massingham]]
- Secure
- Durable
- Highly-scalable object storage
- Store and retrieve

+ Use Cases
  - Backup & Archiving
  - Content Stroage & Distribution
  - Big Data Analytics
  - Static Website Hosting
  - Cloud-native Application Data
  - Disaster Recovery
    
*** Fundimental Concepts
  - Buckets
    - Containers for objects stored in S3
    - Consist of data & metadata
    - Combination of a bucket, key & version Id uniquely identify each object.
  - Regions
    - The geographical region where Amazon S3 will create your bucket
    - Will never leave that region, unless you move them
  - Web Store not a file system
  - APIs - http://aws.amazon.com/documentation/s3
  - SDKs - http://aws.amazon.com/tools/
  - Acces via AWS CLI - similar to bash cmds - ls, cp, mv, rm etc

+ Difference between fs and web store
  - write once, read many times (S3 reading more than writing)
  - Eventually consistent

+ Namespaces
  - Object key
    - Max 1024 bytes UTF-8
    - Unique within a bucket
    - Including 'path' prefixes
example - assets/js/jquery/plugins/jtables.js

+ Throughput Optimisation
  - S3 automatically partitions based upon key prefix
    
+ Access Controls
  - IAM Policies
    - fine grained control
    - Administer as part of role based access
    - Apply policies to S3 at role, user and group level
  - Bucket Policies - allow anonymous persons access to a bucket, a class etc
    - Fine grained
    - Apply policies at the bucket level in S3
    - Incorporate user restrictions without using IAM
  - ACLs
    - Coarse grained
    - Apply access control rules at the bucket and or object level in S3
*** Getting Started
- Class of storage
  - Standard - 99% durability and 99% availability
  - Reduced Redundancy Storage - reduced cost, but at lower levels of redundancy
  - Glacier - archiving data, where data access is infrequent and retrieval time of several hours is acceptable.
            - very low-cost
class can be specified on the aws cli 
#+BEGIN_SRC sh
aws s3 cp aws_uki.txt s3://aws-ianm-s3-masterclass/ --storage-class REDUCED_REDUNDANCY
#+END_SRC
class can also be changed in the AWS console(web interface)

- Encryption
  - Securing Data in Transit
    - SSL over HTTPS
    - Alternatively use a client encryption lib such as the Amazon S3 encryption client to encrypt your data before uploading to Amazon S3
      - this is done with a one time encryption key
  - Server Side Encryption (SSE) - 3 options
    - SSE-S3 key management - Amazon mgmt of keys
    - SSE-C - Customer-Provided Keys - Amazon disgards the key
    - AWS KMS (SSE-KMS) - this is a stand alone service
      - S3 with encrypt your data at rest using keys that you manage in the AWS key mgmt service (KMS)
      - KMS provides audit trail to see who used your key to access which object
	
- Audit logs
  - access logs can be created per bucket
    
- Multi-Factor Auth Delete

- Time-Limted Access to Objects
  - time limited urls to allow access to an object for a set time
    
- Versioning & Cross Region Replication
  - Bucket level
    - automatically preserves all copies of objects
  - Persistent
Versioning will increase costs, due to storing multiple copies of objects

- Lifecycle Rules
  - moving S3 buckets to glacier after a certain period of time
    - example would be transaction data after 30 days
  - deleting objects after a certain period of time
    - example would be logs after 30 days

- Website Hosting
  - you can host your entire static website on Amazon S3
* Tutorials
** AWS Foundations - CBT Nuggets
*** How to build a cloud presence
1. Going to the cloud: Traditional Method
Build your own cloud placing your equipment in a data center.
2. Going to the Cloud: AWS Method
Use AWS services to create your infrastructure.

**** Traditional Method
+ Setting up
  - Select a Data Center
  - Purchase Rack Space
  - Purchase Internet Connectivity
  - Install Equipment
    - Switches
    - Firewalls
    - Servers
    - Storage - SAN or NAS
  - Configure Services
  - Expand to More Data Centers - Locality is important when it comes to serequipmentvices such as VOIP
+ Pros & Cons:
  - Massive up-front cost, BIG "Steps"
  - IT Staff: focus on the data center 
  - In-House knowledge limits
  - recreate the wheel
  - It's yours
  - "Monster Server" Capabilities

**** AWS Method
+ Setting up
  - Pick your region
  - Pick your availability zone - these are physical data centers
    - for redundancy you should look at rolling out in to more than one zone
  - Provision your server
  - Configure services
  - Expand to other availability zones
  - Expand to other regions
+ Pros & Cons:
  - Pay As You Go; Pricing Models
  - Elastic Computing; Grow as needed
  - Economy of scale
  - Immediate security accreditation
  - Multiple data centers easily
  - Collaborative innovation
  - horizontal scaling

**** Vertical Vs Horizontal Scaling
***** Vertical Scaling 
  - Increasing HW
  - Increasing Capacity
  - Easy to do

***** Horizontal Scaling (scale out):
  - Increasing instances
  - Shared capacity
  - Typically requires planning

*** Getting Started with AWS
**** What you need to get started
- A Purpose
- Logon Information/Email Address
- A Credit Card/Phone number
***** An Understanding of the services
  - Cloudwatch 
    - Monitors all of the services
    - Can start to get expensive
  - EC2 - Elastic Compute Cloud
    - allows os templates to be created with specific functions db, web etc
    - public available timeplates
  - S3 - Simple Storage Service 
    - written to at least two places
    - Where your image is held whilst not being run
  - EBS - Elastic Block Store
    - faster than S3
    - optional to running image on the ephemeral memeory of the server
      - means that when the machine is shutdown it's data isn't lost
  - Route 53
    - create name records for your domains
    - manages dns
  - VPC - Virtual Private Cloud
    - site to site cloud
  - Auto Sacling
    - amazon automated server management tool
    - will spin up servers when certain limits are reached 
    - shutdown instances when website hits a lull
  - CloudFormation
  - IAM - Identity and Access Management
    - create credentials to access system
  - ELB - Elastic Load Balancing
  - SimpleDB/DynamoDB
    - simpleDB now discontinued
    - Dynamo is really fast
***** AWS Management Console
*** Creating an EC2 Instance - AMI Selection (Amazon Machine Image)
+ Considerations for Provisoning Instances
- In a region all availability zones are connected by high speed fiber.
- Between reigons you are running over the internet and this becomes the dependent factor for data transfer and you should be aware.
- AMI can come with software installed, LAMP, SQL Server etc
- Customized AMIs are stored in S3, this is charged.
- How many instances ?
- Instance type? - micro is available on the Free Tier
- AWS Market Place sells AMIs from different providers offering different software.

*** Understanding EC2 Pricing Models
**** On-demand Instance Pricing
- no commit model
- costs a little more due to this fact
- pricing fluctuates with region
**** Reserved Instance Pricing    
- 1 or 3 year term contract that will lower the rate paid/hour on instances
- Types - these are nothing to do with box performance
    - Light
    - Medium
    - Heavy
The difference in these types is the costing, light you pay less up front but your hourly rate is higher, and Heavy is the opposite, more up front but less per hour.
**** Spot Instance Pricing
- Bidding on left over CPU memory that the data center has available
- But if out bid you lose your resources are shutdown
- The more requirements adds to the chance that you will lose your instance if it is accepted at all.
*** Understanding EC2 Instance Types
**** Measureing Instance Types
+ Instance Types always include a mix of:
  - Memory
  - Processing Power
  - Storage
  - I/O performance
    
+ Instance Families
  - Micro
  - Small
  - Medium
  - Large
  - Extra Large

+ Specific cases
  - High Memory
  - High CPU
  - Cluster

+ Amazon Best Practice: Start small, benchmark and scale up in necessary

**** Understanding Processing Power Ratings
- Everything in AWS is "Virtual" but there really are physical items!
- To provide consistant performance, created the EC2 Compute Unit (ECU)
  - is equivalent to a 1.0 to 1.2 GHz 2007 Xeon Processor
  - it is then split over the number of cores specified by the type
    
**** Understanding I/O Rating
- I/O ratings measure shared resources(Network/Disk)
- Equal shares given to the instances
- I/O Levels
  - Low
  - Moderate
  - High
  - Very High
- Heavy disk performance can benefit from a RAID 0 set across 4 disks
  - obviously risk that comes with RAID 0 one failed disk all gone!!
*** Understanding Tags and Key Pairs
+ Tags
- Tags are a way to identify instances    
  - develop a logical naming convention
- These tags appear on the instance dashboard
- Show/Hide button allows you to customize which tags are visable.
  
+ Key Pairs
- These are the pub/priv key pair that are issued by AWS.
- Windows Key Pair
  - this key gives you the default windows password
  - you get this by right clicking on the window instance and click on "Get Windows Password"
  - you will then be challenged for the priv key to unlock the encrypted password.
- Linux Key Pair
  - this is how you will connect to the machine unless you change the key 
    
+ What if I lose my key?
- Amazon has no way for you to get your priv key again.
- If you have an instance that you need to access, you will need to create an AMI of that instance and recreate it. All of your data will be there but it my require some admin, such as remounting of disks etc.

*** Understanding Security Groups
**** Security Groups: Your EC2 Firewall
- Inbound filtering for your instances
- "Security Groups" - can be individual (Group of one) or multiple
- By default - 
  - Rules: No traffic inbound, all traffic outbound, all traffic within group
- Changing security groups can only be done inside VPC
- Good practice to split DB and Web servers into different secuirty groups
- Don't open RDP(3389) to the world lock it down to your ip, like you do with linux ssh.

*** Understanding Elastic IPs and ELB

** Getting Started with Amazon EC2 Linux Instances - Amazon
*** Overview
- Selecting Availability Zone if not set by you is selected by Amazon.
- When launched the instance is secured with a key pair and security group.
- Connection to the instance requires the private key of the pair.
*** Launch an Instance - Basic Configuration
An instance can be launched using the AWS Management Console.
1. Open the Amazon EC2 console
2. From the console dashboard, choose Launch Instance
3. Now choose the image that you would like to launch.
4. Select the type of server specification you would like.
5. Click Review and Launch to let the wizard complete the other configuration settings for you.
6. Select the security group, recommened that you restrict access to only your ip.
7. Click Launch.
8. Download the key pair.
9. connect to instance using > ssh -i <.pem> ec2-user@<ip>   

*** Creating a Billing Alarm
- To create a billing alarm you first must activate billing alerts.
1. Go to Billing
2. Select Preferences
3. Select Recieve Billing Alerts check box
4. Save preferences.
+ Create a billing Alarm
1. Go to cloudwatch
2. Select Metrics and choose dollars   
3. Select N.Virgina Region. This is where all billing is done.
4. In Billing click Create Alarm
5. This will popup a form asking for email and $ limit to notify at (so as not to go over free tier set it to $0.1) this will not disable the instance just notify you that you are going to go over the free tier. 4. In Billing click Create Alarm
* Books
* Links
