#+TAGS: lxc lxd linux_containers


* LXC/LXD
Homepage: https://linuxcontainers.org/lxd/getting-started-cli/
Images: https://uk.images.linuxcontainers.org/

* Files
/var/lib/lxd/containers - this is where containers are stored (contents is similar to what an exported image looks like)
* Description
* Usage
LXC - Linux Containers
LXD - Linux Container Daemon

- start
#+BEGIN_SRC sh
lxc start name_of_container
#+END_SRC
  
- stop
#+BEGIN_SRC sh
lxc stop name_of_container
#+END_SRC

- list all containers
#+BEGIN_SRC sh
lxc list
#+END_SRC

- list all images
#+BEGIN_SRC sh
lxc image list
#+END_SRC

- delete an image
#+BEGIN_SRC sh
lxc delete name_of_image
#+END_SRC

** Installing LXD on Ubuntu 16.04
- install lxd and lxd-client
#+BEGIN_SRC sh
apt-get install lxd lxd-client
#+END_SRC

- configure lxd
#+BEGIN_SRC sh
lxd init
#+END_SRC
this will take you through choices for how you wold like storage and network to be configured

- terminal output of installation and configuration
#+BEGIN_EXAMPLE
root@alickmitchell1:~# apt-get install lxd lxd-client
Reading package lists... Done
Building dependency tree
Reading state information... Done
lxd is already the newest version (2.0.11-0ubuntu1~16.04.4).
lxd-client is already the newest version (2.0.11-0ubuntu1~16.04.4).
The following packages were automatically installed and are no longer required:
  linux-aws-headers-4.4.0-1050 linux-headers-4.4.0-1050-aws linux-image-4.4.0-1050-aws
Use 'sudo apt autoremove' to remove them.
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
root@alickmitchell1:~# lxd init
Do you want to configure a new storage pool (yes/no) [default=yes]?
Name of the storage backend to use (dir or zfs) [default=dir]:
Would you like LXD to be available over the network (yes/no) [default=no]? yes
Address to bind LXD to (not including port) [default=all]:
Port to bind LXD to [default=8443]:
Trust password for new clients:
Again:
Do you want to configure the LXD bridge (yes/no) [default=yes]?
Warning: Stopping lxd.service, but it can still be activated by:
  lxd.socket
LXD has been successfully configured.
#+END_EXAMPLE

- confirm that lxd is working
#+BEGIN_SRC sh
lxc list
#+END_SRC

** Starting the default ubuntu container
- list current containers
#+BEGIN_SRC sh
lxc list
#+END_SRC

- launch a container
#+BEGIN_SRC sh
lxc launch ubuntu:16.04 ubuntu
#+END_SRC

- connect to the container
#+BEGIN_SRC sh
lxc exec ubuntu -- /bin/bash
#+END_SRC

** Launching other distros
The images server is where other distros can be found: https://uk.images.linuxcontainers.org/

- lauch the alpine 3.4 image
#+BEGIN_SRC sh
lxc launch images:alpine/3.4/amd64 test_launch
#+END_SRC
format for launching an image server:distro/version/arch

- connect to the alpine images
#+BEGIN_SRC sh
lxc exec test_launch -- /bin/ash
#+END_SRC
/bin/ash - this is the default sh for alpine (slim down version of bash)

** Downloading an image to host
#+BEGIN_SRC sh
lxc image copy images:debian/buster/amd64 local: --alias deb
#+END_SRC
alias - this means that deb can be used in the place of the image name

** Exporting an image to a directory
- create the directory to hold the image
#+BEGIN_SRC sh
mkdir image_dir
#+END_SRC

- export the image to the directory
#+BEGIN_SRC sh
lxc image export name_of_image image_dir
#+END_SRC
the image will be exported as a tar.xz file

** Interacting with containers
- running cmds from outside of the container
#+BEGIN_SRC sh
lxc exec name_of_container -- apt-get update
#+END_SRC

- edit a file on the container
#+BEGIN_SRC sh
lxc file edit name_of_container/etc/nginx/conf.d/default.conf
#+END_SRC
this will open the file in your default editor

- moving files from the host to the container
#+BEGIN_SRC sh
lxc file push index.html name_of_container/var/www/index.html
#+END_SRC

** Create a snapshot of a container
- create a snapshot
#+BEGIN_SRC sh
lxc snapshot name_of_container name_of_snapshot
#+END_SRC

*** Restore a snapshot
#+BEGIN_SRC sh
lxc restore name_of_container name_of_snapshot
#+END_SRC
this should be done with care as the original contianer will be deleted

*** Create a duplicate container
- first find out the name of the snapshot
#+BEGIN_SRC sh
lxc info name_of_container
#+END_SRC
it will be at the bottom of the information

- now create the copy
#+BEGIN_SRC sh
lxc copy name_of_container/name_of_snapshot name_of_duplicate
#+END_SRC

- confim new container
#+BEGIN_SRC sh
lxc list
#+END_SRC
the new container should be present, if no ipv4 addr, just wait a few seconds and retry

*** Deleting snapshots
- view current snapshots
#+BEGIN_SRC sh
lxc info name_of_container
#+END_SRC

- found the name of the snapshot
#+BEGIN_SRC sh
lxc delete name_of_container/snapshot_to_delete
#+END_SRC

** Find information on a container
- find information on a container
#+BEGIN_SRC sh
lxc info name_of_container
#+END_SRC

- example of output
#+BEGIN_EXAMPLE
root@alickmitchell1:~# lxc info web
Name: web
Remote: unix://
Architecture: x86_64
Created: 2018/04/07 06:41 UTC
Status: Running
Type: persistent
Profiles: default
Pid: 25189
Ips:
  eth0: inet    10.163.212.16   vethPXTWN0
  eth0: inet6   fd7f:16ac:1226:77ff:216:3eff:fe06:201e  vethPXTWN0
  eth0: inet6   fe80::216:3eff:fe06:201e        vethPXTWN0
  lo:   inet    127.0.0.1
  lo:   inet6   ::1
Resources:
  Processes: 6
  Memory usage:
    Memory (current): 63.36MB
    Memory (peak): 309.86MB
  Network usage:
    eth0:
      Bytes received: 22.10MB
      Bytes sent: 42.77kB
      Packets received: 1030
      Packets sent: 541
    lo:
      Bytes received: 0B
      Bytes sent: 0B
      Packets received: 0
      Packets sent: 0
Snapshots:
  initialconfig (taken at 2018/04/07 07:03 UTC) (stateless)
#+END_EXAMPLE

** Creating a LXC image
- use a container(that is stopped) or snapshot
#+BEGIN_SRC sh
lxc publish web/1.0 --alias my_nginx_alpine
#+END_SRC
web/1.0 - this is the web container 1.0 snapshot

** Remotes
This is where you can pull images from

- view current remotes that images can be pulled from
#+BEGIN_SRC sh
lxc remote list
#+END_SRC

*** adding a remote machine
- on remote that has lxd already configured
#+BEGIN_SRC sh
lxc config set core.https_address "[::]:8443"
lxc config set core.trust_password secret
#+END_SRC

- on local
#+BEGIN_SRC sh
lxc remote add name_of_remote 172.31.23.109:8443 --password=secret
#+END_SRC

This means that commands can now be executed on the localhost for the remote machine
#+BEGIN_SRC sh
lxc list name_of_remote:
lxc image list name_of_remote:
#+END_SRC

*** launching a container on the remote
#+BEGIN_SRC sh
lxc launch name-of-image name_of_remote:name_of_new_container
#+END_SRC

** Open a port on a LXC container and the host
- ip forwarding needs to be enabled on the host
#+BEGIN_SRC sh
sysctl net.ipv4.ip_forward
#+END_SRC
if this returns a 0 the run the following cmds to enable

#+BEGIN_SRC sh
echo 1 > /proc/sys/net/ipv4/ip_forward
sysctl -p /etc/sysctl.conf
systemctl restart network.service
#+END_SRC

- now connect port 80 on the host with port 80 on the container with an IP rule
#+BEGIN_SRC sh
iptables -t nat -A PREROUTING -i eth0 -p tcp -m tcp --dport 80 -j DNAT --to 10.24.69.17:80
#+END_SRC

** Use Nginx as a Load balancer for a number of Containers
- launch the intial containers
#+BEGIN_SRC sh
lxc launch imagees:alipine/3.5 web1
lxc exec web1 -- apk update
lxc exec web1 -- apk add nginx
#+END_SRC

- edit the nginx.conf
#+BEGIN_SRC sh
lxc file edit web1/etc/nginx/conf.d/default.conf
#+END_SRC

#+BEGIN_EXAMPLE
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	root /var/www/;
}
#+END_EXAMPLE

- provide a /var/www/index.html
#+BEGIN_SRC sh
vim index.html
lxc file push index.html web1/var/www/index.html
#+END_SRC

- make sure the nginx service starts on a container restart
#+BEGIN_SRC sh
lxc exec web1 -- rc-update add nginx default
#+END_SRC

- start the service
#+BEGIN_SRC sh
lxc exec web1 -- /etc/init.d/nginx start
#+END_SRC

- create a snapshot
#+BEGIN_SRC sh
lxc snapshot web1 1.0
#+END_SRC

- copy two more instances of the snapshot
#+BEGIN_SRC sh
lxc copy web1/1.0 web2
lxc copy web1/1.0 web3
#+END_SRC

- edit the two new instances /var/www/index.html to be what is required
  
- start the two new containers
#+BEGIN_SRC sh
lxc start web2
lxc start web3
#+END_SRC

- create an nginx load blancer
#+BEGIN_SRC sh
lxc copy web1/1.0 lb
#+END_SRC

- edit the /etc/nginx/conf.d/default.conf
#+BEGIN_SRC sh
lxc file edit lb/etc/nginx/conf.d/default.conf 
#+END_SRC

#+BEGIN_EXAMPLE
upstream lb-web {

	server web1;

	server web2;

	server web3;

}

server {
	listen 80 default_server;
	listen [::]:80 default_server;

	location / {

		proxy_pass http://lb-web;
	}
}
#+END_EXAMPLE
- if more containers are to be added, then all that is need it the container name is add to the above config
  - likewise if a containers is to be removed, then it just needs to be removed from the file, but makesure that you clean up the containers 
  
- start the lb
#+BEGIN_SRC sh
lxc start lb
#+END_SRC

- test that the loadbalancer is serving the different containers
#+BEGIN_SRC sh
curl 10.10.10.12
curl 10.10.10.12
curl 10.10.10.12
curl 10.10.10.12
#+END_SRC
do this serveral timees and different index.html pages should be served indicating that different containers are being load balanced

- using ip tables we can now bind the lb container to the host's port 80, 
  - confirm that ipv4.ip_forward is enabled on the host
#+BEGIN_SRC sh
sysctl net.ipv4.ip_forward
#+END_SRC
this should return a 1, if not it needs to be enabled and view the above section on opening ports on lxc containers

- add the ip rule to the host that will enable ports on the containers to talk with the host
#+BEGIN_SRC sh
iptables -t nat -A PREROUTING -i eth0 -p tcp -m tcp --dport 80 -j DNAT --to 10.10.10.12:80
#+END_SRC
10.10.10.12:80 is the lb, and now when the hosts port 80 is accessed remote machines will be accessing the containers through the load balancer container

** Deploy a microservice on Ubuntu container
- launch the ubuntu image
#+BEGIN_SRC sh
lxc launch m1
#+END_SRC

- connect to the container
#+BEGIN_SRC sh
lxc exec m1 -- bash
#+END_SRC

- on the container build the LEMP stack
Nginx
#+BEGIN_SRC sh
apt-get update
apt-get install nginx
curl localhost
#+END_SRC
MySQL
#+BEGIN_SRC sh
apt-get install mysql-server
mysql_secure_installation
#+END_SRC
PHP
#+BEGIN_SRC sh
apt-get install php-fpm php-mysql php7
vim /etc/php/7.0/fpm/php.ini
#+END_SRC
change from 1 to 0
#+BEGIN_EXAMPLE
cgi.fix_pathinfo=0
#+END_EXAMPLE
#+BEGIN_SRC 
systemctl restart php7.0-fpm
#+END_SRC

- edit the /etc/nginx/sites-available/default to allow for index.php and add the ip of the container to the server_name
#+BEGIN_EXAMPLE
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    root /var/www/html;

    index index.php index.html index.htm index.nginx-debian.html;
    server_name 10.10.10.240;
    location / {


        try_files $uri $uri/ =404;
    }

    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/php7.0-fpm.sock;
    }

    location ~ /\.ht {
        deny all;
    }
}
#+END_EXAMPLE

- check nginx config files
#+BEGIN_SRC sh
nginx -t
#+END_SRC

- restart nginx
#+BEGIN_SRC sh
systemctl restart nginx
#+END_SRC

- test php by adding a info.php to /var/www/html/
#+BEGIN_EXAMPLE
<?php phpinfo(); ?>
#+END_EXAMPLE
- curl to confirm
#+BEGIN_SRC sh
curl localhost/info.php
#+END_SRC

- exit the container and create a snapshot
#+BEGIN_SRC sh
lxc snapshot m1 lempstack
#+END_SRC

- move the microservice files to the container
#+BEGIN_SRC sh
lxc file push *.php m1/var/www/html/
#+END_SRC

*** The Microservice files
- insert.php
#+BEGIN_SRC php
<php
##
# insert.php
#
# This is the sample microservice.  It takes the POST variable after "add" and adds the new name to the database
#
# run it like:
# curl localhost/insert.php?add=chad
# curl localhost/insert.php?add=terry
# curl localhost/insert.php?add=anthony
$servername = "localhost";
$username = "root";
$password = "YOURPASSWORDHERE";
$newname = $_GET['add'];
if ($newname == "") {
   die("1");
 }
$conn = new mysqli($servername, $username, $password, 'myDB');
if ($conn->connect_error) {
    die("1");
}
$sql = "INSERT INTO t1 (firstname)
VALUES ('$newname')";

if ($conn->query($sql) === TRUE) {
    echo "0";
} else {
    echo "1";
}
?>
#+END_SRC

- installdb.php
#+BEGIN_SRC php
<php 
##
#installdb.php
#
# Run this to drop/create the database and set up the tables.
# Run this before either
# of the others with
# curl localhost/installdb.php
#
$servername = "localhost";
$username = "root";
$password = "YOURPASSWORDHERE";
$conn = new mysqli($servername, $username, $password);
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error . "\n");
}
$sql = "DROP DATABASE myDB";
$conn->query($sql);
$sql = "CREATE DATABASE myDB";
if ($conn->query($sql) === TRUE) {
    echo "Database created successfully\n";
} else {
    echo "Error creating database: " . $conn->error . "\n";
}
$conn = new mysqli($servername, $username, $password, 'myDB');
$sql = "CREATE TABLE t1 (
id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
firstname VARCHAR(30) NOT NULL,
reg_date TIMESTAMP
)";
if ($conn->query($sql) === TRUE) {
    echo "Table t1 created successfully\n";
} else {
    echo "Error creating table: " . $conn->error . "\n";
}
$conn->close();
?>
#+END_SRC

- list.php
#+BEGIN_SRC php
<php 
##
# list.php
#
# This is a utility script so you can see that names have been added to the database
#
# Run it like:
# curl localhost/list.php
$servername = "localhost";
$username = "root";
$password = "YOURPASSWORDHERE";
$conn = new mysqli($servername, $username, $password, 'myDB');
if ($conn->connect_error) {
    die("1");
}
echo "\n";
$sql = "SELECT firstname FROM t1";
$result = $conn->query($sql);
if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
        echo $row["firstname"] . ", ";
    }
} else {
    echo "0 results";
}
echo "\n";
$conn->close();
?>
#+END_SRC

* Lecture
* Tutorial
* Books
[[file://home/crito/Documents/SysAdmin/Virt/lxc-lxd-cheat-sheet.pdf][LXC LXD Cheat Sheet]]
* Links
