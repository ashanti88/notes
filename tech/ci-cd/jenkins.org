#+TAGS: jenkins ci devops continous_intergration


* Jenkins
Home Page: [[https://jenkins.io/][jenkins.io]]

* Files
/etc/init.d/jenkins          - init file
/etc/sysconfig/jenkins       - configuration file
/var/log/jenkins/jenkins.log - log file
/var/lib/jenkins             - this holds the jenkins data

* Description
Automation server, jenkins provides hundreds of plugins to support building, deploying and automating any project.

** System Requirements
*** Minimum 
- Java 7
- 256MB free memory
- 1GB+ free disk space
*** Recommended for a small team
- Java 8
- 1GB+ free memory
- 50GB+ free disk space

* Usage
** Installation on RHEL6
- pull the jenkins repo
#+BEGIN_SRC sh
wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
#+END_SRC

- import the gpg keys
#+BEGIN_SRC sh
rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key
#+END_SRC

- install java (Openjdk)
#+BEGIN_SRC sh
yum install java 
#+END_SRC
Ensure that the Openjdk version is installed not the gij version

- install the jenkins package
#+BEGIN_SRC sh
yum install jenkins
#+END_SRC

- login to the ui at  http://localhost:8080 
  - the password can be found at /var/lib/jenkins/secrets/initialAdminPassword

- Now follow the simple installation steps

** Installation on RHEL7/CentOS7
   
- Determine if java is installed, and if, what version 
#+BEGIN_SRC sh
which java
#+END_SRC
if not a recent version of jdk remove

- makesure that no service is running on 8080 (the port that tomcat requires)
#+BEGIN_SRC sh
nmap -p 8080 192.168.0.10
#+END_SRC
or
#+BEGIN_SRC sh
ss -tunlpen | grep 8080
#+END_SRC

- download the jdk-8 from oracle
  
- install the jdk rpm
#+BEGIN_SRC sh
rpm -Uvh jdk-8u25-linux-x64.rpm
#+END_SRC

- use the alternatives to set Java default
#+BEGIN_SRC sh
alternatives --install /usr/bin/java java /usr/java/latest/bin/java 200000
alternatives --install /usr/bin/javac javac /usr/java/latest/bin/javac 200000
alternatives --install /usr/bin/jar jar /usr/java/latest/bin/jar 200000
#+END_SRC

- add Java variables to /etc/rc.d/rc.local
#+BEGIN_EXAMPLE
export JAVA_HOME="/usr/java/latest"
#+END_EXAMPLE

- add the Jenkins repo and gpg key
#+BEGIN_SRC sh
wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key
yum update
#+END_SRC

- install jenkins
#+BEGIN_SRC sh
yum install jenkins
#+END_SRC
this will pull down the latest lts

- start and enable the service
#+BEGIN_SRC sh
systemctl start jenkins
systemctl enable jenkins
systemctl status jenkins
#+END_SRC

- Connect to the web UI to start the Jenkins setup http://localhost:8080 (in older version you would be dropped straight into Jenkins, with newer versions a password is required that is found in /var/lib/jenkins/initialAdminPassword)

* Lecture
* Tutorial
** Linux Academy - Jenkins Quick Start
*** Lesson One - Installation and Configuration   

- Packages required
#+BEGIN_SRC sh
wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key
yum update
yum install jenkins
#+END_SRC

- Jenkins requires Java
#+BEGIN_SRC sh
yum install java-1.8.0-openjdk
#+END_SRC
check the version of jenkins and java version required
  - jenkins 2.2x java-1.8 openjdkworks
  - jenkins <2.2 java-1.6 openjdk
    
- Apply the correct FW rule to public on port 8080/tcp
  
- enable and start
#+BEGIN_SRC sh
systemctl enable jenkins
systemctl start jenkins
#+END_SRC

- test with telnet (no port restrictions)
#+BEGIN_SRC sh
telnet localhost 8080
#+END_SRC
this will show us if jenkins is accessable

- test with nginx (with port restrictions)
#+BEGIN_SRC sh
yum install nginx
#+END_SRC
proxy the connection for port 8080

/etc/nginx/nginx.conf
#+BEGIN_EXAMPLE
server{
	listen		80 default_server;
	listen		[::]:80 default_server;
	server_name	_;
	root		/usr/share/nginx/html;
	
	include /etc/nginx/default.d/*.conf;
	
	location / {
		proxy_pass	http://127.0.0.1:8080;
	}
#+END_EXAMPLE

#+BEGIN_SRC sh
systemctl enable nginx
systemctl start nginx
yum install elinks
elinks http://localhost:8080
#+END_SRC
this should take you through to the jenkins, if an nginx error is thrown it may be SELinux

- SELinux for Jenkins
#+BEGIN_SRC sh
yum install -y setroubleshoot-server selinux-policy-devel
#+END_SRC
this provides more tools for configuring SELinux

#+BEGIN_SRC sh
sepolicy network -t http_port_t
#+END_SRC
this will output a list of the allowed tcp ports

#+BEGIN_SRC sh
semanage port -a -t https_port_t -p tcp 8080
#+END_SRC
this will allow port 8080

- Jenkins Web UI
  - first input the password found in /var/lib/jenkins/secrets
  - this will take you through a final configuration and setup (plugin installation)
  - create an Admin User
  - Jenkins may show an error for the proxy
	- follow the link and copy the nginx config provided (its more variables to add to the nginx.conf)
	  
*** Lesson Two - Preparing Our Environment - Build Accounts
   
- configure jenkins user
  - change the jenkins user in /etc/passwd to have a bash shell
  #+BEGIN_SRC sh
  passwd jenkins
  su - jenkins
  #+END_SRC
  - this should provide /var/lib/jenkins as home
  - create ssh keys for jenkins
  #+BEGIN_SRC sh
  ssh-keygen
  ssh-copy-id jenkins@localhost
  #+END_SRC
  - and root privileges without needing password
  #+BEGIN_EXAMPLE
  jenkins ALL=(ALL)		NOPASSWD: ALL
  #+END_EXAMPLE
  - create jenkins user on build slave
	
*** Lesson Three - Our First Jenkins Build
   
- visudo
#+BEGIN_EXAMPLE
Defaults !requiretty
#+END_EXAMPLE
- this allows scripts to be built in the background by Jenkins
- withouth this an error will be thrown if outpput requires tty

*** Lesson Four - Plugin Management and Builds

- couple of times a month check for plugins updates
  - check the plugin site for any errors or failures before install

*** Lesson Five - Creating Scheduled Builds
*** Lesson Six - Setting Up a Build Slave   
   
- makesure that any plugin dependcies are installed on the slave
  - i.e. git for the git plugin etc

- java is required for the jenkins agent, but jenkins can install this its self
  
*** Lesson Seven - Launching Jobs on the Slave Node

- Builds are able to be chained from a slave to another machine
  - ensure that ssh keys have been sent up to allow ssh-keys(without passphrase)

** Linux Academy - Certified Jenkins Engineer
Docs: [[file:~/Documents/DevOps/Linux_Academy-Jenkins_Cert_Engineer.pdf][Linux Academy - Jenkins Cert Engineer]]
Labs:
  [[file://home/crito/Documents/DevOps/LA_Configure_Freestyle_Project_in_Jenkins_Lab.pdf][Configure Freestyle Project in Jenkins]]
  [[file://home/crito/Documents/DevOps/LA_Configure_Freestyle_Project_in_Jenkins_Lab.pdf][Configure Freestyle Project in Jenkins]]
  
*** Continous Integration and Continuous Delivery
- Basic Workflow
  

Checkout from SCM (like git)
           |
Branch and make local changes 
           |
Add or change tests as necessary
           |
Trigger automated build locally
           |
If successful, consider committing
           |
Update with latest from mainline
           |
Push changes, build and test on integration machine


- Best Practices
  - maintain a single source repo
  - have a common mainline branch (usually master)
  - automate the build
  - minimize potential for user error, automate everyting possible
  - make the build self-testing - self-testing code
  - everyone commits frequently (at least daily preferably)
  - frequent merges help with conflicts
  - build every commit
  - prioritize fixing broken builds
  - testing environment should be as close to production as possible
  - make it easy for anyone to get the latest
  - keep it open, everyone should see what's happening
  - automate the deployment


Continuous Deployment Pipeline

[[file://home/crito/Pictures/org/cd_pipeline.png]]

*** Installing and Configuring

- check no service is using tomcat port(8080)
#+BEGIN_SRC sh
netstat -tulpn | grep 8080
#+END_SRC

- download and install java from the oracle website jdk8u121 (copy the download to the server with scp)
#+BEGIN_SRC sh
rpm -Uvh jdk-8u121-linux-x64.rpm
#+END_SRC

- confirm the install
#+BEGIN_SRC sh
which java
#+END_SRC

- setup alternatives for java
#+BEGIN_SRC sh
alternatives --install /usr/bin/java java /usr/java/latest/bin/java 200000
alternatives --install /usr/bin/javac javac /usr/java/latest/bin/javac 200000
alternatives --install /usr/bin/jar jar /usr/java/latest/bin/jar 200000
#+END_SRC

- specifiy the java home variable
/etc/rc.local
#+BEGIN_EXAMPLE
export JAVA_HOME="/usr/java/latest"
#+END_EXAMPLE

- download and install jenkins 
#+BEGIN_SRC sh
wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key
yum install -y jenkins-2.19.4-1.1
#+END_SRC

- now disable the jenkins repo
#+BEGIN_SRC sh
yum-config-manager --disable jenkins
#+END_SRC
this will stop any accidental upgrades

- start and enable the jenkins
#+BEGIN_SRC sh
systemctl start jenkins
systemctl enable jenkins
systemctl status jenkins
netstat -tulpn | grep 8080 # confirm that the service has bound to the correct port
#+END_SRC

- set up the web portal by visting x.x.x.x:8080
  
[[file://home/crito/Pictures/org/jenkins_web_1.png]]

you will require the password found at /var/lib/jenkins/secrets/initialAdminPassword


- the next section we can either install suggested plugins or select for ourselves

[[file://home/crito/Pictures/org/jenkins_web_2.png]]


- next we will see the installation taking place

[[file://home/crito/Pictures/org/jenkins_web_3.png]]


- we now have to create our Admin User
  
[[file://home/crito/Pictures/org/jenkins_web_4.png]]


- that is our Jenkins install completed

[[file://home/crito/Pictures/org/jenkins_web_5.png]]

*** User Management and Security

- setting up authorisation the admin user

[[file://home/crito/Pictures/org/jenkins_user_1.png]]


- this will lead us to a page where authoriazation privileges can be set
  
[[file://home/crito/Pictures/org/jenkins_user_2.png]]

by defualt any logged in user can do anything, though this may be fine if there is only one Admin, we are going to use the matrix
  - this allows granular privilege section for users and groups


- we first need to add our user, and then select the permissions that they should have

[[file://home/crito/Pictures/org/jenkins_user_3.png]]

click apply to add the changes and stay on the page
click save to add the changes and leave the page


- for none administrators, users such as devs they should not have all privileges

[[file://home/crito/Pictures/org/jenkins_user_4.png]]

these would be considered resonable permissions for a dev



Adding a user

- click the manage users link
  
[[file://home/crito/Pictures/org/jenkins_add_user_1.png]]


- from within the manage users page click the create users link

[[file://home/crito/Pictures/org/jenkins_add_user_2.png]]


- enter the credentials of the new user

[[file://home/crito/Pictures/org/jenkins_add_user_3.png]]


- our new user will now be visable in the useer list

[[file://home/crito/Pictures/org/jenkins_add_user_4.png]]

*** Adding a Jenkins Slave

- on the master node we need to switch to the jenkins user and create ssh key
#+BEGIN_SRC sh
su jenkins -s /bin/bash
ssh-keygen
#+END_SRC

- on the slave add jenkins user
#+BEGIN_SRC sh
useradd -d /var/lib/jenkins jenkins
#+END_SRC

- copy the ssh key from the master to the slave
#+BEGIN_SRC sh
ssh-copy-id jenkins@jenkins-slave
#+END_SRC

- download and install java from the oracle website jdk8u121 (copy the download to the server with scp)
#+BEGIN_SRC sh
rpm -Uvh jdk-8u121-linux-x64.rpm
#+END_SRC

- confirm the install
#+BEGIN_SRC sh
which java
#+END_SRC

- setup alternatives for java
#+BEGIN_SRC sh
alternatives --install /usr/bin/java java /usr/java/latest/bin/java 200000
alternatives --install /usr/bin/javac javac /usr/java/latest/bin/javac 200000
alternatives --install /usr/bin/jar jar /usr/java/latest/bin/jar 200000
#+END_SRC

- specifiy the java home variable
/etc/rc.local
#+BEGIN_EXAMPLE
export JAVA_HOME="/usr/java/latest"
#+END_EXAMPLE

- use the web portal on the master enter the manage nodes section

[[file://home/crito/Pictures/org/jenkins_slave_1.png]]


- then select new node
  
[[file://home/crito/Pictures/org/jenkins_slave_2.png]]


- now name the new node
    
[[file://home/crito/Pictures/org/jenkins_slave_3.png]]

makesure to select the permanent radio button


- now add the details of the slave

[[file://home/crito/Pictures/org/jenkins_slave_4.png]]


- within the same screen click on the "add" button next to credentials, to add the ssh key details
  
[[file://home/crito/Pictures/org/jenkins_slave_5.png]]
  

- once all necassary fields have been completed click the save button

[[file://home/crito/Pictures/org/jenkins_slave_6.png]]


- back on the node screen will now see that our new slave has been added
  
[[file://home/crito/Pictures/org/jenkins_slave_7.png]]


- if there is an "x" next to the new node, click on it and view the log for details

[[file://home/crito/Pictures/org/jenkins_slave_8.png]]

*** Setting up GitHub

- we will add the master ssh public key to github
#+BEGIN_SRC sh
cat /var/lib/jenkins/.ssh/id_rsa.pub
#+END_SRC
copy the output, this will be added to github settings


- click on ssh and gpg keys in settings on GitHub

[[file://home/crito/Pictures/org/jenkins_git_1.png]]


- click on the "new ssh key" button

[[file://home/crito/Pictures/org/jenkins_git_2.png]]


- add the copied ssh public key in the box provided

[[file://home/crito/Pictures/org/jenkins_git_3.png]]

- jenkins will now be able to communicate with you github repos

*** Plugin Manager

- 3 options for plugin management
  - web ui - Plugin Manager
  - hpi file (this is a file that contains the code for the plugin, this is done in the web ui)
  - jenkins cli
    
**** Installing a plugin with the Plugin Manager 
     
- with in the plugin manager click the available tab
  
[[file://home/crito/Pictures/org/jenkins_plugin_1.png]]

This will show you all the currently avaible plugins


- select the plugin to install by checking the tick box, and then press the download and install button

[[file://home/crito/Pictures/org/jenkins_plugin_2.png]]


- for the plugin to become active, jenkins has to restart. Do this by ticking the check box
  
[[file://home/crito/Pictures/org/jenkins_plugin_3.png]]

jenkins will restart once it has stopped any running jobs


  

**** Uninstalling a plugin with the Plugin Manager
     
- click on the installed tab in the Plugin Manager section
  
[[file://home/crito/Pictures/org/jenkins_plugin_4.png]]

- mark the checkbox to the left of the plugin title, and this will un-grey the uninstall button on the far right
  
[[file://home/crito/Pictures/org/jenkins_plugin_5.png]]


- clicking the uninstall, takes us to a confrimation screen

[[file://home/crito/Pictures/org/jenkins_plugin_6.png]]


- After being confirmed, you will notice back in the installed plugins tab, the plugin is pending uninstallation

[[file://home/crito/Pictures/org/jenkins_plugin_7.png]]

for the uninstallation to occur jenkins needs to be restarted

- On the front page of Manage Jenkins we want to select "Prepare for Shutdown"

[[file://home/crito/Pictures/org/jenkins_plugin_8.png]]


- we will then be informed that jenkins is about to shutdown

[[file://home/crito/Pictures/org/jenkins_plugin_9.png]]


- from the cmd line restart the service
#+BEGIN_SRC sh
systemctl restart jenkins
#+END_SRC

**** Installing an earlier plugin version

- click on the name of the plugin in the available tab

[[file://home/crito/Pictures/org/jenkins_plugin_10.png]]


- we need to click on the archives link

[[file://home/crito/Pictures/org/jenkins_plugin_11.png]]


- copy the link of the version you need

[[file://home/crito/Pictures/org/jenkins_plugin_12.png]]


- using wget we can pull the version that we need in hpi format
#+BEGIN_SRC sh
wget http://updates.jenkins-ci.org/download/plugins/thinBackup/1.8/thinkBackup.hpi
#+END_SRC

- in the plugins manger select the Advanced tab

[[file://home/crito/Pictures/org/jenkins_plugin_13.png]]


- scroll to the upload plugin section and select where you placed the hpi file

[[file://home/crito/Pictures/org/jenkins_plugin_14.png]]


then hit the upload button


- As with the usual method of installation, a restart is required for the plugin to become active
  
[[file://home/crito/Pictures/org/jenkins_plugin_15.png]]

*** Freestyle Intial Project Configuration
- click on the add a new item
  
[[file://home/crito/Pictures/org/jenkins_free_1.png]]


- then enter the item name and click on freestyle project

[[file://home/crito/Pictures/org/jenkins_free_2.png]]

then click the ok at the bottom of the screen


- now we have the option of discarding and retaining builds
  
[[file://home/crito/Pictures/org/jenkins_free_3.png]]


- we have the ability to set a GitHub project url

[[file://home/crito/Pictures/org/jenkins_free_4.png]]


- we also have some other options that are available to us

[[file://home/crito/Pictures/org/jenkins_free_5.png]]

paramiterized - 
throttle builds - allowes us to set the number of builds allowed to run over a given timeframe
disable this project - 
execute concurrent builds if necessary - allow multiple builds to run in parralle, but think about compute power
restrict where this project can be run - set an expresstion for where this build can be run


- we'll now decide our source code management

- for git it needs to be installed on all the nodes that will be building
#+BEGIN_SRC sh
yum install git
#+END_SRC

- select Git as the source code management tool
  
[[file://home/crito/Pictures/org/jenkins_free_6.png]]


- the repo url need to be added along with the ssh creds (makesure that the ssh url is used not the https)
  
[[file://home/crito/Pictures/org/jenkins_free_7.png]]


- we also have to set which branch is to be built

[[file://home/crito/Pictures/org/jenkins_free_8.png]]


- there's also the option setting other build triggers
  
[[file://home/crito/Pictures/org/jenkins_free_9.png]]


- poll scm will have the master poll the repo and if any changees have been made then a new build will be created

[[file://home/crito/Pictures/org/jenkins_free_10.png]]

- * * * * * would have the master poll the repo every minute (cron job syntax)
- H/15 * * * * every 15 minutes
- H(0-29)/10 * * * * every 10 minutes of the first half hour of the hour
- H/15 * * * 1-5 every 15 minutes mon - fri
- 45 9-16 * * 1-5 run every 45 minutes from 9am through 4pm, only mon - fri
  
- now save, and the job is ready to run
  
[[file://home/crito/Pictures/org/jenkins_free_11.png]]


- back at the main menu we should now see a job being processed in the build history section
  
[[file://home/crito/Pictures/org/jenkins_free_12.png]]

*** Git Hooks and Other Build Triggers (Freestyle Project)

- we can also set our builds to occur at set times even if no changes have been made

[[file://home/crito/Pictures/org/jenkins_trig_1.png]]

Similar to poll scm this trigger also uses the cron syntax for sprcifying timings


**** Setting Git Hook

- first select poll scm, but don't set any timings
  
[[file://home/crito/Pictures/org/jenkins_trig_2.png]]

save this as the trigger with nothing else

- on your github repo we want to add the Jenkins (Git Plugin) service
  
[[file://home/crito/Pictures/org/jenkins_trig_4.png]]

- this will then take you to a page to provide your Jenkins master URL
  
[[file://home/crito/Pictures/org/jenkins_trig_5.png]]

click add service

- now with any changes to the repo will trigger a build
  
**** Setting GitHub Hook
     
- first select the Github trigger
  
[[file://home/crito/Pictures/org/jenkins_trig_6.png]]

then save the project

- now in our GitHub repo we need to select the GitHub service
  
[[file://home/crito/Pictures/org/jenkins_trig_7.png]]

- add the URL for the master Jenkins node
  
[[file://home/crito/Pictures/org/jenkins_trig_8.png]]

makesure to add the /github-webhook/

- with this set up we will see a GitHub Hook log on our main page
  
[[file://home/crito/Pictures/org/jenkins_trig_9.png]]

*** Workspace Environment Variables

$BUILD_NUMBER    - this a sequential number that is associated with the build
$NODE_NAME       - this is the node that the build was run on
$JOB_NAME        - name of the job
$EXECUTOR_NUMBER - number of the node that it was run on
$WORKSPACE       - this is an absolute path of where the build is being executed

$GIT_COMMIT          - this is the sha of the commit you are building from
$GIT_BRANCH          - the branch that is being built
$GIT_PREVIOUS_COMMIT - print the previous commit to that is being built
$GIT_URL             - ssh url of the repo

- when added as extra build step in a shell script this is what the variables look like
  
[[file://home/crito/Pictures/org/jenkins_var_1.png]]

*** Parameterized Projects
    
- on the general tab we need to select "This project is parameterized"
  
file://home/crito/Pictures/org/jenkins_para_1.png

- we click on the add parameter and this provides a drop down menu to select the parameter
  
[[file://home/crito/Pictures/org/jenkins_para_2.png]]

two of the most common are "string" and "file"

*** Upstream/Downstream Projects

- Downstream is a job that is triggered when another job has been built
- Upstream project is the one that initiates the Downstream project on completion
  
- we create a new project, that is to be the downstream project
  
- we then select that it be built after another project

file://home/crito/Pictures/org/jenkins_down_1.png

- in the console out put of the upstream build you will notice once it's run it will now start the downstream build
  
file://home/crito/Pictures/org/jenkins_down_2.png


*** Installing Docker on the Slave node

- remove any existing docker pkg and selinux
#+BEGIN_SRC sh
yum remove docker docker-common container-selinux
#+END_SRC

- install yum utils
#+BEGIN_SRC sh
yum install yum-utils
#+END_SRC

- add the docker repo
#+BEGIN_SRC sh
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
#+END_SRC

- install docker-ce
#+BEGIN_SRC sh
yum install docker-ce
#+END_SRC

- add the jenkins user to the docker group
#+BEGIN_SRC sh
usermod -a -G docker jenkins
# or
gpasswd -a jenkins docker
#+END_SRC

- start and enable the docker service
#+BEGIN_SRC sh
systemctl start docker.service
systemctl enable docker.service
#+END_SRC

- on the master restart jenkins
#+BEGIN_SRC sh
systemctl restart jenkins
systemctl status jenkins
#+END_SRC

- To test that docker is working we can run the hello world on our test freestyle project by adding another build step

[[file://home/crito/Pictures/org/jenkins_docker_1.png]]

just click build and check the console output for the hello world that docker prints


- Repeat this for the master and any other slave nodes
  
*** Installing and Configuring Ant
    
- This is to be done on all nodes

- pull the ant tar file from apache
#+BEGIN_SRC ssh
wget http://apache.mirror.anlx.net/ant/binaries/apache-ant-1.10.3-bin.tar.gz
#+END_SRC

- unpack the tar file
#+BEGIN_SRC sh
tar xzf apache-ant-1.10.3-bin.tar.gz -C /opt
#+END_SRC

- create a sym link in opt
#+BEGIN_SRC sh
ln -s /opt/apache-ant-1.10.3/ /opt/ant
#+END_SRC

- set the ant environment variables
#+BEGIN_SRC sh
sh -c 'echo ANT_HOME=/opt/ant >> /etc/environment'
#+END_SRC

- create a sym link between ant in /opt and in /usr/bin
#+BEGIN_SRC sh
ln -s /opt/ant/bin/ant /usr/bin/ant
#+END_SRC

- test that ant is working
#+BEGIN_SRC sh
ant -version
#+END_SRC

*** The Jenkinsfile

- Defines your sontinuous delivery pipeline
- Lives with your source code
- 2 Styles
  - Declarative
  - Scripted (groovy programming language)
    
- Basic Declarative Example
#+BEGIN_EXAMPLE
pipepline {
    agent any

    stages {
        stage('Build') {
            steps {
                echo 'Building..'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
            }
        }
	stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }
}
#+END_EXAMPLE

- Agent Directive
  - any - any node
  - none - no node - you would find the label directive later in the script inside a stage (this is to allow for specific OS/distro
  - { label 'CentOS' } - this uses the label feature of jenkins
  - { docker 'openjdk:8u121-jre' } - allows docker containers to be used
    
- step directive
  - lots of different "steps" associated with plugins
  - "sh" for a shell script is the most commonly used
  - "echo" prints a string
    
- Environment Directive
  - set at the top, same scope as the overall agent
#+BEGIN_EXAMPLE
environment {
  ENV_VAR = "my value"
}
#+END_EXAMPLE

*** Cingfiguring and Running a Pipeline
    
-Jenkinsfile
#+BEGIN_EXAMPLE
pipeline {
  agent any

  stages {
    stage('build') {
      steps {
        sh 'ant -f build.xml -v'
      }
    }
  }
}
#+END_EXAMPLE

- now commit our Jenkins file to the java-project
#+BEGIN_SRC sh
git commit -am "setting up the Jenkinsfile"
git push origin development
#+END_SRC

- Create a new pipeline project
  
[[file://home/crito/Pictures/org/jenkins_file_1.png]]


- set the build trigger to GitHub Hook

[[file://home/crito/Pictures/org/jenkins_file_2.png]]


- set the pipeline to use SCM and enter the details

[[file://home/crito/Pictures/org/jenkins_file_3.png]]


- it will be ready to build

*** Artifacts and Fingerprints
    
Artifact - something that you want to keep after the build

- Example pipeline
#+BEGIN_EXAMPLE
pipeline {
  agent any

  stages {
    stage('build') {
      steps {
        sh 'ant -f build.xml -v'
      }
    }
  }
  
  post {
    always {
      archive 'dist/*.jar'
    }
  }
}
#+END_EXAMPLE
post - this would be a post build step in the webui

- all archived files are stored on the master
  
- to make the archive and artifact and fingerprint
#+BEGIN_EXAMPLE
post {
  always {
    archiveArtifacts artifacts: 'dist/*.jar', fingerprint: true
  }
}
  
#+END_EXAMPLE

*** Testing with Jenkins
    
- Common Types of Testing
  - Unit Testing
  - Smoke Test
  - Integration Testing
  - Acceptance Testing
  - Code Coverage
    
- Unit
  - Test a small part of the code set. 
  - Usually with an individual class if applicable
    
#+BEGIN_EXAMPLE
@Test
public void testGetArea() {
  assertEquals(myRectangle.getArea(), 6):
}
#+END_EXAMPLE

- Smoke Testing
  - also known as Sanity, Verification or Functional testing
  - It's a smaller subset of tests that ensure the software's primary functionality still works
  - After Unit Testing
    
- Integreaton Testing
  - Integreation testng ensures major units or modules all still work together
  - Happens after function testing usually

- Acceptance Testing
  - determins the overall acceptability of the software based on the business requirements

- Code Coverage
  - Testing on the testing
  - Code coverage is a measure of the degree of testing on your codeset
  - cobertura plugin for Java that tests for code coverage

*** Deploying to Apache

- install apache on the master node
#+BEGIN_SRC sh
yum install httpd
#+END_SRC

- add a directory to /var/www/html and give jenkins premissions
#+BEGIN_SRC sh
mkdir -p /var/www/html/rectangles/{all,green}
chown -R jenkins:jenkins /var/www/html/rectangles/{all,green}
#+END_SRC

- start and enable apache
#+BEGIN_SRC sh
systemctl start httpd
systemctl enablehttpd
#+END_SRC

- add a deploy stage to the jenkins file
#+BEGIN_EXAMPLE
stage('deploy') {
  steps {
    sh "cp dist/rectangle_${env.BUILD_NUMBER}.jar /var/www/html/rectangles/all/"
  }
}
#+END_EXAMPLE

- build file needs the deest to be set to dist/rectangle_${env.BUILD_NUMBER}.jar
  
- git add, commit and push
  


*** Multi-branch pipeline
A normal pipeline won't allow for the merging of branches as it hasn't the logic to deal with this type of operation.

- in the multi-branch pipeline we want to select git as our source

[[file://home/crito/Pictures/org/jenkins_multi_1.png]]

GitHub is not selected as the source as it uses https not ssh

- for a basic setup all other options are fine and we can save

*** Tagging
Tagging helps with creating a versioning standard

- within Jenkinsfile add the environment variable
#+BEGIN_EXAMPLE
environment {
  MAJOR_VERSION = 1
}
#+END_EXAMPLE

- this variable will also be available in the build.xml
#+BEGIN_EXAMPLE
<jar destfile="${dist.dir}\rectangle_${env.MAJOR_VERSION}${env.BUILD_NUMBER}.jar" basedir="${build.dir}">
#+END_EXAMPLE

- in the Jenkins file the $MAJOR_VERSION will also need to be added to any file creation steps
#+BEGIN_EXAMPLE
sh "cp dist/rectangle_${env.major_version}.${env.build_number}.jar /var/www/html/rectangles/all/${env.BRANCH_NAME}/"
#+END_EXAMPLE

- add the tagging cmd
#+BEGIN_EXAMPLE
steps {
  echo 'Tagging the Release'
  sh "git tag rectangle-${env.MAJOR_VERSION}.${env.BUILD_NUMBER}"
  sh "git push origin rectangle-${env.MAJOR_VERSION}.${env.BUILD_NUMBER}"
}
#+END_EXAMPLE

*** Notifications
    
- for notifications to be emailed you have to setup SMTPd, we first go to "congifure system"

file://home/crito/Pictures/org/jenkins_notifications_1.png


- in the extended email section add the smtpd(in this case using google), and add default recipient
  
file://home/crito/Pictures/org/jenkins_notifications_2.png

- we need to set and admin email in the "Jenkins Location" section  

file://home/crito/Pictures/org/jenkins_notifications_3.png


- to be informed of any failures during a build we can ddo that in the Jenkinsfile
#+BEGIN_EXAMPLE
post {
  failure {
    emailext(
      subject: "${env.JOB_NAME} [${env.BUILD_NUMBER}] Failed!",
      body: "Check Console",
      to: "frank@example.com"
    )
  }
}
#+END_EXAMPLE

*** Jenkins CLI
Doc: https://jenkins.io/doc/book/managing/cli/
    
- we need to first add our public key to our account on the master node
  

- now we download the jenkins cli from the master node into the /var/lib/jenkins directory
#+BEGIN_SRC sh
wget -P /var/lib/jenkins http://localhost:8080/jnlpJars/jenkins-cli.jar
#+END_SRC

- add an environment variable for the Jenkins URL
#+BEGIN_SRC sh
echo "JENKINS_URL='http://localhost:8080'" >> /etc/environment
#+END_SRC

- create an alias to the jenkins-cli
#+BEGIN_SRC sh
echo "alias jenkins-cli='java -jar /var/lib/jenkins/jenkins-cli.jar'" >> ~/.bashrc
alias jenkins-cli='java -jar /var/lib/jenkins/jenkins-cli.jar'
#+END_SRC
the reason for the second cmd is that the alias in the .bashrc would need to be reread

- test that the jenkins-cli works
#+BEGIN_SRC sh
jenkins-cli help
jenkins-cli -s http://localhost:8080 -auth admin:44d0260a6f91fee4208ae1064498e51f help
#+END_SRC
this will provide you with a large list of all the available cmds

- start a build
#+BEGIN_SRC ssh
jenkins-cli build "Freestyles/My_Freestyle_Project"
jenkins-cli -s http://localhost:8080 -auth admin:44d0260a6f91fee4208ae1064498e51f build "Freestyles/My_Freestyle_Project"
#+END_SRC

- install a plugin
#+BEGIN_SRC sh
jenkins-cli install-plugin thinBackup -restart
jenkins-cli -s http://localhost:8080 -auth admin:44d0260a6f91fee4208ae1064498e51f install-plugin thinBackup -restart
#+END_SRC
this will install the plugin and restart the instance of Jenkins

- print the console output from a build
#+BEGIN_SRC sh
jenkins-cli console "Freestyles/My_Freestyle_Project" 51
jenkins-cli -s http://localhost:8080 -auth admin:44d0260a6f91fee4208ae1064498e51f console "Freestyles/My_Freestyle_Project" 51
#+END_SRC
51 is the build number

* Books
[[file:~/Documents/DevOps/Linux_Academy-Jenkins_Cert_Engineer.pdf][Linux Academy - Jenkins Cert Engineer]]
[[file://home/crito/Documents/Code/Devops/Jenkins-The_Definitive_Guide.pdf][Jenkins - The Definitive Guide]]
[[file://home/crito/Documents/Code/Devops/Jenkins_on_AWS.pdf][Jenkins on AWS]]

* Links
Wiki: [[https://wiki.jenkins-ci.org/display/JENKINS/Installing%2BJenkins%2Bon%2BUbuntu][Ubuntu Installation]]
Wiki: [[https://wiki.jenkins-ci.org/display/JENKINS/Installing%2BJenkins%2Bon%2BRed%2BHat%2Bdistributions][Red Hat Distro Installation]]
Jenkins: [[https://jenkins.io/doc/book/getting-started/][Getting Started with Jenkins]] - Jenkins website

