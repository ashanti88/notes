#+TAGS: python py script


* python
* libs
** Builtin
*** Functions
- len
#+BEGIN_SRC python
len("Ola")
#+END_SRC

- upper
#+BEGIN_SRC python
"Ola".upper()
#+END_SRC

** PyPi
** re
** requests
** BeautifulSoup
** urllib/urllib2
** selenium
** ZeroMQ
* tools
** ipython/jupyter 
*** automagic
+ Turning on/off automagic
#+BEGIN_SRC sh
%automagic
#+END_SRC

*** cells
shift + enter - execute cell and create a new cell
ctrl + enter - execute cell but no new cell

** pyenv

* Web_Frameworks
[[file://home/crito/org/tech/web/web_frameworks/django.org][Django]]
[[file://home/crito/org/tech/web/web_frameworks/django_cms.org][Django CMS]]
[[file://home/crito/org/tech/web/web_frameworks/flask.org][Flask]]
Pyramid
* Web Servers
DigitalOcean: [[https://www.digitalocean.com/community/tutorials/a-comparison-of-web-servers-for-python-based-web-applications][Comparison of Web Servers for Python Based Web Applications]]
[[file://home/crito/org/tech/web/web_service/gunicorn.org][Gunicorn]]
[[file://home/crito/org/tech/web/web_frameworks/cherrypy.org][CherryPy]]
Tornado
Twisted Web
uWSGI
Waitress WSGI Server
Apache - mod_wsgi
* Concepts
** How to Install Python 3 and Set Up a Local Programming Environment on Centos7 :py:centos:
DigitalOcean: [[https://www.digitalocean.com/community/tutorials/how-to-install-python-3-and-set-up-a-local-programming-environment-on-centos-7][Install Python3 and Set Up a Local Programming Environment on CentOS7]]
1. update yum
#+BEGIN_SRC sh
yum update
#+END_SRC

2. Install yum-utils
#+BEGIN_SRC sh
yum install yum-utils
#+END_SRC

3. Install group development
#+BEGIN_SRC sh
yum install groupinstall development
#+END_SRC

4. Installing and Setting up Python3
install the ius community repo
#+BEGIN_SRC sh
wget https://centos7.iuscommunity.org/ius-release.rpm
rpm -Uvh ius-release.rpm
#+END_SRC

install the version of python3 required
#+BEGIN_SRC sh
yum search python3
yum install python35u.x86_64
#+END_SRC

5. Install pip3
#+BEGIN_SRC sh
yum install python35u-pip
#+END_SRC

6. Install python3Xu-devel (this package contains pyvenv)
#+BEGIN_SRC sh
yum install python35u-devel
#+END_SRC
** Setting up a Virtual Environment				    :py:virt:
1. move to environments directory
#+BEGIN_SRC sh
cd environments
#+END_SRC
2. create new environment
#+BEGIN_SRC sh
pyvenv-3.5 my_env
#+END_SRC

This will then create a directory that contains:
bin
include
lib
lib64
pyvenv.cfg

These files and directories work to isolate you project from the wider machine settings

3. Activet the environment
#+BEGIN_SRC sh
source my_env/bin/activate
#+END_SRC

- the prompt will now look something like this:
(my_env) [root@localhost my_env]#

Commands:
python - will now use the environment python
pip - will now use the environment pip

4. To exit the environment
#+BEGIN_SRC sh
deactivate
#+END_SRC

** Vagrant issue with python server host connection		 :py:vagrant:
When using python development servers you may need to specify the 0.0.0.0:port
I found when using django python server I had to sepcifiy the 0.0.0.0 ip addr to access it from the host
#+BEGIN_SRC sh
python manage.py runserver 0.0.0.0:8000
#+END_SRC
** Difference between pyenv, pyvenv and virtualenv		     :py:env:
url: [[http://masnun.com/2016/04/10/python-pyenv-pyvenv-virtualenv-whats-the-difference.html][pyenv, pyvenv and virtualenv]] 
pyenv – A Python version manager. Installs different versions and flavors of Python interpreters.

pyvenv – A tool to create isolated virtual environments from a Python interpreter. Ships with Python from 3.4.

virtualenv – Creates virtual environments, and is available in PyPi.
* PyPi
* Lecture
** [[https://www.youtube.com/watch?v%3DDKmNiwmyl6k][Beyond Scraping]] - Anthon van der Neut
+ What are web pages?
  - tree structure of tags
  - tags can have attributes
  - tags can have data
    
+ Simple Websites
  - use urllib2/requests
  - form data ok
  - redirection
    
+ Cookies
  - keeping state
  - often used to preserve authentication 
    
+ Authentication
  - browser build in
  - some form + cookies
  - OpenID

+ JavaScript
  - urllib2/requests of little use
  - Parts of the tree structure that is HTML is updated/changed by JS
  - Why?
    - nicer user experience, quicker updates
     
  - Downsides
    - don't kown when the page is finished

+ Selenium
  - just use a browser with it
  - used for testing but that is easy
  - Never any discrepancy with what you see as a "normal" user
  - Helps with debugging(built-in, firebug etc)    
    - only runs as long as the program runs
  - Not able to be run without a browser being opened, requires a Desktop Environment (Can't just be run from cron).
    
+ The problems with JavaScript based pages
  - Never sure when the data is there
    - wait reasonable amount of time
    - check if some particular piece of data is available
      
+ Seclecting a part of a webpage
  - by "id"
  - by class
  - programmatically walking the tree
  - XPATH
  - there is a re-usable option

+ CSS select
  - skill useful to have whrn building websites
  - beware of restrictions
    
+ A typical selenium session
1. Open a browser to some url
2. Click login button
  - Wait until redirected to OpenID provider
3. Provide credentials
4. Wait until back at the requested page
5. Fill out search criteria
6. Click a matching reference
7. Retrieve the data
Debugging the above can involve a lot of waiting time

+ Client-Server
Server keeps browser open even if client doesn't    
Protocols
  - data to and from server
    
+ ZeroMQ
Many to one
 - Server can run on a different machine
   
Unicode based exchanges easy to get data

+ A typical clien-server based session
1. Open browser to some url if not already there
2. Click login button, if not already logged in
  - Wait until redirected to OpenID
3. Provide credentials
4. Wait until back at the requested page
5. Fill out search criteria
6. Click a matching reference
7. Retrieve the data
Debugging the above becomes a lot faster

+ What protocol functions are needed?
- Open a window, by unique id(wid)
- Goto url with that wid
- select some item(iid) on the page(wid)
- click some item(iid)
- clear input/textarea(iid)
- type some text in item(iid)
- return html under item(iid)
- return current URL(wid)

+ BeautifulSoup4
- faster than selenium
- especially good for large table based reference data
- many ways to select data from the HTML site
- CSS select support
  
+ pyvirtualdisplay(vnc)
- virtual window replacing the need for a desktop
- still easy to check by using vnc to vurtual window
  
* Tutorial
* Books
* Links
