#+TAGS: linux kernel


* Kernel
Gentoo: [[https://wiki.gentoo.org/wiki/Kernel/Gentoo_Kernel_Configuration_Guide#Configuration_concepts][Gentoo Kernel Configuration Guide]]
* Cmds
- ksplice
- kexec
- [[file://home/crito/org/tech/cmds/sysctl.org][sysctl]]
- [[file://home/crito/org/tech/cmds/lsmod.org][lsmod]]
- [[file://home/crito/org/tech/cmds/modprobe.org][modprobe]]

* Overview
** Major Subsystems
*** System Call Interface
The SCI is a thin layer that provides the means to perform function calls from user space into the kernel. As discussed previously, this interface can be architecture dependent, even within the same processor family. The SCI is actually an interesting function-call multiplexing and demultiplexing service. You can find the SCI implementation in ./linux/kernel, as well as architecture-dependent portions in ./linux/arch.

*** Process Management (PM)
Process management is focused on the execution of processes. In the kernel, these are called threads and represent an individual virtualization of the processor (thread code, data, stack, and CPU registers). In user space, the term process is typically used, though the Linux implementation does not separate the two concepts (processes and threads). The kernel provides an application program interface (API) through the SCI to create a new process (fork, exec, or Portable Operating System Interface [POSIX] functions), stop a process (kill, exit), and communicate and synchronize between them (signal, or POSIX mechanisms).

Also in process management is the need to share the CPU between the active threads. The kernel implements a novel scheduling algorithm that operates in constant time, regardless of the number of threads vying for the CPU. This is called the O(1) scheduler, denoting that the same amount of time is taken to schedule one thread as it is to schedule many. The O(1) scheduler also supports multiple processors (called Symmetric MultiProcessing, or SMP). You can find the process management sources in ./linux/kernel and architecture-dependent sources in ./linux/arch).

*** Virtual File System (VFS)
The virtual file system (VFS) is an interesting aspect of the Linux kernel because it provides a common interface abstraction for file systems. The VFS provides a switching layer between the SCI and the file systems supported by the kernel.

 At the top of the VFS is a common API abstraction of functions such as open, close, read, and write. At the bottom of the VFS are the file system abstractions that define how the upper-layer functions are implemented. These are plug-ins for the given file system (of which over 50 exist). You can find the file system sources in ./linux/fs.

Below the file system layer is the buffer cache, which provides a common set of functions to the file system layer (independent of any particular file system). This caching layer optimizes access to the physical devices by keeping data around for a short time (or speculatively read ahead so that the data is available when needed). Below the buffer cache are the device drivers, which implement the interface for the particular physical device.

*** Memory Management (MM)
Another important resource that's managed by the kernel is memory. For efficiency, given the way that the hardware manages virtual memory, memory is managed in what are called pages (4KB in size for most architectures). Linux includes the means to manage the available memory, as well as the hardware mechanisms for physical and virtual mappings.

But memory management is much more than managing 4KB buffers. Linux provides abstractions over 4KB buffers, such as the slab allocator. This memory management scheme uses 4KB buffers as its base, but then allocates structures from within, keeping track of which pages are full, partially used, and empty. This allows the scheme to dynamically grow and shrink based on the needs of the greater system.

Supporting multiple users of memory, there are times when the available memory can be exhausted. For this reason, pages can be moved out of memory and onto the disk. This process is called swapping because the pages are swapped from memory onto the hard disk. You can find the memory management sources in ./linux/mm.

*** Network Stack
The network stack, by design, follows a layered architecture modeled after the protocols themselves. Recall that the Internet Protocol (IP) is the core network layer protocol that sits below the transport protocol (most commonly the Transmission Control Protocol, or TCP). Above TCP is the sockets layer, which is invoked through the SCI.

The sockets layer is the standard API to the networking subsystem and provides a user interface to a variety of networking protocols. From raw frame access to IP protocol data units (PDUs) and up to TCP and the User Datagram Protocol (UDP), the sockets layer provides a standardized way to manage connections and move data between endpoints. You can find the networking sources in the kernel at ./linux/net.

*** Arch
While much of Linux is independent of the architecture on which it runs, there are elements that must consider the architecture for normal operation and for efficiency. The ./linux/arch subdirectory defines the architecture-dependent portion of the kernel source contained in a number of subdirectories that are specific to the architecture (collectively forming the BSP). For a typical desktop, the i386 directory is used. Each architecture subdirectory contains a number of other subdirectories that focus on a particular aspect of the kernel, such as boot, kernel, memory management, and others. You can find the architecture-dependent code in ./linux/arch.

*** Device Drivers (DD)  
The vast majority of the source code in the Linux kernel exists in device drivers that make a particular hardware device usable. The Linux source tree provides a drivers subdirectory that is further divided by the various devices that are supported, such as Bluetooth, I2C, serial, and so on. You can find the device driver sources in ./linux/drivers.

* Compilation
** Arch
https://wiki.archlinux.org/index.php/Kernels/Traditional_compilation
- recompile grub with
#+BEGIN_SRC sh
sudo grub-mkconfig -o /boot/grub/grub.cfg
#+END_SRC

* Lectures
** [[https://www.youtube.com/watch?v=L8OOzaqS37s][Patches carved into stone - GKH]]
*** Tool Set
**** Hubs
+ Github
+ Bitbucket
+ Gitlab
  -pros
    - easy
    - free hosting
    - small projects
  -cons
    - doesn't scale for large projects
    - issue tracking difficult
    - some comapanies don't allow its use
  
**** Code Collaboration Tool
+ Gerrit
+ reviewboard
  -pros
    - project mgmt overview
  -cons
    - difficult to submit patches
    - convoluted system
    - requires a full-time admin (a lot of work)

**** Plain text email
-pros
  - everyone has access
  - none native speakers, easier for translation
  - solid technology
  - easily scripted
  - good for screen readers (ppl with sight problems)
  - fast
  - scalable
  - grows the community
-cons
  - poor clients (exchange and evolution know to corrupt patches)
    
+ Documentation/email-clients.txt - this shows how to set up the email client
+ zero day bot - intel massive network of servers - used to test the kernel

+ Patchwork - produced by intel - used for email patch management - patchwork.kernel.org
  
** [[https://www.youtube.com/watch?v=UHbq1SzmfUE][Kernel Documentation - Jonathan Corbet]]

+ Docs is organized into two sections
  i. Bulk in 2000 .txt files
  ii. doc book 34 template files - aimed at kernel devs
    - can rened to different formats

+ Large portions of documentation is to be found within the code
  - 55000 of these comments within the kernel
+ No overall vision for the documentation
+ No cross-document linkage

+ Sphinx - system for python documentation
  - designed for documenting code
  - designed for large projects that is split over many files
  - well supported

** [[https://www.youtube.com/watch?v=w3yT8zJe0Uw][Understanding the Real-Time System - Steven Rostedt]]

*** What is Real-Time?
+ Deterministic results
+ Repeatable results
+ Doin what you expoect when you expect it
+ No unbounded latency
+ Can calculate worst case scenarios
+ Hot cache
  - look ahead features
+ Paging
  - Translation Lookaside Butter (TLB)
+ Least interrupts
+ Optimize the most likely case
  - Transctional memory
+ Constant balance between speed vs real time

*** The hardware
+ The foundation
  - If this isn't deterministic, forget the rest
+ Memory Cache
  - Try to run tests with cold cache
  - Try to find the worse case scenario
  - If your system works without cache, it should work with cache (except for race conditions)
  - Non cache is more deterministic
  - Cache may allow the "slower" path to run faster
+ Branch Prediction
  - CPU recognizes branch patterns
  - Optimizes the pipeline
  - But when incorrect it can cause serious time delays
+ NUMA (Non Uniform Memory Access)
  - Memory speed dependent on CPU
  - Need to organise the tasks
  - Make sure RT tasks always have their memory in one place (same node)
+ Hyper-Threading
  - one execution unit
  - one system bus
  - one cache
  - two sets of registers
  - two sets of cpu pipelines
  - execution engine switches between them on stall - it is recommended to disable for RT
+ TLB
  - page table cache 
  - TLB miss - can cause a significant delay
+Transactional Memory
  - Allows for parallel actions in the same critical section
  - Backs out when the same memory is touched
  - Restart the transaction or take anoter path
  - This slightly removes determinism 
+ SMI (System Management Interrupt
  - Puts processor into system management mode (SMM)
  - HW functionality done in software
  - Check CPU temperature change frequency
  - Perform ECC memory scans
  - Causes the system to stop what it was doing
+ CPU Frequency Scaling
  - Battery saving (don't) - run at full blast 
  - CPU Idle - run a polling loop
  - Don't go into a deep sleep - Comes out groggy
+ Threaded Interrupts
  - User tasks can run higher priority than interrupts
  - Set required interrupts higher than your task - ie Don't poll waiting for network if task is higher priority than networking interrupts
  - Know your system!
+ Soft Interrupts
  - With PREEMPT_RT, softirqs run from the context of who raises them
    - Network irq will run network softirq
  - Except for softirqs raised by real Hard interrupts
    - RCU - Run in ksoftirqd
    - Timers - Run in ksoftirqd
+ System Management Threads
  - RCU
  - Watchdog
  - Migrate
  - kworker
  - ksoftirqd
  - posixcputimer
+ Timers
  - setitmer() - requires ksofttimeirqd to run (on PREEMPT_RT)
  - timer_create() / timer_settime() - Timer interrupts wakes up posixcputimer thread
  - Uses high resolution timer kernel infrastructure
  - Sends via signals
+ CPU Isolation
  - Kernel parameter: isolcpus=1-3 - no longer the preferred method
  - cpusets
    - cd /sys/fs/cgroup/cpuset/
    - echo 1 > cpuset.cpu_exclusive
    - mkdir myset
    - echo 1-3 > myset/cpuset.cpus
    - echo 1 > myset/cpuset.cpu_exclusive
    - echo $$ > myset/tasks 
+ NO_HZ
  - CONFIG_NO_HZ - turn this off as impacts RT
  - When CPU is idle, turn off timers
  - Lets Cpus go into deep sleep
  - Great for power savings
  - Sucks for latency (deeper sleep, longer wake up)
+ NO_HZ_FULL
  - CONFIG_NO_HZ_FULL - good for RT
  - Keep kernel processing from bothering tasks
  - Kernel parameter: nohz_full=3 rcu_nocbs=3
  - Works when only one task is scheduled
  - Adds overhead to kernel entry and exit
+ RT Tasks
  - Memory locking 
  - Priority ingeritance locks
  - Task and interrupt thread dependencies
  - Migration is different
  - Make sure RT tasks are not accessing functions that aren't RT safe
+ Memory Locking
  - mlockall() - lock in memory to prevent page faults
  - MCL_CURRENT - Lock in all current pages
  - MCL_FUTURE - Lonk in pages for heap and stack and shared memory
  - Careful about how much you lock in!
+ Task and interrupt thread dependencies
  - Understan how treads interact
  - Know your interrupts threads
  - cpuposixtimer
  - workqueues
  - Beware of pitfalls
+ Real-time vs Multi processors
  - migration clears caches (memory and TLB)
  - The RT kernel gives you a "best effort" - mileage may vary
  - Can cause unexpected results for round robin
  - schedrr - scheduler round robin - no time is set (not good for determinism) - no load balancing, so uneven over cpus

+ SCHED_DEADLINE - another video on this
** [[https://www.youtube.com/watch?v=PBY9l97-lto&index=46&list=WL][Speed up your kernel development cycle with Qemu - Stefan Hajnoczi]]

*** Kernel Development Cycle
 
      ---- Write Code ----
      |                  |
    Test          Build Kernel/Module
      |                  |
      ----- Deploy -------

*** A Few Subsystems

| SubSystem      | Members                                     |
| Device Drivers | USB, PCI                                    |
| Storage        | LIO SCSI, File systems, device-mapper       |
| Networking     | Network protocols, Netfilter, OpenVSwitch   |
| Resource MGMT  | Cgroups, Linux Security Modules, Namespaces |
| Tracing        | ftrace, ebpf                                |

*** Issues with hacking on running kernel
+ In situ debugging mechanisms like kgdb or kdump
  - Not 100% reliable since they share the environment
  - Crashes interrupt your text editor session
  - Crashes may lead to lose of work 

*** Virtual Machine as test box
+ Easy to start/stop
+ Full access to memory & CPU state
+ Cross-Arch support using emulation
+ Programmable Hw

*** Qemu emulator and virtualizer
url: http://qemu-project.org
+ Emulates 17 Arch (x86, arm, ppc...
+ Supports fast hardware virt with KVM

Use - > qemu-system-<arch>

Example - 1024 MB RAM and 2 CPUs
> qemu-system-x86_64 - m 1024 -smp 2 -enable-kvm
+ drop -enable-kvm for emulation
+ boots up to bios but there are no bootable drives

***** How to boot a development kernel
> qemu-system-x86_64 -enable-kvm -m 1024 -kernel /boot/vmlinuz -initrd /boot/initramfs.img -append param1=value1
+ these options are similar to grub  

+ Small tests can be run from initramfs
  - initramfs can be customized to contain test programs
  - No need to full boot root file system
    - kick off test from /init executable
  - Rebuild initramfs when kernel or test code changes

***** Building initramfs with gen_init_cpio
+ gen_init_cpio takes description file as input:

file /init my-init.sh 0755 0 0
dir /bin 0755 0 0
nod /dev/zero 0666 0 0 c 1 5
file /sbin/busybox /sbin/busybox 0755 0 0
slink /bin/sh /sbin/busybox 0755 0 0

+ Produces cpio archive as output:
> usr/gen_init_cpio input | gzip > initramfs.img

+ Included in Linux source tree (usr/gen_init_cpio)
+ This description file just tells qemu what files to pull in from the hoste

***** Build process
1. Compile your kernel modules:
> make M=drivers/virtio CONFIG_VIRTO_PCI=m modules

2. Build initramfs:
> usr/gen_init_cpio input | gzip > initramfs.img

3. Run virtual machine
> qemu-system-x86_64 -m 1024 -enable-kvm -kernel arch/x86_64/boot/bzImage -initrd initramfs.img -append 'console=ttyS0' -nographic

+ nographic
  - disables gui
  - puts serial port onto stdin/stdout
  - perfect for running tests from terminal

***** Persistent File System
1. Share directory with host using virtfs or NFS
2. Use disk image file with partition table and file system

+ Kernel can still be provided with the -kernel option
+ Kernel modules need to be in initramfs and/or root file system

***** Debugging a virtual machine
+ Qemu supports GDB remote debugging to attach to a vm
+ kgdb is not required inside vm

Example:
> qemu-system-x86_64 -s -enable-kvm -m 1024 -drive if=virtio,file=test.img

(gdb) set architecture i386:x86-64
(gdb) file vmlinux
(gdb) target remote 127.0.0.1:1234
(gdb) backtrace 

+ vmlinux has all the symbols for linux

***** Qemu Devices
+ Rocker OpenFlow network switch
+ NVDIMM persistent memory
+ NVMe PCI flash storage controllers

+ Qemu also covers common buses such as PCI, USB, I2C

+ plenty of examples in QEMU hw/ directory 

** [[https://www.youtube.com/watch?v=AdPxeGHIZ74&t=4s][The Linux Driver Model - GKH]]

+ 2.4 all driver sub-systems were unaware of each other. This showed a need for a Unified Linux driver model.

+ struck kref - reference counting
              - no locks
              - release function required

+ struck kobject - base object type
                 - sysfs representation
                 - data structure glue
                 - hotplug event handling
+ only devs working on filesystems should be using kobjects.

+ struck attribute - sysfs files for kobjects
                   - 1 text value per file - moving away from /proc where there were many different values attached to files.
		   - binary files possible
		   - never manage individually - use them as attribute groups.
		     
+ struct kset - groups kobjects together - same type of something...

+ kobj_type - release() - don't have empty release() 
            - sysfs functions for kobject
	    - namespace handling - only for networking as it can get ugly
	 
---------This is where it normally becomes relavent for dev-------------------------
*** Devices

+ sturct device - universal structure
                - belongs to a bus or "class"

+ struct device_type - same bus, different type
                     
+ struct device_driver - controls a device
                       - probe/remove
		       - shutdown/suspend/resume
		       - default attributes

*** Buses

+ struct bus_type - binds device and drivers
                  - matching
		  - uevents
		  - shutdown
+ buses are difficult to write.
  - bus responsibilities - register bus
                         - create devices
			   - set the bus type
			   - set parent pointer
			   - set attribute groups
			   - device_initialize()
			   - device_add()
			 - register driver
			   - set the bus type
			   - set up probe/release
			   - set module ownership
			   - driver_register()
			 - suspend/resume
+ complex due to lots of parts involved ~ 300-400 lines of code.
+ always populate sysfs with all infomation before telling userspace it's available. This can cause race conditions otherwise.

*** Classes

+ struct class - user visable devices
               - suspend/resume
	       - release
	       - default attributes
+ simple solution to provide work with devices

+ code in udev trying to merge classes and buses together still not completed. Not very useful as class continued to be used.

+ class responsiblities - class_create/class_register
                        - reserve major/minor
			- use in device_create
			- device_destroy
			- free major/minor
			- suspend/resume if wanted

- usb serial bus good example to look at. 
  
+ Shutdown - if device->class
               if class->shutdown
                 device->class->shutdown(device)
            
           - if device->bus
	       if bus->shutdown
	         device->bus->shutdown(device)
+ shutdown must call
                 driver->shutdown(device)
  
*** Driver Writer Hints
+ attribute groups only 
+ never call sysfs_*() or touch kobjects
+ never user platform device - should be using virtual bus

*** Class Writer Hints
+ attribute groups only
+ never call sysfs_*()
+ no need for static class - create dynamically
+ ~ 20-30 lines of code

+ Never use "raw" sysfs/kobjects
+ lots of devices should be pushed to the virtual bus.  

** [[https://www.youtube.com/watch?v=tLBUC2tZvtU&index=58&list=WL][Linux Kernel Development for Newbies - Manuel Scholling]]

+ kernelroll module, every time an mp3 is opened rick astely(sp) plasy

+ Required skills
  - git
  - C programming

+ Find Your Task 
  - a part of the kernel has faults?
  - poor documentation replace
  - patches for usb device
  - Code review, helps with developing C, but may also find bugs.
  - Code refactoring
  - in the kernel there is todo files 

+ How to submit a patch
1) clone the kernel source - git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git
  - this is the kernel maintained by GKH

2) change the code
3) create the commit
   - first line include what change you are making 
   - then why you are doing this.
   - path of blame - signed off by name:email
4) repeat
5) check patch script
  - /scripts/checkpatch.pl
6) have a break and then come back to the code and recheck
6) run the /scripts/get_maintainer.pl
  - this will tell you who the patch should be sent to
  - always include module mailing list, and the linux kernel mailing list
   
+ Do's and Don'ts
- use the /Documentation/CodingStyle
  - indentation: TABs 8
  - line wrap: 80 chars
  - clean code
  - split code into individual commits
  - fix compiler warnings
    
- Patches can be one-liners!
  
+ Git is able to send the email, rather than sending with client.

irc - #kernelnewbies @ oftc.net
gitbook - http://0xax.gitbooks.io  

** [[https://www.youtube.com/watch?v=0IQlpFWTFbM&list=WL&index=72][You can be a Kernel Hacker! - Julia Evans]]

+ The kernel is just code

+ Calling the kernel
  - system calls - os api
    - open a file!(open)
    - start a program(execve)
    - change a file's perms(chmod)

*** Using systems knowledge to debug
+ Strace
  - Normal debug proess
    - check source code
    - add print statements
    - know the programming lang

  - withe strace
    - it will tell you the systemcalls being made
    - Strace will show you what file are being opened at run

+ Sendto
  - this shows the sent network traffic of the application
+ Recvfrom
  - this shows the recieved network traffic of the application
+ Strace will point to where log files are being written
+ What lib is an application trying to run

+ Perf 
  - Track L1 cache misses!
  - perf flame graphs
  
+ Ftrace
  - tracing kernel funcs

+ /PROC
  - deleted files can be retrieved if we know the pid
    - > cat </proc/${PID}/exe > retrieved_file    
  - if you don't know the pid, attempt to use grep over all fd in /proc
  
+ Strategies to learning the kernel
  - strace all the things!
  - read some of the kernel code!
    - take a sys call and learn it
    - http://livegrep.com - a tool to look at the linux kernel

  - write a kernel module
  - do the eudalyta challenge
  - write your own os
  - 

Valerie Aurora - works on the kernel

** [[https://www.youtube.com/watch?v=mmu0pkSI5sw][Linux Kernel Development GKH]]
** [[https://www.youtube.com/watch?v=HmZnhe1zvzU][Code Review Training for Kernel Patch Reviewers - Mark Gross]]
Reading list
https://www.kernel.org/doc/html/v4.11/process/submitting-patches.html
https://01.org/linuxgraphics/gfx-docs/drm/process/coding-style.html

Patches must follow Keese's BRILLO commit prefix conventions
** [[https://www.youtube.com/watch?v=7aONIVSXiJ8][Introduction to Memory Management in Linux - Matt Poter]]

** [[https://www.youtube.com/watch?v=MV8Sy6jGUIE][Gorking the Linux SPI Subsystem - Matt Porter Embedded Linux Conf 2017]]
- What is SPI?
  - Serical Peripheral Interface
  - Motorola
  - master-slave bus
  - 4 wire bus
  - no maximum clock speed

- Common uses of SPI
  - Flash Memory
  - ADCs
  - Sensors
  - LCD controllers
  - Chromium Enbedded Controller
    
- SPI Signals
  - MOSI - Master Output Slave Input
    - SIMO, SDI, DI, SDA
  - MISO - Master Input Slave Output
    - SOMI, SDO, DO, SDA
  - SCLK - Serical Clock (Master output)
    - SCK, CLK, SCL
  - SS - Slave Seclect (Master output)
  - CSn, EN, ENB
    
- SPI Modes
  - Modees are composed of two clock characteristics
  - CPOL - clock polarity
    - 0 = clock idle state low
    - 1 = clock idle state high
  - CPHA - clock phase
    - 0 = data latched falling, output rising
    - 1 = data latched rising, output falling
      
- SPI can be more complicated
  - Multiple SPI Slaves
    - one cheip select for each slave
  - Daisy Chaining
    - Inputs to Outputs
    - Chip Selects
  - Dual or Quad SPI (or more lanes)
    - Implemented in high speed SPI Flash devices
    - Instead of one MISO have N MISOs
    - N times badnwidth of traditional SPI
  - 3 Wire (Microwire) SPI
    - Combined MISO/MOSI signal operates in half duplex
      
- Linux SPI Drivers 
  - controller and Protocol drivers only
    - Controller drivers support the SPI master controller
      - Drive hardware to control clock and chip selects, shift data bits on/off wire and configure basic SPI characteristics lick clock frequency and mode
      - eg spi-bcm2835aux.c
    - Protocol drivers support the SPI slave specific functionality
      - based on messages and transfers
      - Relies on controller driver to program SPI master hardware
      - eg MCP3008 ADC	
	
- Linux SPI communication
  - Communication is broken up into transfers and messagees 
  - Transfers
    - Defines a single operation between master and slave.
    - tx/rx buffer pointers
    - optional chip select behaviour after operation
    - optional delay after operation
  - Messages
    - Atomic sequence of transfers

- Adding a SPI device to a system
  - Know the characteristics of your slave device
    - Learn to read datasheets
  - Three methods
    - Device Tree
      - Ubiquitious
    - Board File
      - Deprecated 
    - ACPI
      - Mostly x86
	
- Userspace Driver - spidev
  - Primarily for development and test
  - DT binding requires use of a supported compatible string or add a new one if no kernel driver exists for the device
    
* Tutorial
* Walk Throughs
** wikiversity - Reading the Linux Kernel Sources

**** Where to start reading
+ We could start at where the CPU begins
  - This would first take us to /arch/i386/boot/compressed/head.S
  - in newer kernels this would be head_32.S

+ It is in here that the image is de-compressed 
+ There is a large part of this file written in asm

+ then this would move us to the init/main.c
  - this can be stepped through using JTAGS or
    - step trhough an embedded version booting from flash
  - to continue following the code would be quite complicated

**** Other Places to start
+ We could examine where userland starts, init
+ Serveral things have to happen before init is called
  - the root / filesystem has to be located & mounted
  - the initial console must be opened and connected to file descriptors (0, 1, 2)
  - the initial environment has to be created

+ Each system and sub-system has its own pre-requisites
  - the block device on which the rootfs is hosted must be detected and initialised
  - memory limits must be scanned
  - memory mgmt unit (mmu) and programmable intrupt controllers (PICs, APICs, IOAPICs) must be detected, enumerated and programmed

+ So now we have a tangible point which to trace backwards from

+ Init starts only one user space process, that's init
+ thereafter it assumes its role as the mediator between user space and kernel space.
  
**** 
+ The system clock becomes the heartbeat of the system
h - On a PC this is from a PIT (programmable Interrupt Timer) 

* Articles
** Glibc feature test macros - Michael Kerrisk				:FMT:
[[https://lwn.net/Articles/590381/][Article URL]]

+ FMT - Feature Test Macros - These are used to control the definitions exposed by the C header files.

For example, in the clock_getres(3) manual page, we see the following text in the SYNOPSIS section:

    Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       clock_getres(), clock_gettime(), clock_settime():
              _POSIX_C_SOURCE >= 199309L
	      
This text tells us that the <time.h> header file will expose the declarations of these three system calls (or, more precisely, their C library wrapper functions) if _POSIX_C_SOURCE is defined with the value 199309L or greater.

+ The purpose of these macros is to cause a header file to expose definitions in a manner that conforms to a particular standard.

+ A full list of the FMTs can be found in the feature_test_macros man page.

+ Explicitly setting an FMT will cause the set standard to take presidence when a conflict is encounted.

e.g.
getpgrp() has both a POSIX and BSD version. If no FMT is set POSIX default, but if _BSD_SOURCE is used then the BSD version will be used.

+ The _GNU_SOURCE FMT is used to secure linux and gnu specific definitions. 

+ The logic for FMTs if found in <features.h>

+ Individual macros can be set using either #define in the C source code or by using the -D flag with the complier.

** Custom Initramf

+ Initramfs is a root filesystem that is embedded into the kernel and loaded at an early stage of the boot process.
+ Initramfs starts very early in the boot process, before the distribution init does.

*** Examples of what can be done with initramfs
1. Mount the root partition
2. Provide a minimalistic rescue shell
3. Customise the boot process (e.g. print a welcome message, boot splash)
4. Load modules (e.g. third party drivers)
5. Anything the kernel can't do (as long as you can do it in user space, e.g. by executing commands).

*** Basics
+ An initramfs contains at least one file called /init.
+ This file is executed by the kernel as "the" init process (PID 1).

**** Building an initramfs
1. Create a basic initramfs directory structure that will become the initramfs root.
> mkdir -p /usr/src/initramfs/{bin,dev,etc,lib,lib64,mnt/root,proc,root,sbin,sys}

2. Adding of device nodes to initramfs.(sda1 is used as an example device)
> cp -a /dev/{null,console,tty,sda1} /usr/src/initiramfs/dev/
+ Exactly which devices that will be needed depends upon project requirements.
3.a Any binary that is to be executed at but needs to be copied to the initramfs. Any dependent lib will also need to be copied. To find out required libs use ldd.
Some applications require other files, e.g nano requires terminfo file /usr/share/terminfo/l/linux from sys-libs/ncurses. equery and strace prove helpful to find such requirements.

3.b If all that is required is a stripped down gnu environ, then busybox may be a simple solution. It is contained in a single binary /bin/busybox. To have busybox work in initramfs, it needs to emerge it with the static USE flag enabled, then copy the /bin/busybox binary into the initramfs as /usr/src/initramfs/bin/busybox.
+ Commands 
> USE="static" emerge -av busybox
> cp -a /bin/busybox /usr/src/initramfs/bin/busybox
+ use ldd to verify that the binary is static

4. The /init itself now need to be created. If we are using busybox this can be created using shell script as it contains a shell, otherwise it would have to be written in C or ASM.
+ Example /usr/src/initramfs/init 

#!/bin/busybox sh

# Mount the /proc and /sys filesystems
mount -t proc none /proc
mount -t sysfs none /sys

# Do your stuff here
echo "This script just mounts and boots the rootfs, nothing else!"

# Mount the root filesystem
mount -o ro /dev/sda1 /mnt/root

# clean up
umount /proc
umount /sys

# Boot the real thing
exec switch_root /mnt/root /sbin/init

+ All that has to be changed is the device-node for this to work. Change the /dev/node to fit your needs.
+ Don't forget to make the /init file executable
> chmod +x /usr/src/initramfs/init

5. The initramfs now has to be made available to the kernel at boot time. It needs to be packaged as a compressed cpio archive. This archinve can then either be embedded directly into the kernel image or stored as a separate file which can be loaded by GRUB during the boot process.
With either method you need to enable initial RAM filesystem and RAM disk support. (initramfs/initrd)
CONFIG_BLK_DEV_INITRD=y
Also enable all drivers, filesystems and other settings that are required for booting and accessing your root partition. If you select these drivers as modules they will have to be put in the initramfs and load them in your /init.

Embedding into the kernel
To embed into the kernel image, set initramfs source file(s) to the root of the initramfs. (/usr/src/initramfs)
CONFIG_INITRAMFS_SOURCE="/usr/src/initramfs"

Create a seperate file
Creating a standalone archive file:
> cd /usr/src/initramfs
> find . -print0 | cpio -null -ov --format=newc | gzip -9 > /boot/custom-initramfs.cpio.gz
+ The bootloader will need to be made aware of the file.
+ With GRUB you would do this with the initrd line:
linux 4.7.0-debian
initrd custom-initramfs.cpio.gz

*** Final
+ Now on rebooting the system the kernel will extract the files from the initramfs archive automatically and execute the /init script.

*** Advanced Uses
+ usr/gen_init_cpio - this allows for the dynamic building of initramfs, but is a little more difficult ++++ NEED TO COME BACK TO THIS ++++

** Linux Device Drivers - Jonathan Corbet, Greg Kroah-Hartman, Alessandro Rubini
   
*** Concurrency and Race Conditions
**** Concurrency
-Race condition can occur when two processors are using the same data structure.
- Always try to ensure only one thread is accessing a specific data structure at anyone time.
- Careful kernel code should have a minimum of sharing.
- Avoid the use of global variables - this lessens the chance of more than one thred touching said variable.
- Technique for access management is called locking or mutual exclusion. - making sure only one thread has access to the resource at any given time. 
    
**** Semaphores and Mutexes
- Critical sections: - code that can be executed by only one thread at any given time.
- Going to Sleep - a Linux process reaches a point where it can't make any further processes, it goes to sleep (or "blocks") - freeing the processor for other work.
- semaphore is a type of lock - using two variables P and V to manage access.
- mutex - this is a lock that is used to keep multiple processes from running in a critical section simultaneously. Most semaphores in the linux kernwl are mutexes.
- header file for semaphores is - <asm/semaphores.h>
- void sema_init(struct semaphore *sem, int val); val is the initial valuse of the semaphore.
- locking is down
- unlocking is up

*** Interrupt Handling
** Linux Kernel Module Programming Guide - Peter Jay Salzman, Michael Burian, Ori Pomerantz

+ guide to module writing - linux/Documentation/kbuild/modules.txt
+ guide with details of Makefile - linux/Documentation/kbuild/makefiles.txt
  
+ All loaded modules can be found in /proc/modules

* Books
** [[file://home/crito/Documents/Linux/The_Linux_Programmers_Toolbox.pdf][The Linux Programmer's Toolbox]] 
** [[file://home/crito/Documents/Linux/The_Linux_Programming_Interface_2010.pdf][The Linux Programming Interface]]

*** Chapter 5 - I/O
+ System calls are executed atomically.
This is to say that all the steps involved are guaranteed to be run by the kernel without being interrupted, by another process or thread.

+ It is this atomicity that helps to avoid race conditions.

+ File Control Operatons 
fcntl() - performs a range of control operations on an open fd.
      int fcntl(int fd, int cmd, ...);
- the ellipse indicates that the varible can be many or none. The cmd can also decide what data type will be required.

+ One use for fcntl() is to retrieve or mod the access mode and open file status flags of an open file.

+ To retrieve these settings, cmd is set to F_GETFL
    fcntl(fd, F_GETFL);

+ the open file status flags that can be modified with fcntl() are: O_APPEND, O_NONBLOCK, O_NOATIME, O_ASYNC and O_DIRECT.
- Attemps to modify other flags are ignored on linux.

+ Steps to alter open file status flag
1) retrieve a copy of the existing flags
2) modify the bits we wish to change
3) use of fcntl() to update the flags

+ /dev/fd
  - /dev/fd/0 - /dev/stdin /dev/fd/1 - /dev/stdout /dev/fd/2 - /dev/stderr

+ creating temp files
#include <stdlib.h>

int mkstemp(char *template);

template takes a pathname with the last 6 char XXXXXX. These chars will be replaced to make the file unique.
+ tmpnam(), tempnam() and mktemp() can also make temp files, but are unsecure and can lead to security holes in applications.

*** Chapter 6 - Processors
+ Linux initially used the a.out format for binaries, then moved to the more sophisticated COFF (Common Object File Format) but now uses the ELF (Executing and Linking Format).

+ In linux pid cannot be > 32767. Once this number is reached the kernel resets the pid counter to 300.
+ The max can be altered on 64bit machines to around 4million (2xy22)
+ The file to alter this can be found in /proc/sys/kernel/pid_max 

** [[file://home/crito/Documents/Linux/Linux_System_Programming_2e.pdf][Linux System Programming]]
** [[file://home/crito/Documents/Linux/Kernel/Linux_Kerenel_in_a_Nutshell.pdf][Linux Kernel in a Nutshell]]
** [[file://home/crito/Documents/Linux/Kernel/Linux_Kernel_Internals.pdf][Linux Kernel Internals]]
* Links
[[https://kernelnewbies.org/KernelJanitors][Kernel Janitors project]]
[[https://git.kernel.org/][git.kernel.org]]
[[https://bugzilla.kernel.org/][Bug reporting tool for the linux kernel]]
[[https://www.ozlabs.org/~akpm/stuff/tpp.txt][The Perfect Patch]]
[[http://vger.kernel.org/vger-lists.html][Sub-System Mailing Lists]]
[[https://www.kernel.org/doc/html/v4.11/process/coding-style.html][Linux Kernel Coding Style]]
[[https://www.ibm.com/developerworks/library/l-linux-kernel/index.html][Anatomy of the Linux Kernel]]
