runtime! debian.vim

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

filetype indent on
set background=dark
"set showcmd		" Show (partial) command in status line.
set incsearch		" Incremental search
"set hidden             " Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)
set smartcase		" Do smart case matching
set ignorecase		" Do case insensitive matching
set showmatch		" Show matching brackets.
set autowrite		" Automatically save before commands like :next and :make
set number
set tabstop=4
set softtabstop=4
set shiftwidth=4
set noexpandtab
set pastetoggle=<F2>
set clipboard=unnamedplus
set hlsearch
set so=10		" Buffer between cursor top and bottom
set wildmenu		" Provides list of possible cmd completion
"set ruler
"set rulerformat=%15(%c%V\ %p%%%)	" Setting the column position
set magic		" For regualr experssions
set ffs=unix,dos,mac	" Use UNIX as the standard file type
set wrap		" Wrap lines
set t_Co=256		" 256 colour

" Encryption(zip=weak(backward-compatible)|blowfish(better)|blowfish2(best))
" use the -n option to stop a swapfile being created
"setlocal cryptmethod=blowfish2

"Using GPG
augroup gpg_encrypted
	au!
	" First make sure nothing is written to ~/.viminfo while editing an
	" encypted file
	autocmd BufReadPre,FileReadPre *.gpg set viminfo=
	" We don't want a various options which write unencrypted data to disk
	autocmd BufReadPost,FileReadPre *.gpg set noswapfile noundofile nobackup

	" Switch to binary mode to read the encrypted file
	autocmd BufReadPre,FileReadPre *.gpg let ch_save = &ch|set ch=2
	autocmd BufReadPost,FileReadPost *.gpg '[,']!gpg --decrypt 2> /dev/null

	" Switch to normal mode for editing
	autocmd BufReadPost,FileReadPost *.gpg set nobin
	autocmd BufReadPost,FileReadPost *.gpg let &ch = ch_save|unlet ch_save
	autocmd BufReadPost,FileReadPost *.gpg execute ":doautocmd BufReadPost " . expand("%:r")

	" Convert all text to encrypted text before writing
	autocmd BufWritePre,FileWritePre *.gpg '[,']!gpg --default-recipient-self -ae 2>/dev/null
	" Undo the encryption so we are back in the normal text, directly
	" after the file has been written
	autocmd BufWritePost,FileWritePost *.gpg u
augroup END

" Key mappings
nmap <C-l> <C-w>l	" Move left a window
nmap <C-h> <C-w>h	" Move right a window
nmap <C-j> <C-w>j	" Move up a window
nmap <C-k> <C-w>k	" Move down a window
imap <c-d> <esc>xa
imap <c-f> <esc>ddi
imap <c-s> <esc>dwi
"nnoremap / \/v
"vnoremap / \/v
"nnoremap ? ?/v
"vnoremap ? ?/v


" Setting colour scheme
colorscheme desert
syntax on


" Setting autocmd
augroup cprograms
	autocmd FileType c setlocal tabstop=8 shiftwidth=8 softtabstop=8
	autocmd FileType h setlocal tabstop=8 shiftwidth=8 softtabstop=8
	autocmd FileType ko setlocal tabstop=8 shiftwidth=8 softtabstop=8
	autocmd FileType cpp setlocal tabstop=8 shiftwidth=8 softtabstop=8
augroup END

augroup python_programs
	autocmd FileType py setlocal tabstop=4 shiftwidth=4 softtabstop=4
	autocmd FileType py setlocal iskeyword=@,48-57,_,192-255
augroup END

augroup perl_programs
	autocmd FileType pl setlocal tabstop=4 shiftwidth=4 softtabstop=4
augroup END


" Currently using airline
let g:airline_theme		= 'papercolor'
let g:airline_powerline_fonts	= 1
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
"et g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
"let g:airline_right_alt_sep = ''
"let g:airline_symbols.branch = ''
"let g:airline_symbols.readonly = ''
"let g:airline_symbols.linenr = ''
"let g:airline_detect_modified	= 1
"let g:airline_detect_paste	= 1
"let g:airline_detect_crypt	= 1
"let g:airline_detect_iminsert	= 0
"let g:airline_exclude_filenames = [] " see source for current list
"let g:airline_symbols.space = '\ua0'
let g:airline#extensions#disable_rtp_load = 0


" This sets a vim status bar
"set statusline=%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%m%r%y%=%c,%l/%L\ %P
"set statusline=\ %{(&fenc)}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l/%L\ %P\ \ \ Col:\ (%c%V\)
"set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l/%L\ %P\ \ \ Col:\ (%c%V\)
"hi StatusLine ctermbg=5 ctermfg=3
set laststatus=2


" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif


" Tmux
let g:airline#extensions#tmuxline#enabled = 1

" Box Commenting
ab #b /****************************************
ab #e ^V^H*****************************************/


"Pathogen
"execute pathogen#infect()
"call pathogen#helptags()
"filetype plugin indent on
