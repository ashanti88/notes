#+TAGS: sys anal


* perf								   :sys:anal:
Wiki: [[https://perf.wiki.kernel.org/index.php/Tutorial][perf.wiki]]
* Description
* Usage
** Counting Examples

[[file://home/crito/Pictures/org/perf_counting_events.png]]

** Report
- read the perf file perf.data
#+BEGIN_SRC sh
perf report
#+END_SRC
** Top
#+BEGIN_SRC sh
perf top
#+END_SRC
** Stat
- monitor movement of data
#+BEGIN_SRC sh
perf stat -B dd if=/dev/zero of=/dev/null count=100000
#+END_SRC

- by default perf will measure both user and kernel levels
#+BEGIN_SRC sh
perf stat -e cycles dd if=/dev/zero of=/dev/null count=100000
#+END_SRC
or explicitly
#+BEGIN_SRC sh
perf stat -e cycles:uk dd if=/dev/zero of=/dev/null count=100000
#+END_SRC

- measure only user level
#+BEGIN_SRC sh
perf stat -e cycles:u dd if=/dev/zero of=/dev/null count=100000
#+END_SRC

- Modifiers
u - monitor at priv level 3, 2, 1 (user)
k - monitor at priv level 0 (kernel)
h - monitor hypervisor events on a virtualization environment
H - monitor host machine on a virtualization environment
G - monitor guest machine on a virtualization environment

** Examples
*** Performance analysis of the system
#+BEGIN_SRC sh
sudo perf top
#+END_SRC

*** Performance analysis of a program
1. Crate perf.data file
#+BEGIN_SRC sh
sudo perf record <program>
#+END_SRC

2. read create file
#+BEGIN_SRC sh
sudo perf report
#+END_SRC

*** Is my application using the L1 cache
#+BEGIN_SRC sh
sudo perf stat -e -L1 -dcache-load-misses
#+END_SRC
* Nodejs & Java
node  --perf-basic-prof
java - lookup perf-map-agent on github
* Lecture
* Tutorial
* Books
* Links
[[http://www.brendangregg.com/perf.html][Linux perf Examples - Brendan Gregg]]

