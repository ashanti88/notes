#+TAGS: git code_management vcs


* git
HomePage: https://git-scm.com/

* Files
/etc/gitconfig             - system wide
/home/user/.gitconfig      - user specific
/home/user/repo/.gitconfig - repo specific

* Description
* Usage
- installation
#+BEGIN_SRC sh
yum install -y git
apt-get install git
pacman -S git
#+END_SRC

- view a less verbose "git status"
#+BEGIN_SRC sh
git status -sb
#+END_SRC
** Git Configuration
- setting cedentials for user
#+BEGIN_SRC sh
git config --global user.name "Root User"
git config --global user.email "root@localhost"
git config --global core.edAXX2Re2w6xJdz1nyKBYwitor "vim"
git config --global core.pager "more"
git config --global core.excludesfile ~/.gitignore_global
#+END_SRC

- setting configuration for system
#+BEGIN_SRC sh
git config --system system.name "Git Repo Server 1"
#+END_SRC
any plain text variables can be added

- setting files that need to be ignored
.gitignore_global
#+BEGIN_EXAMPLE
*~
#+END_EXAMPLE
this will mean that all files with a ~ on the end will never be added to a repo for that user

** Setting user creds
-setting username
#+BEGIN_SRC sh
git config --global user.name "Alick"
#+END_SRC

- setting email
#+BEGIN_SRC sh
git config --global user.email "mitchell.alick@gmail.com"
#+END_SRC

- setting default editor
#+BEGIN_SRC sh
git config --global core.editor vim
#+END_SRC

** Create a new repo
#+BEGIN_SRC sh
git init 
#+END_SRC
do this inside the directory to create a repo

** Removing files from git
- first remove the file
#+BEGIN_SRC sh
rm filename
#+END_SRC

- now we have to remove the file from git
#+BEGIN_SRC sh
git rm filename
#+END_SRC

** gitignore
- this shouldn't be added to the repo, it will still have effect

** Clone
- copying a repo
#+BEGIN_SRC sh
cp -r /repo /repo2
#+END_SRC
This will give you a full copy of the original, but will not be linked.
  - Will not be able to push or pull too
    
- cloning a repo
#+BEGIN_SRC sh
git clone /repo /home/user2/repo
#+END_SRC
Now these two repos will be able to communicate with each other

- cloning to another machine over ssh
#+BEGIN_SRC sh
ssh-keygen
ssh-copy-id user@192.168.0.10
#+END_SRC
Though this isn't nessesary it does make for a less hindered process in the future

- clone the to the remote server
#+BEGIN_SRC sh
git clone user@192.168.0.10:/home/user/repo localrepo
#+END_SRC
We are pulling from the remote repo on 192.168.0.10 to our machine

** Commits
- add files to repo for commit
#+BEGIN_SRC sh
git <file_name> | > git *
#+END_SRC

- now make the commit
#+BEGIN_SRC sh
git commit -m "message to be added"
#+END_SRC

** Push commits
#+BEGIN_SRC sh
git push origin master
#+END_SRC

** Branchs
- create a new branch
#+BEGIN_SRC sh
git checkout -b new_branch
#+END_SRC

- switch to master branch
#+BEGIN_SRC sh
git checkout master
#+END_SRC

- delete a certain branch
#+BEGIN_SRC sh
git branch -d <branch>
#+END_SRC

- show all branches
#+BEGIN_SRC sh
git branch -a
#+END_SRC

** Update & Merge
- update repo to most current
#+BEGIN_SRC sh
git pull
#+END_SRC

- merge branch into your active branch
#+BEGIN_SRC sh
git merge branch
#+END_SRC

- merge development into master and retain all commit messages
on master
#+BEGIN_SRC sh
git merge development --no-ff
#+END_SRC
no-ff - this indicates to keep all commit messages prior to the merge

** Removing files after being added to .gitignore
- add the file to the .gitignore

- remove the file from the repo history
#+BEGIN_SRC sh
git rm -r --cached <file>
#+END_SRC

- then add and commit
#+BEGIN_SRC sh
git add *
git commit -m "file added to .gitignore"
#+END_SRC

** Reset
- if you have made a change to a branch and would like to go back to the original state
#+BEGIN_SRC sh
git reset --hard
#+END_SRC

** Tags
These point to a commit and will never change
  - these are handy for pointing to versions of software
    
- Two types
  - annotate
  - non-annotated
    
- adding a non-annotated tag
#+BEGIN_SRC sh
git tag tag1
#+END_SRC
this will pin a tag to the current commit point

- show all tags
#+BEGIN_SRC sh
git tag
#+END_SRC

- show what has happend since the tag was added
#+BEGIN_SRC sh
git show tag1
#+END_SRC

** Git Log
- view all commits of a repo
#+BEGIN_SRC sh
git log
#+END_SRC

- more specific log search
#+BEGIN_SRC sh
git log -p -2 
#+END_SRC
p - difference introduced to the commit
2 - show only the last two commits

- git log with statistics
#+BEGIN_SRC sh
git log --stat
#+END_SRC
this show all file changes that occured with that commit

- view commit message and commit hash on oneline
#+BEGIN_SRC sh
git --pretty=oneline
#+END_SRC

- select your own format
#+BEGIN_SRC sh
git log --pretty=format:"%h: %an, %ae, %cn, - %s"
#+END_SRC
h  - host
an - author name
ae - author email
cn - person that commits name
s  - subject

- view the log with graph
#+BEGIN_SRC sh
git log --graph
#+END_SRC
-- graph can be used with the other log formats

* Github
- SSH test
#+BEGIN_SRC sh
ssh -T git@github.com
#+END_SRC
This will return a message that github doesn't allow shell access, but allows you to know that you can connect to github

- Github not using ssh key
- first check that it's been added to github
- check the .git/config makesure that it is connecting over ssh not https
  - url = git@github.com:AlickMitchell/notes.git

*** adding the ssh url to your project
setting the ssh url
#+BEGIN_SRC sh
git remote set-url origin git@github.com:AlickMitchell/content-jenkins-freestyle.git
#+END_SRC
If the remote is set to https github will always ask for your username and password.

*** Pushing a new branch to Github
#+BEGIN_SRC sh
git push origin development
#+END_SRC
where development is the new branch being pushed to Github

*** Error with ssh keys as ssh-agent was needed
#+BEGIN_EXAMPLE
19:13:43 ajax:~/org$ git push origin master
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
#+END_EXAMPLE
The above error was throw as ssh didn't know about the github ssh-key

- Solution(do in bash, didn't work in zsh)
#+BEGIN_SRC sh
ssh-agent /bin/bash
ssh-add github-key
ssh-add -l 
#+END_SRC
- this will show the added key in the list

* Alternative Version Control
Perforce
Subversion - SVN
Microsoft Visual SourceSafe (legacy)
Mercurial
TeamSite (Microsoft)
Vault
Bitkeeper - used to manage the linux kernel before git
* Lecture
* Tutorial
** LinuxAcademy - Git Quick Start

- Installation and Configuration
  
- RHEL
#+BEGIN_SRC sh
yum install git
#+END_SRC

- Configure Global Parameters - these parameters will be used if none are supplied
#+BEGIN_SRC sh
git config --global user.name "testname"
git config --global user.email "testname@testemail.com"
git config --system core.editor "/usr/bin/vim"
#+END_SRC
these commands will be written to /etc/gitconfig


- Creating a Repository and Adding Content

  - make a directory whcih will become the local repo  
    #+BEGIN_SRC sh
    mkdir repo
    cd repo
    #+END_SRC
  - now we have to initialize the repo, this creates the needed files (.git directory)
    #+BEGIN_SRC sh
    git init .
    #+END_SRC
    - to remove a repo all we have to do is remove the .git directory
  - checking the status of a git repo
    #+BEGIN_SRC 
    git status
    #+END_SRC
    - this will provide a list of files that have changed and newly added
  - changing default username and email
    #+BEGIN_SRC sh
    git config user.name "user"
    git config user.email "user@example.com"
    #+END_SRC
  - add files to the repo
    #+BEGIN_SRC sh
    git add *
    #+END_SRC
    - this will add every file in the directory
    - these files still need to be commited, and are not tracked (can be removed without recording)
  - commit the staged files (newly added and changed files)
    #+BEGIN_SRC sh
    git commit -m "this is the initial message"
    #+END_SRC
    - these is a second way where you can leave out the -m "and message", this will drop you into the editor
  - commit only modified files
    #+BEGIN_SRC sh
    git commit -a -m "this will leave out the untracked files from the commit"
    #+END_SRC
    

- Logging
  - it has it's own man page
    #+BEGIN_SRC sh
    man git-log
    #+END_SRC
  - pull all the commits from a branch
    #+BEGIN_SRC sh
    git log
    #+END_SRC
  - to get a summary of the logs
    #+BEGIN_SRC sh
    git log --oneline
    #+END_SRC
  - pull each commit plus all the details of modified and added files
    #+BEGIN_SRC sh
    git log -p
    #+END_SRC
  - view the logs/commits of a specific file
    #+BEGIN_SRC sh
    git log -- test.txt
    #+END_SRC
  - view the all commits submitted by a specific author
    #+BEGIN_SRC sh
    git log --author="user"
    #+END_SRC
  - grep for a specific word in the commit logs
    #+BEGIN_SRC sh
    git log --grep="change"
    #+END_SRC
  - view the overview of a repo and how branches divert
    #+BEGIN_SRC sh
    git log --graph
    #+END_SRC
    

- Cloning
  - clone a repo that is on the same machine
    #+BEGIN_SRC sh
    git clone /home/user/repo /home/user/new-repo
    #+END_SRC
  - this new clone will require that you set the local configuration
    #+BEGIN_SRC sh
    cd new-repo
    git config user.name "new-user"
    git config user.email "new-user@example.com"
    #+END_SRC
  - cloning with ssh
    #+BEGIN_SRC sh
    git clone user@server.git.com:repo .
    #+END_SRC
    this will pull the user repo and clone it to the current directory
  - pushing to a remote repo
    #+BEGIN_SRC sh
    git push origin master
    #+END_SRC
    this will push current repo (origin) to the master branch on the remote repo

- Ignoring Content
  - is there an excludesfile set globally for git
    #+BEGIN_SRC sh
    git config --global core.excludesfile
    #+END_SRC
  - add an excludes file globally
    #+BEGIN_SRC sh
    git config --global core.excludesfile='/etc/gitignore'
    #+END_SRC
    /etc/gitignore
    #+BEGIN_EXAMPLE
    # globally ignore compiled .out binary files
    *.out
    #+END_EXAMPLE
  - setting a repo specific excludes file
    /home/user/repo/.gitignore
    #+BEGIN_EXAMPLE
    # locally ignore .bak files
    *.bak
    #+END_EXAMPLE
    
- Branching
  - check current branch
    #+BEGIN_SRC sh
    git branch
    #+END_SRC
    this will show which is the current branch with an asterisk and list the rest
  - create a new branch
    #+BEGIN_SRC sh
    git branch new-branch
    #+END_SRC
  - switch branch
    #+BEGIN_SRC sh
    git checkout new-branch
    #+END_SRC
  
- Merging and Pushing
  - update a remote repo with changes on local repo
    #+BEGIN_SRC sh
    git push origin master
    #+END_SRC
  - push a branch other than the master
    #+BEGIN_SRC sh
    git checkout new-branch
    git push origin new-branch
    #+END_SRC
    if the branch isn't present on the remote repo it will be created
  - update all branches
    #+BEGIN_SRC sh
    git push origin --all
    #+END_SRC
  - merge new-branch with master
    #+BEGIN_SRC sh
    git checkout master
    git merge new-branch
    #+END_SRC
    this will prompt for a comment to be added

* Books
 [[file://home/crito/Documents/Tools/Git/Git_Essentials.pdf][Git Essentials]]
 [[file://home/crito/Documents/Tools/Git/Git_for_Teams.pdf][Git for Teams]]
 [[file://home/crito/Documents/Tools/Git/Git_Fundamentals.pdf][Git Fundamentals]]
 [[file://home/crito/Documents/Tools/Git/Git_in_Practice.pdf][Git in Practice]]
 [[file://home/crito/Documents/Tools/Git/GitLab_Cookbook.pdf][GitLab Cookbook]]
 [[file://home/crito/Documents/Tools/Git/Introducing_GitHub.pdf][Introducing GitHub]]
 [[file://home/crito/Documents/Tools/Git/Learn_Git_in_a_Month_of_Lunches.pdf][Learn Git in a Month of Lunches]]
 [[file://home/crito/Documents/Tools/Git/Mastering_Git.pdf][Mastering Git]]
 [[file://home/crito/Documents/Tools/Git/Pragmatic_Version_Control_Using_Git.pdf][Pragmatic Version Control Using Git]]
* Links
