#+TAGS: disk_encryption cryptsetup encryption_tool


* cryptsetup
* Files
- /proc/crypto - this shows all the defaults for the encrypted disks
- /dev/mapper  - here is where all the alias for the encrpted partitions are stored

* Description
* Usage
** Encrypt a partition
#+BEGIN_SRC sh
cryptsetup -y luksFormat /dev/sdb1
#+END_SRC
This ask you to confirm and also for a passphrase
** Open an encrypted partition
#+BEGIN_SRC sh
cryptsetup luksOpen /dev/sdb1 myEncryption
#+END_SRC
- you will be prompted for your passphrase if correct it will be unlocked
- myEncryption is the alias that the encrypted with be know as in /dev/mapper, and it is this that is used when the partition is to be acted on (mount etc)

** Close an encryped partition
#+BEGIN_SRC sh
cryptsetup luksClose myEncryption
#+END_SRC
where myEncryption is the mapper alias

** Working with Luks Keys
- list current key slots active
#+BEGIN_SRC sh
cryptsetup luksDump /dev/sdb1 | grep BLED
#+END_SRC

- add a key to a slot 
#+BEGIN_SRC sh
cryptsetup luksAddKey /dev/sdb1
#+END_SRC
- first you will be asked for one of the already set passwords
- then we can add our new passphrase, and this will take the next available slot
  
- add key to specific slot
#+BEGIN_SRC sh
cryptsetup luksAddKey /dev/sdb1 -s 5
#+END_SRC
this will place the new passphrase into slot 5

- delete an existing key
#+BEGIN_SRC sh
cryptsetup luksRemoveKey /dev/sdb1
#+END_SRC
this will ask you which passphrase is to be removed, just enter that passphrase

- delete an existing slot
#+BEGIN_SRC sh
cryptsetup luksKillSlot /dev/sdb1 2
#+END_SRC
Enter any quailfied key and the passphrase will be removed in slot 2

- re-encrypt a partition and remove from /dev/mapper
#+BEGIN_SRC sh
umount /dev/mapper/secret
cryptsetup luksClose /dev/mapper/secret
#+END_SRC

- reset forgotten LUKS key
Only works if the LUKS partition is already unencrypted
#+BEGIN_SRC sh
fdisk -l 
dmsetup table --showkeys
echo "607f482870c795a9b1e307ffbfc6643eaa219e9ef8c6773de02cd298c8fcda3c" > existing_lukskey.txt
xxd -r -p existing_lukskey.txt existing_lukskey.bin
cryptsetup luksAddKey /dev/sdb1 --master-key-file <(cat existing_lukskey.bin)
#+END_SRC
- list all disks and find the dev that the passphrase belongs to
- dmsetup table will dump all the keys associated with each dev
- take the hash that is printed and place it in a file on its own
- convert that file into a binary
- using the master key reste the password

** Mounting a second encrypted hdd
- /etc/fstab
#+BEGIN_EXAMPLE
# /etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a device; this may
# be used with UUID= as a more robust way to name devices that works even if
# disks are added and removed. See fstab(5).
#
# <file system>             <mount point>  <type>  <options>  <dump>  <pass>
/dev/mapper/luks-a0ef3ffa-be67-4891-ae34-c885f3565d73 /              ext4    defaults,noatime,discard 0 1
/dev/mapper/luks-32f8b82c-a06f-43aa-8167-c59430a860fb swap           swap    defaults,noatime,discard 0 2
UUID=e9f0c8de-c2ff-4d1a-a0b9-68915426f4c0 swap           swap    defaults,noatime 0 2
tmpfs                                     /tmp           tmpfs   defaults,noatime,mode=1777 0 0

/dev/mapper/enc_hdd /home ext4 defaults,noatime 0 2
#+END_EXAMPLE

- /etc/crypttab
#+BEGIN_EXAMPLE
[sudo] password for crito: 
# /etc/crypttab: mappings for encrypted partitions.
#
# Each mapped device will be created in /dev/mapper, so your /etc/fstab
# should use the /dev/mapper/<name> paths for encrypted devices.
#
# See crypttab(5) for the supported syntax.
#
# NOTE: Do not list your root (/) partition here, it must be set up
#       beforehand by the initramfs (/etc/mkinitcpio.conf). The same applies
#       to encrypted swap, which should be set up with mkinitcpio-openswap
#       for resume support.
#
# <name>               <device>                         <password> <options>
luks-a0ef3ffa-be67-4891-ae34-c885f3565d73 UUID=a0ef3ffa-be67-4891-ae34-c885f3565d73     /crypto_keyfile.bin luks
luks-32f8b82c-a06f-43aa-8167-c59430a860fb UUID=32f8b82c-a06f-43aa-8167-c59430a860fb     /crypto_keyfile.bin luks
enc_hdd UUID=3e600e96-8d13-4ef4-bce4-f18c7d0fe939 /root/enc_keyfile.bin luks
#+END_EXAMPLE

** Encrypt a whole disk
#+BEGIN_SRC sh
cryptsetup -y -v luksFormat /dev/xvdc
#+END_SRC
* Lecture
* Tutorial
* Books
* Links
[[https://wiki.archlinux.org/index.php/Dm-crypt/Encrypting_an_entire_system#Simple_partition_layout_with_LUKS][Encrypting an entire system - ArchWiki]]
