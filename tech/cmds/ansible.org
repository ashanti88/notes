#+TAGS: ansible automation


* Ansible
HomePage: [[https://www.ansible.com/][ansible.com]]
Galaxy: [[https://galaxy.ansible.com/][galaxy.ansible.com]]

* Files
/etc/ansible/ansible.cfg - this file contains local settings for ansible
/etc/ansible/hosts       - this file is the default hosts file that ansible will use

* cmds
- [[file://home/crito/org/tech/cmds/ansible.org][ansible]]
- [[file://home/crito/org/tech/cmds/ansible-playbook.org][ansible-playbook]]

* Description
- RHEL 6 and below can't support Control Persist feature of OpenSSH so falls back to using a python implementation of OpenSSH, 'paramiko'. It is advised if this is the case to use another implementation of Linux as the control machine (fedora, ubuntu etc)
- Using sudo was previously done with the option --ask-sudo-pass, this has now been deprecated for --ask-become-pass
** Inventory
These are the machines that ansible will work against
- defaults to /etc/ansible/hosts 
- a different inventory file can be specified by using the the -i <path> option
- these files use an INI-like format that looks like this:
#+BEGIN_EXAMPLE
mail.example.com

[webservers]
foo.example.com
bar.example.com

[dbservers]
one.example.com
two.example.com
bar.example.com
#+END_EXAMPLE

- for use with vagrant on a local machine it a simple version looks like this
#+BEGIN_EXAMPLE
[vagrant]
testserver	ansible_host=127.0.0.1 ansible_ssh_port=2222 ansible_ssh_user=vagrant ansible_ssh_private_key_file=/home/crito/vagrant/testserver/.vagrant//machines/default/virtualbox/private_key
#+END_EXAMPLE

- a machine may be a member of more than one group, but variable precedence has to be taken into account
- none default ssh port numbers can be added to this file at the end of the machine name
#+BEGIN_EXAMPLE
mail.example.com:4444
#+END_EXAMPLE

- multiple hosts using the same naming convention
#+BEGIN_EXAMPLE
mail[01:50].example.com
#+END_EXAMPLE

* Usage
- only run cmd on specific server in a group
#+BEGIN_SRC sh
ansible app -s -a "service ntpd restart" --limit "192.168.60.4"
ansible app -s -a "service ntpd restart" --limit "*.4"
ansible app -s -a "service ntpd restart" --limit ~".*\.4"
#+END_SRC
This cmd will only be run on the .4 server
first is an exact string match, second is a wildcard match and thrid is a regex match.

** System Analysis
- ping testserver that is specified in hosts file
#+BEGIN_SRC sh
ansible testserver -i hosts -m ping
#+END_SRC
-i -this indicates the hosts file to be used, if none set /etc/hosts is used 
use the --private-key option to select which which private key to use

- check uptime of testserver
#+BEGIN_SRC sh
ansible testserver -i hosts -m command -a uptime
#+END_SRC

- confirm hostnames of servers
#+BEGIN_SRC sh
ansible multi -a "hostname"
#+END_SRC

- force ansible to use only one fork (stop parallelism)
#+BEGIN_SRC sh
ansible multi -a "hostname" -f 1
#+END_SRC
using this option allows the setting of the number of forks explicitly

- check disk information on servers
#+BEGIN_SRC sh
ansible multi -a "df -h"
#+END_SRC

- check available memory
#+BEGIN_SRC sh
ansible multi -a "free -m"
#+END_SRC
this will use megabyte as the unit, h can be used in its place

- check the date on the servers
#+BEGIN_SRC sh
ansible multi -a "date"
#+END_SRC
- view the /etc/passwd file
#+BEGIN_SRC sh
ansible testserver -i hosts -m command -a "cat /etc/passwd"
#+END_SRC

- check uptime of testserver
#+BEGIN_SRC sh
ansible testserver -i hosts -m command -a "uptime"
#+END_SRC

- check the state of NTP daemon
#+BEGIN_SRC sh
ansible multi -s -m service -a "name=ntpd state=started enabled=yes"
#+END_SRC

- view the /etc/passwd file
#+BEGIN_SRC sh
ansible testserver -i hosts -m command -a "cat /etc/passwd"
#+END_SRC

** Installing and Removing Packages
- install nginx
#+BEGIN_SRC sh
ansible testserver -i hosts -m apt -a "name=nginx state=present"
#+END_SRC
i - this is indicating the hosts file to use (if i is missing /etc/ansible/hosts is used)

- remove nginx
#+BEGIN_SRC sh
ansible testserver -i hosts -m apt -a "name=nginx state=absent"
#+END_SRC

- install ntp on servers
#+BEGIN_SRC sh
ansible multi -s -m yum -a "name=ntp state=present"
#+END_SRC
-s this tells ansilble to use sudo - this will become deprecated in V2.6 -b (become) should now be used)
If sudo password is required add the -k (--ask-sudo-pass) option and this will prompt for the password

- installing django on application server
#+BEGIN_SRC sh
ansible app -b -m yum -a "name=MySQL-python state=present"
ansible app -b -m yum -a "name=python-setuptools state=present"
ansible app -b -m easy_install -a "name=django"
ansible app -a "python -c 'import django; print django.get_version()'"
#+END_SRC
The final line is to confirm the django install

- installing mariadb on database server
#+BEGIN_SRC sh
ansible db -b -m yum -a "name=mariadb-server state=present"
ansible db -b -m service -a "name=mariadb state=started enabled=yes"
ansible db -b -a "iptables -F"
ansible db -s -a "iptables -A INPUT -s 192.168.60.0/24 -p tcp -m tcp --dport 3306 -j ACCEPT"
#+END_SRC
- add the MySQL-python module to allow django to connect to the db
#+BEGIN_SRC sh
ansible db -b -m yum -a "name=MySQL-python state=present"
ansible db -b -m mysql_user -a "name=django host=% password=12345 priv=*.*:ALL state=present"
#+END_SRC
This would this configuration is only for dev environments.
For Production:
Remove test db
Add root user account password
Restrict the IP addr that can connect to 3306

** Manage Users and Groups
- add an admin group
#+BEGIN_SRC sh
ansible app -b -m group -a "name=admin state=present"
#+END_SRC
To remove a group change the state=absent
system=yes indicates that the group is a system group 0-1000
gid=[gid] this is to set a specific gid

- add the user frank to the app servers
#+BEGIN_SRC sh
ansible app -b -m user -a "name=frank group=admin createhome=yes"
#+END_SRC
generate_ssh_key=yes - will create an ssh key for the user
uid=[uid]            - this sets a specific uid for the user
shell=[shell]        - this sets the specific shell for the user
password=[encrypted-password] - this sets the users password

- remove the user frank from the app servers
#+BEGIN_SRC sh
ansible app -b -m user -a "name=frank state=absent remove=yes"
#+END_SRC
remove - this will remove the home dir of the user

** Manage files and directories
- get infomation about a file
#+BEGIN_SRC sh
ansible multi -m stat -a "path=/etc/environment"
#+END_SRC

- copy a file to the servers
#+BEGIN_SRC sh
ansible multi -m copy -a "src=/etc/hosts dest=/tmp/hosts"
#+END_SRC
this can be a file or a directory.
A trailing slash, means only the contents of the directory will be copied
If the trailing slash is omitted the directory is also copied
For large amounts of files use an archinve with the unarchive module

- retrieve a file from the servers
#+BEGIN_SRC sh
ansible multi -s -m fetch -a "src=/etc/hosts dest=/tmp"
#+END_SRC
the files will be returend in directories named by their ip addr
flat=yes this option would retrieve the file without the directories, but unique files names would be needed. Really only of use for a single host.

- Create a directories and files
#+BEGIN_SRC sh
ansible multi -m file -a "dest=/tmp/test mode=644 state=directory"
#+END_SRC

- Create a symlink
#+BEGIN_SRC sh
ansible multi -m file -a "dest=/src/symlink dest=/tmp/symlink owner=root group=root state=link"
#+END_SRC

- Delete directories and files
#+BEGIN_SRC sh
ansible multi -m file -a "dest=/tmp/test state=absent"
#+END_SRC

** Update system
- Run the update in the background
#+BEGIN_SRC sh
ansible multi -b -B 3600 -m yum -a "pkg=* state=latest"
#+END_SRC
-B <seconds> - max amount of time to let the job run
-P <seconds> - amount of time between polling the servers, if absent defaults to 10 secs

** Manage Services
- start the httpd service
#+BEGIN_SRC sh
ansible apacheweb -u ansible -b -m service -a "name=httpd state=restarted"
#+END_SRC
  
- stop the httpd service
#+BEGIN_SRC sh
ansible apacheweb -u ansible -b -m service -a "name=httpd state=stopped"
#+END_SRC
  
- restart the httpd service
#+BEGIN_SRC sh
ansible apacheweb -u ansible -b -m service -a "name=httpd state=restarted"
#+END_SRC

** Check log files
tail -f is not possible with ansible, and large amounts of data shouldn't be accessed(> a few KB) by ansible logon to the server individually to get this data if required

- view last few lines of messages log file
#+BEGIN_SRC sh
ansible multi -s -a "tail /var/log/messages"
#+END_SRC

- grep the messages log
#+BEGIN_SRC sh
ansible multi -s -m shell -a "tail /var/log/messages | grep ansible-command | wc -l"
#+END_SRC

** Manage cron jobs
- add a cron job to run everyday at 4am
#+BEGIN_SRC sh
ansible multi -b -m cron -a "name='daily-cron-all-servers' minute=45 hour=4 job='/path/to/daily-script.sh'"
#+END_SRC
Ansible assumes * for all values you don't specify (valid values day, hour, minute, month and weekday)
special_time=[value] reboot, yearly or monthly
user=[user] this specifies which user for the cron job to run under

- remove a cron job
#+BEGIN_SRC sh
ansible multi -b -m cron -a "name='daily-cron-all-servers' state=absent"
#+END_SRC

** VCS
Playbooks should be used for complicated application deployment

- simple application deployment with git module
#+BEGIN_SRC sh
ansible app -b -m git -a "repo=https://github.com/hephaest0s/usbkill.git dest=/opt/myapp"
#+END_SRC
version=1.2.4 - this will ensure that the 1.2.4 branch is checked out, or a specific commit can be used

** Vagrant
*** Configure
to use playbooks with a vm the following needs to be added to the Vagrantfile
#+BEGIN_EXAMPLE
Vagrant.configure("2") do |config|

  #
  # Run Ansible from the Vagrant Host
  #
  config.vm.provision "ansible" do |ansible|
    ansible.playbook = "playbook.yml"
  end

end
#+END_EXAMPLE
*** Sudo
sudo: yes is now deprecated for become: true
*** Example host configurations
**** Two App Servers and a DB Server
/etc/ansible/hosts
this is an example for a vagrant setup
#+BEGIN_EXAMPLE
# Application Servers
[app]
192.168.60.4
192.168.60.5

# Databae Server
192.168.60.6

# Group 'multi' with all servers
[multi:children]
app
db

# Variables that will be applied to all servers
[multi:vars]
ansible_ssh_user=vagrant
ansible_ssh_private_key_file=~/.vagrant.d/insecure_private_key
#+END_EXAMPLE

Vagrantfile
#+BEGIN_EXAMPLE
# -*- mode: ruby -*-
# vi: set ft=ruby :
# This will provision 2 Application Servers and a Database serrver running Centos7

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.ssh.insert_key = false
  config.vm.provider :virtualbox do |vb|
    vb.customize ["modifyvm", :id, "--memory", "256"]
  end

  # Application server 1
  config.vm.define "app1" do |app|
    app.vm.hostname = "ans-app1.dev"
    app.vm.box = "centos/7"
    app.vm.network :private_network, ip: "192.168.60.4"
  end

  # Application server 2
  config.vm.define "app2" do |app|
    app.vm.hostname = "ans-app2.dev"
    app.vm.box = "centos/7"
    app.vm.network :private_network, ip: "192.168.60.5"
  end

  # Application server 3
  config.vm.define "db" do |app|
    app.vm.hostname = "ans-db.dev"
    app.vm.box = "centos/7"
    app.vm.network :private_network, ip: "192.168.60.6"
  end
end
#+END_EXAMPLE
    
**** Simple ansible/vagrant setup
These two file should be placed in the vagrant directory
- ansible.cnf
#+BEGIN_EXAMPLE
[defaults]
hostfile = hosts
remote_user = ubuntu
private_key_file = /home/crito/vagrant_boxes/ansible/.vagrant/machines/default/virtualbox/private_key
host_key_checking = False
#+END_EXAMPLE

- hosts
#+BEGIN_EXAMPLE
vm-ubuntu ansible_ssh_host=127.0.0.1 ansible_ssh_port=2222 ansible_ssh_user=ubuntu ansible_ssh_private_key_file=/home/crito/vagrant_boxes/ansible/.vagrant/machines/default/virtualbox/private_key
#+END_EXAMPLE

** Sync NTP Servers
#+BEGIN_SRC sh
ansible multi -s -a "service ntpd stop"
ansible multi -s -a "ntpdate -q 0.rhel.pool.ntp.org"
ansible multi -s -a "service ntpd start"
#+END_SRC

** Installation on CentOS7
   
- create the ansible user on each node
#+BEGIN_SRC sh
useradd ansible
passwd ansible
#+END_SRC

- this user will require root privs
/etc/sudoers
#+BEGIN_EXAMPLE
ansible ALL=(ALL) NOPASSWD: ALL
#+END_EXAMPLE

- makesure that ssh keys have been swapped between each node
#+BEGIN_SRC sh
su - ansible
ssh-key-gen
ssh-copy-id frank1@172.168.0.10
ssh-copy-id frank2@172.168.0.10
#+END_SRC
copy the ssh key to each node, that will be having playbooks run against it

- install epel
#+BEGIN_SRC sh
yum install epel-release
yum update
#+END_SRC

- install ansible
#+BEGIN_SRC sh
yum install ansible
#+END_SRC
this needs to be installed on any node that will be executing plays

** Installing AWS CLI Tools
   
- makesure that pypi is installed (this may require the epel repo)
#+BEGIN_SRC sh
yum install python-pip
#+END_SRC

- install the aws cli
#+BEGIN_SRC sh
pip install awscli
#+END_SRC

* Lecture
** Learn you some Ansible for great good! - OpenStack Summit May 2015
url:[[url][https://www.youtube.com/watch?v=qEuk65few9I]]

*** Unified dev, test and deployment environments 
+ can reproduce issues
+ buys caught earlier
+ dev environment templated - all the same
+ speed of work getting started

+ simple way to create identical development environments

*** Configuration Management Tools

Arcane magic --------> Manual Instructions ----------> Scripts ------> CM Tools

+ with the scripts and CM tools we are now able to automate the management.

*** CM Tools
+ its about describing to the tool the environment that is required.

variety - Puppet - 2005
        - Chef   - 2009        Seen as more feature rich
--------------------------------------------------------------
        - Salt   - 2011        Simpler Solutions
        - Ansible- 2012
	  

*** Ansible
+ Orchestration engine for CM and deployment
+ Written in python
+ Uses YAML
+ Playbooks - descriptions of desired states
+ Config specs or explicit cmds

**** Key Points
+ No central configuration server
+ No key mgmt
+ No agent to install on target machine
+ Explicit order
  
**** Requirements
+ SSH access (with key or password)
+ Need Python installed on target machine

**** Modules
+ Hundreds of them. They know stuff....
  - Command
  - shell script
  - install pkg
  - Network Services
  - Database Services
Many more.....

**** How does it work

           Playbook      Python Mod   ssh              ssh     Run Mod
  Laptop ------------->  "Apache2" --------> Run Mod -------> (then del) 
     |                                                            |
     |                                                            |
     -------------------------------------------------------------
                           Return Results
			   
+ once Ansible has finished all the module code is deleted.

**** Inventory and groups
+ Define hosts, organised into groups 
  - by function
  - by location
  - by hosting provider

+ Naming of groups is arbitory

**** Adhoc commands
+ Single commands applied to groups
> ansible -i hosts europe -a "uname -a"
> ansible -i hosta frontend -a "/sbin/reboot" -f 3
-i - host file
-a - command

+ actions are either carried out against single units or groups.

**** Playbooks
+ Tell Ansible what to do
+ These are written in YAML
* Tutorial
** [[https://serversforhackers.com/an-ansible-tutorial][Ansible Tutorial - Servers for Hackers]]
** [[https://www.youtube.com/watch?v%3DkHQUzNiKLoU][Introduction to Ansible - Michelle Perz]]
*** What is Ansible
It is a simple automation language that can purfectly describe an IT application infrastructure in Ansible Playbooks.

- cross platform
  - linux, windows, Unix
- Human readable - Yaml
- Version Controlled
  - playbooks are plain-text
    
+ Batteries included
Ansible comes bundled with hundreds of modules

+ Ansible - Complete Automation - All can be done with Ansible
  - App deployment
    - Fabric
    - Capistrano
    - Nolio
  - Multi-Tier Orchestration
    - BMC
    - Mcollective
    - Chef Metal
  - Configuration Management
    - Chef
    - Puppet
    - CFEngine
  - Provisioning
    - Clobber
    - AWS
    - JuJu

*** Installing Ansible 
#+BEGIN_SRC sh
pip install ansible
yum install ansible
apt-get install ansible
#+END_SRC
    
- Playbooks are written in YAML
  - the playbook is executed sequentially
  - invoking ansible modules
  - Modules are "tools in the toolkit"
    - can be written in any language that can be executed in the shell of target machine

*** Key components
+ Inventory
  - these will be the collections of machines
  - example
    - [web]
       webserver1.example.com
       webserver2.example.com

      [db]
      dbserver1.example.com
      
*** Modules
Modules are bits of code transferred to the target system and executed to satisfy the task 
- apt/yum	- service
- copy 		- synchronize
- file 		- template
- get_url 	- uri
- git 		- user
- ping 		- wait_for
- debug 	- assert

- All modules are indexed at http://docs.ansible.com
  
+ Run Cmds
If ansible doesn't have a module that suits your needs there are the "run cmds"
- command
  - takes the cmd and executes it.
- shell
  - executes through a shell like /bin/bash
- script
  - runs a local script on a remote node after transferring it
- raw
  - executes a cmd without going through the Ansible module subsystem

*** Ad-Hoc Cmds
Check all my inventory hosts are ready to be managed by Ansible
#+BEGIN_SRC sh
ansible all -m ping
#+END_SRC
    
Run the uptime command on all hosts in the web group
#+BEGIN_SRC sh
ansible web -m command -a "uptime"
#+END_SRC
    
Displays information on hosts
#+BEGIN_SRC sh
ansible localhost -m setup
#+END_SRC

*** Static Inventory Example
#+BEGIN_SRC sh
[control]
control ansible_host=10.42.0.2

[web]
node-1 ansible_host=10.42.0.6
node-2 ansible_host=10.42.0.7
node-3 ansible_host=10.42.0.8

[haproxy]
haproxy ansible_host=10.42.0.100

[all:vars]
ansible_user=vagrant
ansible_ssh_private_key_file=~/.vagrant.d/insecure_private_key
#+END_SRC

*** Variable Precedence
1.  extra vars
2.  task vars
3.  block vars
4.  role and include vars
5.  play vars_files
6.  play vars_prompt
7.  play vars
8.  set_facts
9.  registered vars
10. host facts
11. playbook host_vars
12. playbook group_vars
13. inventory host_vars
14. inventory group_vars
15. inventory vars
16. role defaults
    
*** Tasks
file - a directory should exist
yum - a package should be installed
service - a service should be running
template - render a configuration file from a template
get_url - fetch an archive file from a url
git - clone a source code repo

- Example tasks in a playbook
#+BEGIN_SRC sh
tasks:
  - name: add cache dir
    file:
      path: /opt/cache
      state: directory

  - name: install nginx
    yum:
      name: nginx
      state: latest

  - name: restart nginx
    service:
      name: nginx
      state: restarted
#+END_SRC

- Handler tasks
these are run at the end of a play
#+BEGIN_SRC sh
tasks:
  - name: add cache dir
    file:
      path: /opt/cache
      state: directory

  - name: install nginx
    yum:
      name: nginx
      state: latest
    notify: restart nginx

handlers:
  - name: restart nginx
    service:
      name: nginx
      state: restarted
#+END_SRC

*** Plays and Playbooks
Plays are ordered sets of tasks to execute against host selections from your inventory. 
A playbook is a file containing one or more plays.

*** Roles
Roles are a packages of closely related Ansible content that can be shared more easily than plays alone.
- Improves readability
- Eases sharing
- Enables Ansible content to exist independently of playbooks
- Provides functional conveniences such as file path ersolution and default values

- Example
site.yml
roles/
    common/
        files/
	template/
	tasks/
	handlers/
	vars/
	defaults/
	meta/
    webservers/
        files/
	template/
	tasks/
	handlers/
	vars/
	defaults/
	meta/
#+BEGIN_SRC sh
- hosts: web
  roles:
    - common
    - webservers
#+END_SRC

*** Using Ansible
- ping hosts
#+BEGIN_SRC sh
ansible -i hosts -m ping
#+END_SRC

- check the setup of the host machines
#+BEGIN_SRC sh
ansible -i hosts -m setup
#+END_SRC

- inatall apache on host machines
#+BEGIN_SRC sh
ansible -i hosts -m yum -a "name=httpd state=present" -b
#+END_SRC
If apache is already installed it will not attempt to reinstall

- remove apache on host machines
#+BEGIN_SRC sh
ansible -i hosts -m yum -a "name=httpd state=absent" -b
#+END_SRC

**** Example Playbook
site.yml
#+BEGIN_SRC sh
- name: install and start apache
  hosts: webservers
  become: yes

  tasks:
  - name: install apache
    yum: name=httpd state=present

  - name: start and enable apache
    service: name=httpd state=started enabled=yes
#+END_SRC

- run a playbook
#+BEGIN_SRC sh
ansible-playbook -i hosts site.yml
#+END_SRC

**** Setting up Roles
#+BEGIN_SRC sh
mkdir roles
cd roles
ansible-galaxy init apache
ansible-galaxy init common
ansible-galaxy init db
ansible-galaxy init php
#+END_SRC
ansible-galaxy init cmd will create a directory with the following directories and files:
- READM.md
- /defaults
- /files
- /handlers
- /meta
- /tasks
- /templates
- /tests
- /vars

***** Apache role
/tasks/main.yml
#+BEGIN_SRC sh
- name: install apache
  yum: name=httpd state=present

- name: insert firewalld rule for httpd
  firewalld: port={{httpd_port}}/tcp permanent=true state=enabled immediate=yes

- name: start and enable apache
  service: name=httpd state=started enabled=yes

- name: configuration SELinux to allow httpd to connect to remote database
  seboolean: name=httpd_can_network_connect_db state=true persistent=yes
#+END_SRC

***** Common role
/tasks/main.yml
#+BEGIN_SRC sh

#+END_SRC

/tasks/selinux.yml
#+BEGIN_SRC sh
- name: install python bindings for selinux
  yum: name{{item}} state=present
  with_itmes:
  - libselinux-python
  - libsemanage-pyton

- name: test to see if selinux is running 
  command: getenforce
  changed_when: false
#+END_SRC

/tasks/ntp.yml
#+BEGIN_SRC sh
- name: install ntp
  yum: name=ntp state=present

- name: configure ntp file
  template: src=ntp.conf.j2 dest=/etc/ntp.conf
  notify: restart ntp

- name: start the ntp service
  service: name:ntpd state=started enabled=yes
#+END_SRC

/templates/ntp.conf.j2
#+BEGIN_SRC sh
driftfile /var/lib/ntp/drift

restrict 127.0.0.1
restrict -6 ::1

server {{ ntpserver }}

includefile /etc/ntp/crypto/pw

keys /etc/ntp/keys
#+END_SRC

/handlers/main.yml
#+BEGIN_SRC sh
- name: restart ntp
  service: name=ntpd state=restarted
#+END_SRC

/tasks/main.yml
#+BEGIN_SRC sh
- include: selinux.yml
- include: ntp.yml

- name: start firewalld
  service: name=firewalld state=started enabled=yes
#+END_SRC

***** DB role
/tasks/main.yml
#+BEGIN_SRC sh
- name: install mariadb package
  yum: name={{item}} state=present
  with_items:
  - mariadb-server
  - MySQL-python

- name: configure SELinux to start mariadb on any port
  seboolean: name=mysql_connect_any state=true persistent=yes

- name: create mariadb config file
  template: src=my.cnf.j2 dest=/etc/my.cnf
  notify: restart mariadb

- name: create mariadb log file
  file: path=/var/log/mysql.log stte=touch owner=mysql group=mysql mode=0775

- name: create mariadb PID directory
  file: path=/var/run/mysqld state=directory owner=mysql group=mysql mode=0775

- name: start mariadb service
  service: name=mariadb state=started enabled=yes

- name: insert firewalld rule
  firewalld: port={{mysql_port}}/tcp permanent=true state=enabled immediate=yes

- name: create application database
  mysql_db: name={{dbname}} state=present

- name: create application database user
  mysql_user: name={{dbuser}} password={{upassword}} priv=*.*:ALL host='%' state=present
#+END_SRC

/tmeplates/my.cnf.j2
#+BEGIN_SRC sh
[mysqld]
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock
user=mysql
symbolic-links=0
port={{ mysql_port }}

[mysqld_safe]
log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid
#+END_SRC

/handlers/main.yml
#+BEGIN_SRC sh
- name: restart mariadb
  service: name=mariadb state=restarted
#+END_SRC

***** PHP role
/tasks/main.yml
#+BEGIN_SRC sh
- name: insatll php and git
  yum: name={{item}} state=persent
  with_items:
  - php
  - php-mysql
  - git

- name: copy the code from repo
  git: repo={{repository}} dest=/var/www/html/

- name: create the index.php file
  template: src=index.php.j2 dest=/var/www/html/index.php
#+END_SRC

/templates/index.php.j2
#+BEGIN_SRC sh
<html>
  <head>
    <title>Ansible Application</title>
  </head>
  <body>
    <h1>Hello World</h1>
  <?php
    Print "Hello, World! I am a webserver configued using Ansible";
  ?>
  </body>
</html>
#+END_SRC

**** site.yml
#+BEGIN_SRC sh
- name: apply common configuration to all hosts
  hosts: all
  become: yes

  roles:
  - common

- name: configure and deploy the db server
  hosts: dbservers
  become: yes

  roles:
  - db

- name: configure and deploy the web server
  hosts: webservers
  become: yes

  roles:
  - apache
  - php
#+END_SRC

**** Run the playbook
#+BEGIN_SRC sh
ansible-playbook -i hosts site.yml
#+END_SRC

** Linux Academy - Ansible Quick start
Guide: [[file://home/crito/Documents/SysAdmin/Mgmt/Ansible/Linux_Academy-Ansible_All_Playbooks.pdf][LA - Ansible Playbooks]]
Guide: [[file://home/crito/Documents/SysAdmin/Mgmt/Ansible/Linux_Academy-Ansible_Cheatsheet.pdf][LA - Cheatsheet]]

- installation on RHEL
#+BEGIN_SRC sh
yum install ansible git python
#+END_SRC

/etc/ansible/ansible.cfg - this is the systemwide configuration file
#+BEGIN_EXAMPLE
inventory	= /etc/ansible/hosts
sudo_user	= root
#+END_EXAMPLE
these two comments are usually good practices

/etc/ansible/hosts - this file contains the address information for nodes that ansible can connect to

- the ansible user will require root privs without password
visudo
#+BEGIN_EXAMPLE
ansible ALL=(ALL)	NOPASSWD: ALL
#+END_EXAMPLE

- YAML
  - this is the markup language that is used to create the playbooks that ansible uses
#+BEGIN_EXAMPLE
--- # This is a structural YAML example to install HTTPD on CentOS
- hosts: centos
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: yes
  var:
    username: myuser
  tasks:
  - name: Install HTTPD server on CentOS 7 Nodes
    yum:
      name: httpd
      state: latest
    notify:
    - startservice
  handlers:
  - name: startservice
    service:
      name: httpd
      state: restarted
#+END_EXAMPLE  

- the playbook syntax can be checked with
#+BEGIN_SRC sh
ansible-playbook structure.yaml --syntax-check
#+END_SRC

- to gather information from a host
#+BEGIN_SRC sh
ansible host_name -m setup
#+END_SRC
this will pull a huge amount of data

- information can be filtered with the filter option
#+BEGIN_SRC sh
ansible host_name -m setup -a 'filter=*ipv4*'
#+END_SRC

** Linux Academy - Red Hat Certificate of Expertise in Ansible Automation Prep Course
*** YAML Refresher
YAML Ain't Markup Language
  - distinguish it's purpose as data-orientated, rather than as document markup
  - Ansible prefers spaces to tabs
  --- this at the top of an ansible file denotes that it is a configuration file
  
  - A dash indicates files that should be included in the configuration
    #+BEGIN_EXAMPLE
    vars_files:
    - conf/copyright.yml
    - conf/webdefaults.yml
    #+END_EXAMPLE
    
- Example playbook.yml
#+BEGIN_EXAMPLE
---

- colours:
    - red
    - orange
    - blue
    
- cars:
    - ford
    - mazda
    
#+END_EXAMPLE
makesure that spaces are used instead of tabs

- simple example playbook
#+BEGIN_EXAMPLE
--- # Comment line

- hosts: apacheweb
  user: ansible
  sudo: yes
  connection: ssh 
  gater_facts: no
  tasks:
    - name: Install apache
      action: yum name=httpd state=installed
#+END_EXAMPLE

*** Creating Lab Servers

- Building the Lab Server
  - one ansible control server
  - two servers (nodes)
    - add the control server priv ssh key to the nodes
    - the control server will need root privs (sudo)
      
- Installing ansible on the control server (RHEL|Centos)
#+BEGIN_SRC sh
yum -y install epel-release
yum -y install git python-pip ansible
#+END_SRC

- ansible files
/etc/ansible/
  - ansible.cfg
    - this provides parameters that determine how ansible will work
  - hosts
    - this specifies what machines that we will connect to
      
hosts
#+BEGIN_EXAMPLE
[centos]
mikehatter1.labserver.com
mikehatter2.labserver.com
mikehatter3.labserver.com

[database]
mikehatter2.labserver.com
#+END_EXAMPLE

- create an ansible user on server1,2 and 3
#+BEGIN_SRC sh
useradd ansible
passwd ansible
visudo
#+END_SRC

/etc/sudoers
#+BEGIN_EXAMPLE
ansible		ALL=(ALL)	NOPASSWD:ALL
#+END_EXAMPLE
this will mean that the ansible user won't require a password for sudo

- ssh-copy to server 2 and 3
#+BEGIN_SRC sh
ssh-copy-id ansible@mikehatter2.labserver.com
ssh-copy-id ansible@mikehatter3.labserver.com
#+END_SRC

- ssh-copy to server 1
#+BEGIN_SRC sh
ssh-copy-id ansible@mikehatter1.labserver.com
#+END_SRC
this will create the .ssh/authorized_keys file on the control server

- now test the connection to the node servers
- test ansilbe can connect to the nodes
#+BEGIN_SRC sh
ansible all -m ping
#+END_SRC

*** These are the core components in Ansible

- Inventories
  - Static or local /etc/ansible/hosts
  - can be called from a different file via the -i option
  - can be dynamic, can be provided via an application
    
- Modules
  - these are the tools
  - can be run directly(on the cmd line)
  - can be run through playbooks
  
- Variables
  - Customize behavior for different systems
  - Variables are how we deal with the differences between systems
  - Variable names should be letters, numbers and underscores
  - Variables should always start with a letter
  - Can be defined in the inventory
  - Can be defined in a playbook
  
- Ansible Facts
  - Ansible facts is a way of getting data from systems.
  - You can use these facts in playbook variables.
  - Gathering facts can be disabled in a playbook.
    - It's not always required
    - can speed up execution
      #+BEGIN_EXAMPLE
      - hosts: mainhosts
        gather_facts: no
      #+END_EXAMPLE
    
- Plays and Playbooks
  - Playbooks are the instruction manuals
  - A play is a task
    
- Configuration Files
  - default /etc/ansible/ansible.cfg
  - options can be enabled or disabled in the config file
  - config file is read when a playbook is run
  - order of config files
    1. ANSIBLE_CONFIG(an env var)
    2. ansible.cfg(in the current dir)
    3. ansible.cfg(in the home dir)
    4. /etc/ansible/ansible.cfg
       
- Templates
  - definition and set of parameters for running an Ansible job
  
- Handlers
  - used to handle error condition
    
- Roles
  - roles can be thought of as a playbook that has been split into multiple files

- Ansible Vault
  - secure store
  - passwords
  - encrypted files
  - command line tool ansible-vault is used to edit files
  - command line flag is used --ask-vault-pass or --vault-password-file
    
*** What is an ad-hoc command
    
- These are quick tasks


- example would be quickly restart all the servers in a developers lab
/etc/ansible/hosts
#+BEGIN_SRC 
[centos]
mikehatter1.labserver.com
mikehatter2.labserver.com
mikehatter3.labserver.com

[database]
mikehatter2.labserver.com

[test_one]
mikehatter1.labserver.com
mikehatter2.labserver.com
#+END_SRC
test one removes the control server from the group

reboot the test_one group
#+BEGIN_SRC sh
ansible test_one -b -a "/usr/sbin/reboot"
#+END_SRC
a - module arguments
b - become root

*** Ad-hoc commands continued
- ping all machines
#+BEGIN_SRC sh
ansible all -m ping
#+END_SRC

- run ls on a directory on all servers
#+BEGIN_SRC sh
ansilbe all -a "ls -l /home/ansible"
#+END_SRC

- check meassages on the db server
#+BEGIN_SRC sh
ansible databases -a "ls /var/log/messages"
ansible databases -a "tail /var/log/messages"
#+END_SRC

- view users root directory (requires root privs)
#+BEGIN_SRC sh
ansible -b -a "ls /root"
#+END_SRC

- Install elinks
#+BEGIN_SRC sh
ansilbe -b -m yum -a "name=elinks state=latest"
#+END_SRC

- Remove elinks
#+BEGIN_SRC sh
ansilbe -b -m yum -a "name=elinks state=absent"
#+END_SRC

*** Further Discussions about the ansible command
    
- creating a hosts file myhosts
#+BEGIN_EXAMPLE
[hosts]
mikehatter2.labserver.com
#+END_EXAMPLE

- use the myhosts file
#+BEGIN_SRC sh
ansible hosts -i myhosts -m ping
#+END_SRC
i - specifiy the hosts file

- check space on the server
#+BEGIN_SRC sh
ansible -i myhosts hosts -a "df -h"
#+END_SRC

- install package
#+BEGIN_SRC sh
ansilbe -i myhosts hosts -b -m yum -a "name=elinks state=latest"
#+END_SRC

- pull information from the server
#+BEGIN_SRC sh
ansilbe -i myhosts hosts -m setup -a 'filter=ansible_default_ipv4'
#+END_SRC
this will provide use with the ipv4 information of the server

myhosts
#+BEGIN_EXAMPLE
[hosts]
mikehatter2.labserver.com folder=/home/ansilbe
#+END_EXAMPLE

- use the created variable "folder"
#+BEGIN_SRC sh
ansible -i myhosts hosts -a "ls -l {{ folder }}"
#+END_SRC

- fork the ansible process (max 5 by default)
#+BEGIN_SRC sh
ansible all -a "ls -l" -f 100
#+END_SRC
this will fork upto 100 processors, it doesn't create more processors than it requires

- become a different user
#+BEGIN_SRC sh
ansible databases -b -a "touch testfile" --become-user tempuser
#+END_SRC

- copy files
#+BEGIN_SRC sh
ansible databases -m copy -a "src=/home/.zshrc dest=/home/.zshrc"
#+END_SRC

- set file permissions
#+BEGIN_SRC sh
ansilbe databases -m file -a "dest=./testfile mode=600"
#+END_SRC

* Books
[[file://home/crito/Documents/DevOps/Automation/Ansible/Ansible-From_Beginner_to_Pro.pdf][Ansible - From Beginner to Pro]]
** [[file://home/crito/Documents/SysAdmin/Mgmt/Ansible/Ansible_Playbook_Essentials.pdf][Ansible Playbook Essentials - Packt]]
     - [[https://github.com/schoolofdevops/ansible-playbook-essentials][Github - files for book]]

[[file://home/crito/Documents/SysAdmin/Mgmt/Ansible/Ansible-Up_&_Running.pdf][Ansible-Up & Running]]
[[file://home/crito/Documents/SysAdmin/Mgmt/Ansible/Ansible_for_DevOps.pdf][Ansible for DevOps]]

** [[file://home/crito/Documents/SysAdmin/Mgmt/Ansible/Ansible_Up_and_Running.pdf][Ansible Up & Running]]
** [[file://home/crito/Documents/SysAdmin/Mgmt/Ansible/Ansible_for_DevOps.pdf][Ansible for DevOps]]

** [[file://home/crito/Documents/SysAdmin/Mgmt/Ansible/LA-Redhat_Ansible_Automation_Study_Guide.pdf][Linux Academy Red Hat Certificate of Expertise in Ansible Automation]]
** [[file://home/crito/Documents/DevOps/Automation/Ansible/Linux_Academy-Example_Roles.pdf][Linux Academy - Example Roles]]
** [[file://home/crito/Documents/DevOps/Automation/Ansible/Linux_Academy-Ansible_Playbooks.pdf][Linux Academy - Ansible Playbooks]]
* Links
[[https://galaxy.ansible.com/][Ansible Galaxy - A git for sharing roles]]
[[https://www.ansible.com/get-started][Ansible - Get Started]]




* ansible-playbook 
* Modules
** acl

#+BEGIN_EXAMPLE
--- # ACL Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Install Access Control List Utilities
    yum: pkg=acl state=present
  - name: Get ACL information on the /etc/test.acl.txt remote file
    acl: name=/etc/test.acl.txt
    register: aclinfo
  - debug: msg={{ aclinfo }}
  - name: change permissions on the /etc/test.acl.txt remote file
    acl: name=/etc/test.acl.txt entity=ansible etype=user permissions="rw" state=present
    register: new_acl
  - debug: msg={{ new_acl }}
#+END_EXAMPLE

** apache2_module
docs: https://docs.ansible.com/ansible/latest/modules/apache2_module_module.html

This is used for debian/ubuntu machines, and does the actions of a2enmod and a2dismod

#+BEGIN_EXAMPLE
--- # Apache2 Module Example
- hosts: aptserver
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Disable the alias module in Apache2
    apache2_module: state=absent name=alias force=yes
  - name: Enable the alias module in Apache2
    apache2_module: state=present name=alias force=yes
#+END_EXAMPLE 

** at
docs: https://docs.ansible.com/ansible/latest/modules/at_module.html

This will require that you install "at" on the remote machine
#+BEGIN_EXAMPLE
--- # At Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Example of a future command with the AT module                                      
    at:
      command: /usr/bin/uptime > /home/ansible/at.log                                         
      count: 1
      units: minutes
#+END_EXAMPLE

** apt

#+BEGIN_EXAMPLE
--- # Apt Module Example
- hosts: aptserver
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Install Apache Web Server
    apt: pkg=apache2 state=present
#+END_EXAMPLE
- state
  - present (apt-get install)
  - installed - this is deprecated and will not be available after V2.0(apt-get install)
  - absent (apt-get install)
    
- update and upgrade
#+BEGIN_EXAMPLE
--- # Apt Module Example
- hosts: aptserver
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: apt-get update
    apt: update_cache=yess
  - name: apt-get upgrade
    apt: upgrade=dist
#+END_EXAMPLE

** apt_key and apt_repository

These two keys normally work together   

#+BEGIN_EXAMPLE
--- # Apt_Repository and Apt_Key Modules Example
- hosts: aptserver
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Install a sependency needed for apt_repository
    apt: pkg=python-apt state=present
  - name: Add the key
    apt_key: url=https://dl-ssl.google.com/linux/linux_signing_key.pub state=present
  - name: Add the Google Repo for Ubuntu
    apt_repository: repo='deb http://dl.google.com/linux/deb/ stable main non-free' state=present
#+END_EXAMPLE

** archive
Docs: http://docs.ansible.com/ansible/latest/modules/archive_module.html

** command
Docs: https://docs.ansible.com/ansible/latest/modules/command_module.html

Examples:
- disable selinux
#+BEGIN_EXAMPLE
---
- hosts: all
  become: yes
  tasks:
    - name: disable selinux
      command: /sbin/setenforce 0
#+END_EXAMPLE

- running a script on a remote server
#+BEGIN_EXAMPLE
--- # Command Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Check for python packages
    command: /home/ansible/testing/test.sh
    args:
      chdir: /home/ansible/testing
#+END_EXAMPLE
- args - we add here the chdir as it would be run in the users ~/ if not specified

** copy
Docs: https://docs.ansible.com/ansible/latest/modules/copy_module.html

- copy a file on the same machine
#+BEGIN_EXAMPLE
[ansible@fredflintstone Playbooks]$ ansible apacheweb -m copy -a 'src=/etc/fstab dest=/tmp/fstab'
fredflinstone5.mylabserver.com | SUCCESS => {
    "changed": true, 
    "checksum": "b206c32ffa57f21effc2310c5f3840b90e7a9a51",                                   
    "dest": "/tmp/fstab", 
    "gid": 1003, 
    "group": "ansible", 
    "md5sum": "575dd077c549bf827cd7e6b7857a1f8f",                                             
    "mode": "0664", 
    "owner": "ansible", 
    "secontext": "unconfined_u:object_r:user_home_t:s0",                                      
    "size": 342, 
    "src": "/home/ansible/.ansible/tmp/ansible-tmp-1532119740.98-124969415580287/source",     
    "state": "file", 
    "uid": 1002
}
#+END_EXAMPLE

- copy a file to a remote host/s
copy.yml
#+BEGIN_EXAMPLE
--- # Copy Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Copy from the files directory test file
    copy: src=/tmp/test4.txt dest=/home/ansible/test4.txt mode=0655 owner="ansible" group="ansible" backup=yes
#+END_EXAMPLE
- backup - this will makesure that if a file with the same name is found on the remote host it will be mv to <original_name><time_stamp> so files won't just be over written

** cron

#+BEGIN_EXAMPLE
--- # Cron Module Example
- hosts: apacheweb
  user: ansible
  connection: ssh
  gather_facts: no
  tasks:
  #- name: Add a CRON job to the ansible user
   # cron: name="list files" minute="0" hour="1" job="ls -al /etc > /home/ansible/cronresult.log"
  - name: Remove the cronjob
    cron: name="list files" state=absent
#+END_EXAMPLE
makesure that become isn't set as this will cause the cronjob to be set as root and not as the user

** dnf
Similar to the yum module in use
#+BEGIN_EXAMPLE
--- # DNF Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Installing Apache Web Server with DNF
    dnf: pkg=httpd state=present
  - name: Remove the Apache Web Server
    dnf: pkg=httpd state=absent
  - name: dnf update
    dnf: name=* state=latest
#+END_EXAMPLE

** debug

- We can use the debug module to provide more information to our playbooks
#+BEGIN_EXAMPLE
--- # Debug Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Install Apache Web Server
    yum: pkg=httpd state=installed
  - debug: msg="Equivalent of sudo yum install httpd"
  - name: How Long has the system been up?
    shell: /usr/bin/uptime 
    register: result
  - name: Print result 
    debug: var=result
#+END_EXAMPLE
in the second example uptime would have run but we would have seen no output, so we use register to save the output to a variable and use this variable with debug to provide us with the information

** fetch
   
#+BEGIN_EXAMPLE
--- # Fetch Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: yes
  tasks:
  - name: Copy remote hosts file to control server
    fetch: src=/etc/hosts dest=/home/ansible/prefix-{{ ansible_hostname }} flat=yes
#+END_EXAMPLE
- flat - if not used we would have had /home/ansible/{{ ansible_hostname }}/etc/hosts, this ensures that we just get the file

** filesystem
docs: https://docs.ansible.com/ansible/latest/modules/filesystem_module.html   

#+BEGIN_EXAMPLE
--- # Filesystem Module Example
- hosts: aptserver
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Format the remote data partition
    filesystem: fstype=ext3 dev=/dev/xvdf1 opts="-cc"
#+END_EXAMPLE
- cc - this performs a block check read write test, and can cause the format to be slow

** file
- view the info/state of a file
#+BEGIN_EXAMPLE
[ansible@fredflintstone4 Playbooks]$ ansible apacheweb -m file -a 'path=/etc/fstab'
fredflintsonte5.mylabserver.com | SUCCESS => {
    "changed": false, 
    "gid": 0, 
    "group": "root", 
    "mode": "0644", 
    "owner": "root", 
    "path": "/etc/fstab", 
    "secontext": "system_u:object_r:etc_t:s0", 
    "size": 342, 
    "state": "file", 
    "uid": 0
}
#+END_EXAMPLE

- create a directory on a remote server
#+BEGIN_EXAMPLE
[ansible@alickmitchell4 Playbooks]$ ansible apacheweb -m file -a 'path=/tmp/test state=directory mode=0700 owner=ansible'
alickmitchell5.mylabserver.com | SUCCESS => {
    "changed": true, 
    "gid": 1003, 
    "group": "ansible", 
    "mode": "0700", 
    "owner": "ansible", 
    "path": "/tmp/test", 
    "secontext": "unconfined_u:object_r:user_tmp_t:s0",                                       
    "size": 6, 
    "state": "directory", 
    "uid": 1002
}
#+END_EXAMPLE

** get_url
Docs: https://docs.ansible.com/ansible/latest/modules/get_url_module.html

This will pull down the specified url
#+BEGIN_EXAMPLE
--- # Get_url Module Example
- hosts: aptserver
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Get and download the INI file from the web server
    get_url: url=http://alickmitchell3.mylabserver.com/mytest.ini dest=/home/ansible/mytest.ini mode=0440
#+END_EXAMPLE

** git
   
#+BEGIN_EXAMPLE
--- # Git Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Install git on remote machine
    yum: pkg=git state=present
  - name: Checking out a git repo on the remote server
    git: repo=https://github.com/linuxacademy/cicd-pipeline-train-schedule-git.git dest=/home/ansible/git_repo
  - shell: /usr/bin/chown -R ansible:ansible git_repo
#+END_EXAMPLE

** group
Docs: http://docs.ansible.com/ansible/latest/modules/group_module.html

#+BEGIN_EXAMPLE
--- # Group Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Add a new group called newgroup
    group: name=newgroup state=present gid=1050
  - name: Remove a group
    group: name=newgroup state=absent
#+END_EXAMPLE
- system=yes - this can be added if the group is a system group

** htpasswd
Docs: https://docs.ansible.com/ansible/latest/modules/htpasswd_module.html

This module requires python-passlib on the target machine

#+BEGIN_EXAMPLE
--- # HTPasswd Module Example
- hosts: aptserver
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Install the python dependencies
    apt: pkg=python-passlib state=present
  - name: Adding a user to web site authentication
    htpasswd: path=/etc/apache2/.htpasswd name=test2 password=password owner=test2 group=test2 mode=0640 state=present
  - name: Removing a user from the web authentication
    htpasswd: path=/etc/apache2/.htpasswd name=test2 state=absent
#+END_EXAMPLE

** lineinfile
Used to replace and add lines to a file
Doce: http://docs.ansible.com/ansible/latest/modules/lineinfile_module.html

** mail
Docs: https://docs.ansible.com/ansible/latest/modules/mail_module.html

#+BEGIN_EXAMPLE

#+END_EXAMPLE

** mount
   
#+BEGIN_EXAMPLE

#+END_EXAMPLE

** mysql_db
   
#+BEGIN_EXAMPLE
--- # MYSQL_db Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Install the Python MySQL Support Libraries
    yum: pkg=MySQL-python state=present
  - name: Create a New Test DB called MyNewDB
    mysql_db: name=MyNewDB state=present login_user=root login_password=123
  - name: Drop the MyNewDB database
    mysql_db: name=MyNewDB state=absent login_user=root login_password=123
  - name: Create a Dump of a DB
    mysql_db: name=MyNewDB state=dump target=/var/lib/mysql/mydbtestbkup.sql login_user=root login_password=123
  - name: Import a Dump to create a New DB
    mysql_db: name=MyImportDB state=import target=/var/lib/mysql/mydbtestbkup.sql login_user=root login_password=123

#+END_EXAMPLE

** mysql_user

#+BEGIN_EXAMPLE
--- # MYSQL_user Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Install the MySQL Python Support Library
    yum: pkg=MySQL-python state=latest
  - name: Create a new user called Bob and give him all access
    mysql_user: name=bob password=123password priv=*.*:ALL state=present login_user=root login_password=123
  - name: Remove user called Bob
    mysql_user: name=bob password=123password priv=*.*:ALL state=absent login_user=root login_password=123
#+END_EXAMPLE

** notify

#+BEGIN_EXAMPLE
--- # Notify Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
    - name: Install Apache Web Server
      yum: pkg=httpd state=present
      notify: Restart HTTPD
  handlers:
    - name: Restart HTTPD # This has to be the same as the notify
      service: name=httpd state=restarted
#+END_EXAMPLE

** pause
- set a pause to confirm the installation of apache
pause.yml
#+BEGIN_EXAMPLE
--- # Pause Example
- hosts: apacheweb
  user: ansible
  become: yes
  gather_facts: no
  tasks:
  - name: Install HTTPD
    yum: pkg=httpd state=installed
  - name: Pausing
    pause:
      prompt: "Make sure the installation is complete..."
  - name: Verifiy lynx installation
    yum: pkg=lynx state=installed
#+END_EXAMPLE

- output
#+BEGIN_EXAMPLE
[ansible@alickmitchell4 Playbooks]$ ansible-playbook pause.yml 

PLAY [apacheweb] ******************************************************************************

TASK [Install HTTPD] **************************************************************************
changed: [alickmitchell5.mylabserver.com]

TASK [Pausing] ********************************************************************************
[Pausing]
Make sure the installation is complete...:
ok: [alickmitchell5.mylabserver.com]

TASK [Verifiy lynx installation] **************************************************************
ok: [alickmitchell5.mylabserver.com]

PLAY RECAP ************************************************************************************
alickmitchell5.mylabserver.com : ok=3    changed=1    unreachable=0    failed=0   
#+END_EXAMPLE
at the [Pausing] ansible will wait until you hit the enter key

- we could also set a timer instead of waiting for user to press the enter key
#+BEGIN_EXAMPLE
--- # Pause Example
- hosts: apacheweb
  user: ansible
  become: yes
  gather_facts: no
  tasks:
  - name: Install HTTPD
    yum: pkg=httpd state=installed
  - name: Pausing
    pause:
      seconds: 3
  - name: Verifiy lynx installation
    yum: pkg=lynx state=installed
#+END_EXAMPLE
this will now wait 3 seconds before continuing

** ping
Ping doesn't take any parameters   
#+BEGIN_EXAMPLE
--- # Ping Module Example
- hosts: all
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Ping all the hosts
    ping:
#+END_EXAMPLE

** raw
This is just executes on the system, but unlike the shell we can't register the output to provide more information (quick dirty method)
#+BEGIN_EXAMPLE
--- # Raw Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Find the system uptime for the 'hosts' above
    raw: /usr/bin/uptime > uptime.log
#+END_EXAMPLE

** script
Docs: https://docs.ansible.com/ansible/latest/modules/script_module.html

#+BEGIN_EXAMPLE
--- # Script Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: run a script against a remote machine
    script: /home/ansible/system_uptime.sh
  - name: run a script but only create the output file if the file doesn't exist
    script: /home/ansible/system_uptime.sh creates=/home/ansible/uptime.log
#+END_EXAMPLE

** seboolean

#+BEGIN_EXAMPLE
--- # SEboolean Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Changing the Boolean for Anonymous Writes on the Web Server that is Persistent
    seboolean: name=httpd_anon_write state=yes persistent=yes
#+END_EXAMPLE

** selinux
   
#+BEGIN_EXAMPLE
--- # SELinux Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Changing SELinux Configuration to Permissive
    selinux: policy=targeted state=permissive
  - name: Changing SELinux Configuration to Disabled
    # This will change to permissive until a reboot has occured for disabled to take effect.
    selinux: state=disabled
#+END_EXAMPLE

** service
Docs: https://docs.ansible.com/ansible/latest/modules/service_module.html

#+BEGIN_EXAMPLE
--- # Service Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: yes
  tasks:
  - name: Install Apache Web Server
    yum: pkg=httpd state=installed
  - name: Start the HTTPD service
    service: name=httpd state=started
  - name: Enable service to start on boot
    service: name=httpd enabled=yes
#+END_EXAMPLE
- state
  - started
  - stopped
  - restarted
  - reloaded

** setfact
   
#+BEGIN_EXAMPLE
--- # Setfact Module Example
- hosts: appserver
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  vars:
    playbook_version: 0.1
  tasks:
  - name: Local Variable Display
    set_fact:
      singlefact: SOMETHING
  - name: Print the playbook variable
    debug: msg={{ playbook_version }}
  - name: Print the set_fact variable
    debug: msg={{ singlefact }}
#+END_EXAMPLE

** setup
- view the current setup of a system
#+BEGIN_SRC sh
ansible dbserver -m setup -a "filter=ansible_hostname"
#+END_SRC

- view the ip addresses of a host
#+BEGIN_SRC sh
ansible apacheweb -m setup -a "filter=ans*ipv4*"
#+END_SRC
we can use wildcards to cut down on the amount of typing needed, this will pull "ansible_all_ipv4_addresses"

- view the fqdn
#+BEGIN_SRC sh
ansible apacheweb -m setup -a "filter=ansible_fqdn"
#+END_SRC

- view interfaces
#+BEGIN_SRC sh
ansible apacheweb -m setup -a "filter=ansible_interfaces"
#+END_SRC

- view distribution information
#+BEGIN_SRC sh
ansible apacheweb -m setup -a "filter=ansible_dist*"
ansible apacheweb -m setup -a "filter=ansible_distribution"
#+END_SRC

- view available memory on a system
#+BEGIN_SRC sh
ansible all -m setup -a 'filter=ansible_memtotal_mb'
#+END_SRC

- view the number of processors
#+BEGIN_SRC sh
ansible all -m setup -a 'filter=ansible_processor_count'
#+END_SRC

- is the machine virtualised
#+BEGIN_SRC sh
ansible all -m setup -a 'filter=ansible_virt*'
#+END_SRC

- create a file that contains the output from the setup module
#+BEGIN_SRC sh
ansible apacheweb -m setup --tree /tmp/fasts_apacheweb
#+END_SRC
this will create a json file with all the system details

- to view the setup output in a more viewable format
#+BEGIN_SRC sh
ansible apacheweb -m setup -a "filter
#+END_SRC

** shell
Docs: https://docs.ansible.com/ansible/latest/modules/shell_module.html

Examples:
- place data into a file
#+BEGIN_EXAMPLE
---
- hosts: all
  tasks:
    - name: data into file
      shell: echo "testing" > testfile
#+END_EXAMPLE

- using a shell cmd with arguments
#+BEGIN_EXAMPLE
--- # Shell Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Executing a remote command - uptime
    shell: /usr/bin/uptime >> uptime.log
    args:
      # move to the logs directory from current position (/home/ansible/logs)
      chdir: logs/
      # only create the file if it doesn't exist (the append will not take place)
      creates: uptime.log
#+END_EXAMPLE

** stat
This module performs similar to the stat cmd
#+BEGIN_EXAMPLE
--- # Stat Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Does a file/directory in a path exist or not?
    stat: path=/home/ansible/abc
    register: p
  - debug: msg="The Path exists and is a Directory"
    when: p.stat.isdir is defined and p.stat.isdir
#+END_EXAMPLE

** unarchive


- This will unarchive a tar file on control to a directory on the target
#+BEGIN_EXAMPLE
--- # Unarchive Module Example 
- hosts: aptserver
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: copy and unarchive a file
    unarchive: src=test.tar.gz dest=/home/ansible/unarchive
#+END_EXAMPLE
- unarchive - this is the directory that the tar file will be extracted to

** user
Docs: http://docs.ansible.com/ansible/latest/modules/user_module.html

#+BEGIN_EXAMPLE
--- # User Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Add the user called tstapache to the apache web client
    user: name=tstapache comment="Test Apache" group=wheel
  - name: Add the user called tstapsche2
    user: name=tstapache2 comment="Test Apache 2" shell=/usr/bin/zsh
  - name: Remove user tstapach2 
    user: name=tstapache2 state=absent remove=yes
#+END_EXAMPLE

** waitfor
- install tomcat and wait until it has started until it continues
#+BEGIN_EXAMPLE
-- # Wait For Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  gather_facts: no
  tasks:
  - name: Installing Apache Tomcat
    yum: pkg=tomcat state=installed
  - name: Waiting for Port 8080 to Listen
    wait_for:
      port: 8080
      state: started
  - name: Verifying Lynx installation
    yum: pkg=lynx state=installed
#+END_EXAMPLE
once we start the tomcat on the apacheweb ansible will continue

** yum
Docs: https://docs.ansible.com/ansible/latest/modules/yum_module.html

#+BEGIN_EXAMPLE
--- # Yum Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Install Apache Web Server
    yum: name=httpd state=present
#+END_EXAMPLE
state
- present/installed (yum install) 
- absent (yum remove) 
- latest(yum upgrade)
  
- Do a system upgrade (yum upgrade)
#+BEGIN_EXAMPLE
--- # Yum Module Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Update System
    yum: name=* state=latest
#+END_EXAMPLE
this will do a full system upgrade

* AWS
Running a simple shell cmd on an ec2 instance
awsshell.yml
#+BEGIN_EXAMPLE
--- # AWS EC2 Instance Communication Shell Command Example
- hosts: aws
  remote_user: ec2-user
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: yes
  tasks:
  - name: Execute a shell command for listing the directory on remote host
    shell: ls -al ~
    register: result
  - name: Display the reults in JSON format
    debug: var=result
#+END_EXAMPLE

** ec2_facts/ec2_metadata_facts
ec2_facts has been renamed ec2_metadata_facts, it will become deprecated as of 2.7

- pull all the aws variables from an instance
#+BEGIN_SRC sh
ansible aws -u ec2-user -b -m ec2_metadata_facts
#+END_SRC


- view what type of instance is being run
awsec2instance.yml
#+BEGIN_EXAMPLE
--- # Gather EC2 Facts from the remote instance(s)
- hosts: aws
  remote_user: ec2-user
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: yes
  tasks:
  - name: Gather the EC2 Facts about running instance(s)
    action: ec2_metadata_facts
  - name: Display the instance type
    debug: msg='{{ ansible_ec2_instance_type }}'
#+END_EXAMPLE

- Only print if the instance is of a certain type
#+BEGIN_EXAMPLE
--- # Gather EC2 Facts from the remote instance(s)
- hosts: aws
  remote_user: ec2-user
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: yes
  tasks:
  - name: Gather the EC2 Facts about running instance(s)
    action: ec2_metadata_facts
  - name: Conditional Display of Instance Type
    debug: msg="This Instance is of type t2.micro"
    when: ansible_ec2_instance_type == 't2.micro'
#+END_EXAMPLE

** ec2_key
#+BEGIN_EXAMPLE
--- # EC2 Key Module Example
- hosts: aws
  remote_user: ec2-user
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: no
  vars_files:
  - files/awscreds.yml
  tasks:
  - name: Create a New Key Pair - MyKeyPairTestAWS
    ec2_key:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      name: MyKeyPairTestAWS
      region: us-east-1
      state: present
#+END_EXAMPLE   
to remove this key just change the state to absent

** ec2

- manage state of an instance
#+BEGIN_EXAMPLE
--- # EC2 Start, Stop, Terminate Module Use Example
- hosts: localhost
  remote_user: ec2-user
  become: yes
  become_method: sudo
  connection: local
  gather_facts: yes
  vars_files:
  #- files/awscreds.yml
  tasks:
  - name: Manage the state of an instance
    ec2:
      aws_access_key "{{ aws_id }}"
      aws_access_key "{{ aws_key }}"
      region: "{{ aws_region }}"
      instance_ids: i-07853e7b6b2a5e517
      state: running
#+END_EXAMPLE

- provisioning a new instance
#+BEGIN_EXAMPLE
--- # EC2 Module Provisioning Example
- hosts: localhost
  connection: local
  remote_user: ec2-user
  become: yes
  become_method: sudo
  gather_facts: yes
  var_files:
  - files/awscreds.yml
  tasks:
  - name: Basic provisioning of two t2.micro EC2 instances
    ec2:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      image: ami-f0091d91
      instance_type: t2.micro
      count: 2
      assign_public_ip: yes
#+END_EXAMPLE

** ec2_ami
- creat an AMI from an existing instance
#+BEGIN_EXAMPLE
--- # EC2_AMI Example for creating a basic AMI template from an existing image                
- hosts: localhost
  remote_user: ec2-user
  become: yes
  become_method: sudo
  connection: local
  gather_facts: no
  vars_files:
  - files/awscreds.yml
  tasks:
  - name: Basic Provisioning of an AMI from our Instance                                      
    ec2_ami:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      instance_id: i-1da8b9d9
      wait: no
      name: mynewami
      tags:
        Name: MyNewAMI
        Service: TestAMIService
    register: isntance
#+END_EXAMPLE

- A more advanced AMI creation
#+BEGIN_EXAMPLE
--- # EC2_AMI Example for customizing an AMI
- hosts: localhost
  remote_user: ec2-user
  become: yes
  become_method: sudo
  connection: local
  gather_facts: no
  vars_files:
  - files/awscreds.yml
  tasks:
  - name: More Advanced Provisioning of an AMI from our Instance
    ec2_ami:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      instance_id: i-1da8b9d9
      wait: no
      name: mynewami2
      tags:
        Name: MyNewAMI2
        Service: TestAMIService2
      device_mapping:
        - device_name: /dev/sdb1
          size: 100
          delete_on_termination: true
          volume_type: gp2
    register: instance
#+END_EXAMPLE

** ec2_ami_copy
- copy an AMI to another region
#+BEGIN_EXAMPLE
--- # ec2_ami_copy Exampl
- hosts: localhost
  remote_user: ec2-user
  become: yes
  become_method: sudo
  connection: local
  gather_facts: no
  vars_files:
  - files/awscreds.yml
  tasks:
  - name: Copy AMI from one region to another
    ec2_ami_copy:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      source_region: "{{ aws_region }}"
      dest_region: us-west-1
      source_image_id: ami-91b6aff0
      wait: no
      name: useastami1
      tags:
        Name: MyNewEastAMI1
        Service: TestEastAMIService1
    register: instance
#+END_EXAMPLE

** ec2_ami_find
- find an ami based on the given text name   
#+BEGIN_EXAMPLE
--- # EC2_AMI_ FiNd Module Example
- hosts: localhost
  connection: local
  become: yes
  remote_user: ansible
  gather_facts: no
  vars_files:
  - files/awscreds.yml
  tasks:
  - name: Find our AMI ID
    ec2_ami_find:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      owner: self
      ami_tags:
        Name: MyNewAMI
      no_result_action: fail
    register: ami_find
  - debug: msg={{ ami_find.results[0].ami_id }}
  - debug: msg={{ ami_find.result[0].name }}
#+END_EXAMPLE

** ec2_group
- create a new security group   
#+BEGIN_EXAMPLE
--- # EC2_Group Module Example
- hosts: localhost
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: no
  vars_files:
  - files/awscreds.yml
  tasks:
  - name: Basic Security Group Creation
    ec2_group:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      name: MyTestLinuxAcademyGroup
      description: This is the EC2_group Demo
      vpc_id: vpc-25f7c249
      rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
#+END_EXAMPLE

** ec2_metric_alarm
- set up a cloudwatch alert   
#+BEGIN_EXAMPLE
--- # EC2 Metric Alarm Module Example
- hosts: localhost
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: local
  gather_facts: no
  vars_files:
  - files/awscreds.yml
  tasks:
  - name: Create a Basic CPU Alarm
    ec2_metric_alarm:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      state: present
      name: ourFirstAlarmTest
      metric: "CPUUtilisation"
      namespace: "AWS/EC2"
      statistic: Average
      comparison: ">="
      threshold: 25.0 # percent
      period: 300 #seconds
      evaluation_periods: 6
      unit: "Percent"
      description: "This alarm fires when CPU is greater than 25% for 30 minutes"
      dimensions: {'InstanceID':'i-lda8b9d9'}
#+END_EXAMPLE

** ec2_remote_facts
- get the facts on all the ec2 instances   
#+BEGIN_EXAMPLE
--- # EC2 Remote Facts Module Example
- hosts: localhost
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: local
  gather_facts: no
  vars_files:
  - files/awscreds.yml
  tasks:
  - name: Gather facts of all running EC2 instances
    ec2_remote_facts:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
    register: remote_facts
  - debug: msg={{ remote_facts }}
#+END_EXAMPLE

** ec2_snapshot
- create a snapshot of the root volume of an instance   
#+BEGIN_EXAMPLE
--- # EC2 Snapshot Module Example
- hosts: localhost
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: local
  gather_facts: no
  vars_files:
  - files/awscreds.yml
  tasks:
  - name: Take a snapshot of the running instance root volume
    ec2_snapshot:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      instance_id: i-1da8b9d9
      device_name: /dev/xvda
      description: Root Volume Snapshot Taken During Ansible Course
      wait: no
    register: snapshot
#+END_EXAMPLE

- delete the snapshot
#+BEGIN_EXAMPLE
--- # EC2 Snapshot Module Example
- hosts: localhost
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: local
  gather_facts: no
  vars_files:
  - files/awscreds.yml
  tasks:
  - name: Take a snapshot of the running instance root volume
    ec2_snapshot:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      snapshot_id: snap-707a342a
      state: absent
      wait: no
    register: snapshot
#+END_EXAMPLE

** ec2_vol

- create a vol and attache to an instance   
#+BEGIN_EXAMPLE
--- # EC2 VOL Module Example
- hosts: localhost
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: local
  gather_facts: no
  vars_files:
  - files/awscreds.yml
  tasks:
  - name: Create a new volume and attach to running instance
    ec2_vol:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      instance: i-1da8b9d9
      volume_size: 1
      device_name: sde
    register: volume_result
#+END_EXAMPLE

- pull the infomation on instance volumes 
#+BEGIN_EXAMPLE
--- # EC2 VOL Module Example
- hosts: localhost
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: local
  gather_facts: no
  vars_files:
  - files/awscreds.yml
  tasks:
  - name: Create a new volume and attach to running instance
    ec2_vol:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      instance: i-1da8b9d9
      state: list
    register: volume_result
  - debug: msg={{ volume_result }}
#+END_EXAMPLE

** ec2_tags
- add a tag to a volume   
#+BEGIN_EXAMPLE
--- # EC2 Tag Module Example
- hosts: localhost
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: lcoal
  gather_facts: no
  vars_files:
  - files/awscreds.yml
  tasks:
  - name: Label an existing volume so we know what it is
    ec2_tags:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      resource: vol-8baa327c
      state: present
      tags:
        Name: data_volume
    register: voltags
#+END_EXAMPLE

** ec2_vpc
- create a new vpc that uses 10.2.1.0/24 subnet    
#+BEGIN_EXAMPLE
--- # EC2 VPC Module Example
- hosts: localhost
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: local
  gather_facts: no
  vars_files:
  - files/awscreds.yml
  tasks:
  - name: Create a Basic VPC using the 10.x.x.x Private network range
    ec2_vpc:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      state: present
      cidr_block: 10.2.1.0/24
   register: vpcblock
#+END_EXAMPLE

** ec2_vpc_net
- create a new vpc    
#+BEGIN_EXAMPLE
--- # EC2 VPC_NET Module Example
- hosts: localhost
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: local
  gather_facts: no
  vars_files:
  - files/awscreds.yml # this is used due to a bug at the time
  tasks:
  - name: Create a new vpc called myNewVPC
    ec2_vpc_net:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      name: myNewVPC
      state: present
      cidr_block: 172.17.1.0/24
    register: vpcnetblock
  - debug: msg=vpcnetblock
#+END_EXAMPLE

** ec2_vpc_net_facts
- print all information on VPCs to the screen in JSON format   
#+BEGIN_EXAMPLE
--- # EC2 VPC Net Facts Example
- hosts: localhost
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: local
  gather_facts: no
  vars_files:
  - files/awscreds.yml
  tasks:
  - name: Get Information about our VPCs
    ec2_vpc_net_facts:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
    register: vpcnetfacts
  - debug: msg=vpcnetfacts
#+END_EXAMPLE

- print the facts of a specific vpc
#+BEGIN_EXAMPLE
--- # EC2 VPC Net Facts Example
- hosts: localhost
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: local
  gather_facts: no
  vars_files:
  - files/awscreds.yml
  tasks:
  - name: Get Information about our VPCs
    ec2_vpc_net_facts:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      filters:
        vpc-id: vpc-11727674
    register: vpcnetfacts
  - debug: msg=vpcnetfacts
#+END_EXAMPLE

** iam
- creating new iam users and capturing their secret access keys   
#+BEGIN_EXAMPLE
--- # AWS IAM Module example
- hosts: localhost
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: local
  gather_facts: no
  vars_files:
  - files/awscreds.aws
  tasks:
  - name: Create a couple of IAM Users
    iam:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      iam_type: user
      name: "{{ itme }}"
      state: present
      password: "password"
      access_key_state: create
    with_items:
    - user1
    - user2
    register: output
  - name: Show the JSON Results # we need this to capture the secret_access_keys on creation
    debug: var=output
#+END_EXAMPLE

** s3
- create an S3 bucket and copy files to bucket   
#+BEGIN_EXAMPLE
--- # AWS S3 Module Example
- hosts: localhost
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: local
  gather_facts: no
  vars_files:
  - files/awscreds.yml
  tasks:
  - name: Create an S3 Bucket
    s3:
      aws_access_key: "{{ aws_id }}"
      aws_sectet_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      bucket: uniquename123 # bucket names have to be unique right across AWS
      mode: create
      permission: public-read-write
    register: create_bucket
  - name: Copy the files to the bucket
    s3:
      aws_access_key: "{{ aws_id }}"
      aws_sectet_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      bucket: uniquename123 
      object: /Playbooks/aws_iam.yml
      src: /home/ansible/Playbooks/aws_iam.yml
      mode: put
    register: copy_files
  - name: Output of Creation
    debug: var=create_bucket
  - name: Output of Copy
    debug: var=copy_files
#+END_EXAMPLE

* Playbooks
- check the syntax of the playbook before running
#+BEGIN_SRC sh
ansible-playbook example.yml --check
#+END_SRC

- delimiter for hosts in playbooks
#+BEGIN_EXAMPLE
---
- hosts: apacheweb:debian_group:redhat_group
#+END_EXAMPLE
this playbook will be run against all three groups

** Simple file copy
#+BEGIN_EXAMPLE
---
- hosts: local
  tasks:
    - name: Copy ansible inventory file to client
      copy: src=/etc/ansible/hosts dest=/home/ansible/hosts
#+END_EXAMPLE
** Create the file if it doesn't exist and add the line to the file
#+BEGIN_EXAMPLE
---
- hosts: databases
  tasks:
  - name: create file if doesn't exist
    file:
      state: touch
      path: /home/ansible/hostname.conf
  - name: if line not there then add it
    lineinfile:
      state: present
      dest: /home/ansible/hostname.conf
      line: Hostname= {{ ansible_hostname }}
#+END_EXAMPLE
 
** Install apache and add an index.html file with text
#+BEGIN_EXAMPLE
---
- hosts: databases
  become: yes
  tasks:
  - name: install apache
    yum:
      name: httpd
      state: latest
  - name: create file if doesn't exist
    file:
      state: touch
      path: /var/www/html/index.html
  - name: if line not there then add it
    lineinfile:
      state: present
      dest: /var/www/html/index.html
      line: Hostname= {{ ansible_hostname }}
  - name: restart apache
    service:
      name: httpd
      state: reloaded
#+END_EXAMPLE

** Using stdout and stderr to print messages
#+BEGIN_EXAMPLE
---
- hosts: databases
  tasks:
   - name: print stdout
     command: echo "hello there"
     register: hello 
   - debug: msg="stdout={{ hello.stdout }}"
   - debug: msg="stderr={{ hello.stderr }}"
#+END_EXAMPLE

** Print the motd, if empty tell us
#+BEGIN_EXAMPLE
---
- hosts: databases
  tasks:
   - shell: cat /etc/motd
     register: motd_contents
   - debug: msg="stdout={{motd_contents}}"
   - debug: msg="MOTD is EMPTY"
     when: motd_contents.stdout == ""
#+END_EXAMPLE

** Copying a file to a target machine and set the privs
mainapp1.yml
#+BEGIN_EXAMPLE
---
- hosts: databases
  tasks: 
   - name: upload a file to the target if it doesn't exist
     copy:
      src: /opt/program1.sh
      dest: /home/ansible/program1.sh
      mode: 0755
   - name: if line isn't there then add it
     lineinfile:
      state: present
      dest: /home/ansible/program1.sh
      regexp: '^HOSTNANE='
      line: HOSTNAME={{ansible_hostname}}
   - name: Run the program
     shell: /home/ansible/program1.sh
     register: program_output
   - debug: msg="stdout={{program_output}}"
#+END_EXAMPLE

/opt/program1.sh
#+BEGIN_EXAMPLE
#!/bin/bash

HOSTNAME=

echo "Our hostname is $HOSTNAME"
#+END_EXAMPLE

** If a redhat server has installed a certain application
#+BEGIN_EXAMPLE
---
- hosts: databases
  become: yes
  tasks:
   - name: if OS is RHEL install apache
     yum:
      name: httpd
      state: latest
     when: ansible_os_family == "RedHat"
#+END_EXAMPLE

** Creating multiple files on target machine
#+BEGIN_EXAMPLE
---
- hosts: databases
  tasks:
  - name: Multiple Items - "{{ item }}"
    file:
     state: touch
     path: /home/ansible/{{ item }}
    with_items:
     - file_no_1
     - file_no_2
     - file_no_3
#+END_EXAMPLE

** On try to install a service, even if it fails try to start the service
#+BEGIN_EXAMPLE
---
- hosts = databases
  become: yes
  tasks:
   - name: Install MSQL Server
     yum: name=mysql-server state=latest
     ignore_errors: yes
     register: there
   - name: Start the MSQL service
     service: name=mysqld state=started
     register: running
#+END_EXAMPLE
ignore_errors - this means that the script will continue even if it initially fails

** Install applications with the {{ item }} variable
#+BEGIN_EXAMPLE
---
- hosts: local
  become: yes
  tasks:
  - yum: name={{item}} state=installed
    with_items:
      - php
      - php-mysql
      - httpd
#+END_EXAMPLE
** Create a new user and copy a file to their home dir
#+BEGIN_EXAMPLE
---
- hosts: local
  become: yes
  tasks:
  - user:
      name: newuser
      comment: "new user"
  - name: upload file to target if it doesn't exist
    copy:
      src: /opt/program1.sh
      dest: /home/newuser/program1.sh
      mode: 0755
#+END_EXAMPLE

** Copy a file and check the contents for a specific line, if not there add it
#+BEGIN_EXAMPLE
---
- hosts: local
  tasks:
  - name: upload file to target if it doesn't exist
    copy:
      src: /opt/program1.sh
      dest: /home/ansible/program1.sh
      mode: 0755
  - name: if the line isn't there then add it
    lineinfile:
      state: present
      dest: /home/ansible/program1.sh
      regexp: '^hostname2='
      line: hostname2={{ ansible_hostname }}
#+END_EXAMPLE
** setup a Wordpress site with
The database is already configured on the remote host and httpd is up and running
wp-config.j2 is a copy of wp-config.php with the following changed and the salts added
#+BEGIN_EXAMPLE
// ** MySQL settings - You can get this info from your web host ** //
/** The name of the database for WordPress */
define('DB_NAME', '{{database_name_here}}');

/** MySQL database username */
define('DB_USER', '{{username_here}}');

/** MySQL database password */
define('DB_PASSWORD', '{{password_here}}');

/** MySQL hostname */
define('DB_HOST', '{{dbhost_here}}');
#+END_EXAMPLE

playbook
#+BEGIN_EXAMPLE
---
- hosts: databases
  become: yes
  vars:
    database_name_here: wordpress
    username_here: wordpress
    password_here: wordpress
    dbhost_here: 172.31.110.19
  tasks:
  - name: install php for wp
    yum: name={{item}}
    with_items:
      - php
      - php-gd
      - php-pear
      - php-mysql
  - name: restart httpd
    service: name=httpd state=restarted
  - unarchive:
      src: https://wordpress.org/latest.tar.gz
      dest: /tmp/
      remote_src: True
  - name: remove html folder
    command: /usr/bin/rm -rf /var/www/html
  - name: move wp
    command: /usr/bin/mv /tmp/wordpress/ /var/www/html
  - name: copy template to host
    template: src=wp-config.j2 dest=/var/www/html/wp-config.php
#+END_EXAMPLE

** Pulling the servers date and time facts
#+BEGIN_EXAMPLE
---
- hosts: databases
  tasks:
    - debug: msg="The Server Date is {{ ansible_date_time.date }} Time is {{ ansible_date_time.hour }}:{{ ansible_date_time.minute }}"
#+END_EXAMPLE

** Pulling the OS distribution and Version
#+BEGIN_EXAMPLE
---
- hosts: databases
  tasks:
    - debug: msg="The Server OS at {{ ansible_default_ipv4.address }} is {{ ansible_distribution }} Version {{ ansible_distribution_major_version }}"
#+END_EXAMPLE

** Find the ip address of a group of servers
#+BEGIN_EXAMPLE
---
- hosts: all
  tasks:
    - debug: msg="The Server's IP address is {{ ansible_default_ipv4.address }}"
#+END_EXAMPLE

** Using your own facts
- create your own facts in /etc/ansible/facts.d/preference.fact
#+BEGIN_EXAMPLE
[general]
private_fact=bugs
other_fact=bunny
#+END_EXAMPLE

- uses these now in a playbook
#+BEGIN_EXAMPLE
---
- hosts: local
  tasks:
    - debug: msg="{{ansible_local.preference}}"
#+END_EXAMPLE

- the output
#+BEGIN_EXAMPLE
PLAY [local] **********************************************************************************

TASK [Gathering Facts] ************************************************************************
ok: [localhost]

TASK [debug] **********************************************************************************
ok: [localhost] => {
    "msg": {
        "general": {
            "other_fact": "bunny", 
            "private_fact": "bugs"
        }
    }
}

PLAY RECAP ************************************************************************************
localhost                  : ok=2    changed=0    unreachable=0    failed=0   
#+END_EXAMPLE

** Serialization/Parallelism of processors
- make the playbook connect to more machines at once
#+BEGIN_EXAMPLE
---
- hosts: ec2
  become: yes
  serial: 10
  tasks:
  - name: install elinks
    yum: name=elinks state=lastest
#+END_EXAMPLE
Now instead of ansible using the default 5, it will connect to 10 at a time

- instead of using numbers you can use a percent, this will use the selected percentage of the hosts
#+BEGIN_EXAMPLE
---
- hosts: ec2
  become: yes
  serial: "30%"
  tasks:
  - name: install elinks
    yum: name=elinks state=lastest
#+END_EXAMPLE

- it can also be split into batches
#+BEGIN_EXAMPLE
---
- hosts: ec2
  become: yes
  serial:
   - 1
   - 5
   - 10
  tasks:
  - name: install elinks
    yum: name=elinks state=lastest
#+END_EXAMPLE
- first would only run one machine, then 5, then 10 and continue with this sequence until all the hosts have been administered

** Adding Variables to a playbook
- setting variables using a vars section
#+BEGIN_EXAMPLE
---
- hosts: appserver
  vars:
    control_server: frank1.mylabserver.com
    web_root: /var/www/html
  tasks:
  - name: Install elinks on App
    yum: pkg=elinks state=installed update_cache=true
#+END_EXAMPLE

- setting variables using a variable file
#+BEGIN_EXAMPLE
---
- hosts: appserver
  vars_files:
  - vars.yml
  tasks:
  - name: Install elinks on App
#+END_EXAMPLE

vars.yml
#+BEGIN_EXAMPLE
---
control_server: frank1.mylabserver.com
web_root: /var/www/html

#+END_EXAMPLE

** Steping through a playbook
we can decide to start our play book from a specific point
#+BEGIN_EXAMPLE
--- # Start At Playbook Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Install Telnet
    yum: pkg=telnet state=latest
  - name: Install Lynx
    yum: pkg=lynx state=latest
  - name: List Home
    command: ls -la /home/ansible
    register: result
  - debug: var=result
#+END_EXAMPLE

- to start at "Install Lynx"
#+BEGIN_SRC sh
ansible-playbook startat.yml --start-at-task='Install Lynx'
#+END_SRC

- have ansible ask if we would like a step to be run
#+BEGIN_SRC sh
ansible-playbook startat.yml --step
#+END_SRC

** Passing variables to a playbook from the command line
we will create a playbook that will require variables to provided at the cmd line

#+BEGIN_EXAMPLE
--- # Variables at the cmd line passing example
- hosts: '{{ hosts }}'
  user: '{{ user }}'
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Install some pkg
    yum: pkg={{ pkg }} state=latest
#+END_EXAMPLE

- we would run this at the cmd line as follows
#+BEGIN_SRC sh
ansible-playbook fromcmdline.yml --extra-vars "hosts=apacheweb user=ansible pkg=telnet"
#+END_SRC
this will use the host apacheweb, user ansbile and install telnet

** Runonce
This will run a command against the first server that "ansible all --list-hosts" prints only

#+BEGIN_EXAMPLE
--- # RUNONCE PLAYBOOK EXAMPLE
- hosts: all
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
    - name: Run the uptime command on all hosts and log it
      raw: /usr/bin/uptime >> /home/ansible/uptime.log
    - name: List the /var directory and log it
      raw: ls -al /var >> /home/ansible/dir.list
      run_once: true
#+END_EXAMPLE
this will run uptime on all the servers, but only "ls -al /var" on one server

** Local Actions
These are playbooks that are run on the local machine and will not run over ssh

#+BEGIN_EXAMPLE
--- # LOCAL ACTION PLAYBOOK
- hosts: 127.0.0.1
  connection: local
  tasks:
    - name: Install Telnet Client
      yum: pkg=telnet state=latest
#+END_EXAMPLE
This will be run as the user that calls it, they will require root privs as yum is used (or sudo, or add -b to the ansbile-playbook cmd)

*** Perform an action on localhost before hosts
- from localhost ping frankflintstone5
#+BEGIN_EXAMPLE
--- # LOCALACTION DEMO
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
  - name: Ping application server before we run our install                                   
    local_action: command ping -c 5 frankflintstone5
  - name: Install Lynx on remote server
    yum: pkg=lynx state=latest
#+END_EXAMPLE

- output
#+BEGIN_EXAMPLE
[ansible@alickmitchell4 Playbooks]$ ansible-playbook localaction.yml
                           
PLAY [apacheweb] ******************************************************************************

TASK [Ping application server before we run our install] **************************************
changed: [frankflintstone5.mylabserver.com -> localhost]

TASK [Install Lynx on remote server] **********************************************************
changed: [frankflintstone5.mylabserver.com]

PLAY RECAP ************************************************************************************
frankflintstone5.mylabserver.com : ok=2    changed=2    unreachable=0    failed=0
#+END_EXAMPLE
we can see with the -> localhost that instead of running the ping on the remote host it was performed on the localhost

** Delegate to
- this is similar to local actions
#+BEGIN_EXAMPLE
--- # DELEGATE TO FUNCTION DEMO
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: yes
  tasks:
  - name: Run a remote ping against the application server
    command: ping -c 4 alickmitchell6
    delegate_to: 127.0.0.1
  - name: Install a package
    yum: pkg=lynx state=latest
#+END_EXAMPLE
we could delegate to any server other than the localhost though

** Loops

** Conditionals

** Until
This will continue to check the remote server until it response the the service is running
#+BEGIN_EXAMPLE
--- # Until Example
- hosts: apacheweb
  sudo: yes
  connection: ssh
  user: ansible
  gather_facts: no
  tasks:
    - name: Install Apache Web Server
      yum: pkg=httpd state=latest
    - name: Verify Server Status
      shell: systemctl status httpd
      register: result
      until: result.stdout.find("active (running)") != -1
      retries: 5
      delay: 5
    - debug: var=result
#+END_EXAMPLE
this will be tried 5 times

** Notify
#+BEGIN_EXAMPLE
--- # My First YAML Playbook
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  vars:
    playbook_version: 0.1b
  vars_files:
    - conf/copyright.yml
    - conf/webdefaults.yml
  vars_prompt:
    - name: pkg_name
      prompt: Web Domain
  tasks:
    - name: Install Apache Web Server
      action: yum name=httpd state=installed
      notify: Restart HTTPD
  handlers:
    - name: Restart HTTPD # This has to be the same as the notify                             
      action: service name=httpd state=restarted
#+END_EXAMPLE

** Prompt
- this will prompt the user to enter the required pkg and install it, if no pkg is entered then telnet is installed by default
#+BEGIN_EXAMPLE
--- # PROMPT FOR USER PACKAGE EXAMPLE
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  vars:
    playbook_version: 0.01b
  vars_prompt:
    - name: pkgToInstall
      prompt: Install With Package?
      default: telnet
      private: no # if yes it wouldn't be echoed to the screen
  tasks:
    - name: Install the indicated package
      yum: pkg={{ pkgToInstall }} state=latest
#+END_EXAMPLE

** Includes
We will use a file to provide a more module approach to creating a playbook

#+BEGIN_EXAMPLE
--- # INCLUDE TASKS EXAMPLE
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
    - include: plays/packages.yml
    - name: Verify the telnet package is installed
      raw: yum list installed | grep telnet > /home/ansible/pkgs.log
#+END_EXAMPLE

plays/packages.yml
#+BEGIN_EXAMPLE
- name: Install the telnet client
  yum: pkg=telnet state=latest
- name: Install the lynx web browser
  yum: pkg=lynx state=latest
#+END_EXAMPLE

** Tags
Tags allow us to just run specific sections of a playbook

tags.yml
#+BEGIN_EXAMPLE
--- # TAG Functionality Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
    - name: Install the telnet and lynx packages
      yum: pkg={{ item }} state=latest
      with_items:
        - telnet
        - lynx
      tags:
        - packages
    - name: Verify that telnet was installed
      raw: yum list installed | grep telnet > /home/ansible/pkg.log
      tags:
        - verification
#+END_EXAMPLE

- just run the verification section
#+BEGIN_SRC sh
ansible-playbook tags.yml --tags "verification"
#+END_SRC
this wouldn't install the pkgs, but would run the verification section

- skip the verification section
#+BEGIN_SRC sh
ansible-playbook tags.yml --skip-tags "verification"
#+END_SRC

** Basic Error Handling
Using the ignore_erors variable we can makesure that if our playbook was to fail at a specific point it would continue with the play and not dump out
#+BEGIN_EXAMPLE
--- # Error Handling Example
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: no
  tasks:
    - name: Execute a command that will fail
      command: /bin/false
      ignore_errors: yes
    - name: Install telnet
      yum: pkg=telnet state=latest
#+END_EXAMPLE

** Deploy an apache webserver to an EC2 instance, and create an AMI image
*** Initial playbook
aws_apachesrv_pb.yml
#+BEGIN_EXAMPLE
--- # Ansible Playbook to Configure Static Web Server and Use it to Create a new Template
- hosts: aws
  remote_user: ec2-user
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: yes
  tasks:
  - name: Connect to the remote host, update system
    yum: pkg=* state=latest
  - name: Install the HTTPD Server
    yum: name=httpd state=latest
  - name: Deploy the static website
    copy: src=files/index.html dest=/var/www/html/index.html owner=root group=root mode=0655 backup=yes
  - name: Restart the httpd service
    service: name=httpd state=restarted
  - name: Wait for the http port 80 to be listening
    wait_for: host=ec2-54-200-206-39.us-west-2.compute.amazonaws.com port=80 delay=5
  - name: Install WGET to test the site
    yum: pkg=wget state=latest
  - name: Test the site
    shell: /usr/bin/wget http://localhost
    register: site_result
  - name: Display the site output results
    debug: var=site_result


- hosts: localhost
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: local
  gather_facts: no
  vars_files:
  - ../files/awscreds.yml
  tasks:
  - name: Take a snapshot backup of the website directory
    ec2_snapshot:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      instance_id: i-fea24039
      device_name: /dev/sdb
      description: Initial Playbook Static Site Deployment Backup
      wait: no
    register: snapshot_results
  - name: Display the snapshot results
    debug: var=snapshot_results
  - name: Create a New Template AMI from our Instance
    ec2_ami:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      instance_id: i-fea24039
      wait: no
      name: myAnsibleAmiTemplate223
      tags:
        Name: myAnsibleAmiTemplate223
        Service: testAMINTemplatePlaybook223
    register: ami_results
  - name: Display the AMI Creation Results
    debug: var=ami_results
#+END_EXAMPLE
*** Optimized
- this is the optimized version of the playbook    
#+BEGIN_EXAMPLE
--- # Ansible Playbook to Configure Static Web Server and Use it to Create a new Template
- hosts: aws
  remote_user: ec2-user
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: yes
  tasks:
  - name: Execute all Installations
    yum: pkg={{ itme }} state=latest
    with_items:
      - httpd
      - wget
    notify:
      - copySiteFiles
      - restartHTTPD
      - waitForSite
      - testSite
      - displayResults
  handlers
  - name: copySiteFiles
    copy: src=files/index.html dest=/var/www/html/index.html owner=root group=root mode=0655 backup=yes
  - name: restartHTTPD
    service: name=httpd state=restarted
  - name: waitForSite
    wait_for: host=ec2-54-200-206-39.us-west-2.compute.amazonaws.com port=80 delay=5
  - name: testSite
    shell: /usr/bin/wget http://localhost
    register: site_result
  - name: displayResults
    debug: var=site_result


- hosts: localhost
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: local
  gather_facts: no
  vars_files:
  - ../files/awscreds.yml
  tasks:
  - name: Take a snapshot backup of the website directory
    ec2_snapshot:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      instance_id: i-fea24039
      device_name: /dev/sdb
      description: Initial Playbook Static Site Deployment Backup
      wait: no
    register: snapshot_results
    notify:
    - displaySnapshotResults
    - createNewAmiTemplate
    - displayAmiCreationResults
  handlers:
  - name: displaySnapshotResults
    debug: var=snapshot_results
  - name: createNewAmiTemplate
    ec2_ami:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      instance_id: i-fea24039
      wait: no
      name: myAnsibleAmiTemplate223
      tags:
        Name: myAnsibleAmiTemplate223
        Service: testAMINTemplatePlaybook223
    register: ami_results
  - name: displayAmiCreationResults
    debug: var=ami_results
#+END_EXAMPLE
* Roles
** Install an apache webserver
*** roles
~/roles/webservers.yml
#+BEGIN_EXAMPLE
--- # Master playbook to install apache

- hosts: single
  become: yes
  roles:
    - apache-webserver
#+END_EXAMPLE

**** apache-webserver
***** tasks
~/roles/apache-webserver/tasks/main.yml
#+BEGIN_EXAMPLE
- name: Install apache
  yum: pkg=httpd state=latest
  notify: Restart HTTPD
#+END_EXAMPLE
***** handlers
~/roles/apache-webserver/handlers/main.yml
#+BEGIN_EXAMPLE
- name: Restart HTTPD
  service: name=httpd state=restarted
#+END_EXAMPLE

- bring the above to files together into a playbook to install an apache server

** Customize apache
*** roles
- pulling in the install apache from above we will change /var/www/html/index.html to show the hostsname
~/roles/update_apache.yml
#+BEGIN_EXAMPLE
--- # put the hostname in the index.html
- hosts: single
  become: yes
  roles:
    - apache-webserver
    - customize-apache
#+END_EXAMPLE

**** customize-apache
***** tasks
~/roles/customize-apache/tasks/main.yml
#+BEGIN_EXAMPLE
- name: create file if it doesnt exist
  file: state=touch path=/var/www/html/index.html

- name: If hostname not in the file then add it
  lineinfile:
    state: present
    dest: /var/www/html/index.html
    line: Hostname={{ansible_hostname}}
#+END_EXAMPLE

** Install php along with apache
*** roles
- Using role webservers from above and the task, we can create a webserver with php installed
~/roles/install_php.yml
#+BEGIN_EXAMPLE
---

- hosts: single
  become: yes
  roles:
    - apache-webserver
    - install_php
    - customize-apache
#+END_EXAMPLE

**** install_php
~/roles/install_php/tasks/main.yml
#+BEGIN_EXAMPLE
 name: Install php onto server
  yum: name={{itme}} state=latest
  with_items:
    - php
    - php-gd
    - php-pear
    - php-mysql
#+END_EXAMPLE

** Install Word Press
*** roles
~/roles/setup-wordpress.yml
#+BEGIN_EXAMPLE
---
- hosts: single
  become: yes
  roles:
    - apache-webserver
    - install_php
    - wordpress
#+END_EXAMPLE

**** wordpress
***** tasks
~/roles/wordpress/tasks/main.yml
#+BEGIN_EXAMPLE
- unarchive:
    src: https://wordpress.org/latest.tar.gz
    dest: /tmp/
    remote_src: True
- name: remove html folder
  command: /usr/bin/rm -rf /var/www/html
- name: move the wordpress
  command: /usr/bin/mv /tmp/wordpress/ /var/www/html
- name: copy template to the host
  template: src=wp-config.j2 dest=/var/www/html/wp-config.php
#+END_EXAMPLE

***** templates
~/roles/wordpress/templates/wp-config.j2
#+BEGIN_EXAMPLE
<?php
/**
 * The base configuration for WordPress
 *
 * The wp-config.php creation script uses this file during the
 * installation. You don't have to use the web site, you can
 * copy this file to "wp-config.php" and fill in the values.
 *
 * This file contains the following configurations:
 *
 * * MySQL settings
 * * Secret keys
 * * Database table prefix
 * * ABSPATH
 *
 * @link https://codex.wordpress.org/Editing_wp-config.php
 *
 * @package WordPress
 */

// ** MySQL settings - You can get this info from your web host ** //
/** The name of the database for WordPress */
define('DB_NAME', '{{database_name_here}}');

/** MySQL database username */
define('DB_USER', '{{username_here}}');

/** MySQL database password */
define('DB_PASSWORD', '{{password_here}}');

/** MySQL hostname */
define('DB_HOST', '{{dbhost_here}}');

/** Database Charset to use in creating database tables. */
define('DB_CHARSET', 'utf8');

/** The Database Collate type. Don't change this if in doubt. */
define('DB_COLLATE', '');

/**#@+
 * Authentication Unique Keys and Salts.
 *
 * Change these to different unique phrases!
 * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}
 * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.
 *
 * @since 2.6.0
 */
define('AUTH_KEY',         '=N;Gj)Q2V:4}-mD!C~| ~m,xW8q1cx-}ezob,Tx69z04%+^i(hCpq.cTgSZ&Z;*=');
define('SECURE_AUTH_KEY',  'byVQ.8u*6^gd5pqy;bvR0_ko3L|DQ+[mVOD@Z.h7}f%cDP0}-v!,Z2]+%#0efI[u');
define('LOGGED_IN_KEY',    'EpT| %VB&.9}-G4hv[_i&a*B cblG7}0I$gfY}w%fhHRA.gSBY,He<|;}0:2iJ5S');
define('NONCE_KEY',        '?ZB>pQ],DhG?FJHyOwkd``c4QXCt?#e1YHoBo_+X1q9WO`#3AIi8}_GX<Euh-^`5');
define('AUTH_SALT',        'q.C+Aac,Tlwhnje[|2:>X4e3,8dll21y]!f6A|@y|6|T77Yg:,don69-PzKkcU2D');
define('SECURE_AUTH_SALT', 'FdEjus)on?])g:v+g]8P#%Z</CGpw|#8nIiNjF`V4(y:y(I^()|L$L$6+_--TL[`');
define('LOGGED_IN_SALT',   'N^+d}X,.N%a:]V+ -5lZr8:x2{*p~hEG/xQ?+}03b?(#Dm`6zOkroC|?1Z%[o2z+');
define('NONCE_SALT',       '!$hHfzsa&%a;Vk%BVGMv8[{+.(H7l9S{Re7/Of~4 eeoMM@< E68HF;<XsKT^kXc');

/**#@-*/

/**
 * WordPress Database Table prefix.
 *
 * You can have multiple installations in one database if you give each
 * a unique prefix. Only numbers, letters, and underscores please!
 */
$table_prefix  = 'wp_';

/**
 * For developers: WordPress debugging mode.
 *
 * Change this to true to enable the display of notices during development.
 * It is strongly recommended that plugin and theme developers use WP_DEBUG
 * in their development environments.
 *
 * For information on other constants that can be used for debugging,
 * visit the Codex.
 *
 * @link https://codex.wordpress.org/Debugging_in_WordPress
 */
define('WP_DEBUG', false);

/* That's all, stop editing! Happy blogging. */

/** Absolute path to the WordPress directory. */
if ( !defined('ABSPATH') )
        define('ABSPATH', dirname(__FILE__) . '/');

/** Sets up WordPress vars and included files. */
require_once(ABSPATH . 'wp-settings.php');
#+END_EXAMPLE

***** vars
~/roles/wordpress/vars/main.yml
#+BEGIN_EXAMPLE
database_name_here: wordpress
username_here: wordpress
password_here: mypassword
dbhost_here: 172.31.29.21
#+END_EXAMPLE
- the vars will be placed in the template, and the template will be mv into the wp home dir

** Install on both RHEL and Debian
*** roles
webservers.yml
#+BEGIN_EXAMPLE
--- # Master Playbook for Web Servers
- hosts: apacheweb
  user: ansible
  become: yes
  connection: ssh
  gather_facts: yes
  pre_tasks:
  - name: When did the ROLE start
    raw: date > /home/ansible/startofrole.log
  roles:
    - webservers
  post_tasks:
  - name: When did the role end
    raw: date > /home/ansible/endofrole.log
#+END_EXAMPLE
**** webservers
***** tasks
main.yml
#+BEGIN_EXAMPLE
- name: Install Apache Web Server - RHEL
  yum: pkg=httpd state=latest
  when: "ansible_os_family == 'RedHat'"
  ignore_errors: yes
- name: Install Apache Web Server - Debian
  apt: pkg=apache2 state=latest
  when: "ansible_os_family == 'Debian'"
#+END_EXAMPLE

* Lecture
* Tutorial
* Links


* ansible-galaxy
* Usage
HomePage: [[https://galaxy.ansible.com/][galaxy.ansible.com]]
- list installed roles
#+BEGIN_SRC sh
ansilble-galaxy list
#+END_SRC

- install a role from galaxy
#+BEGIN_SRC sh
ansible-galaxy install geerlingguy.mysql
#+END_SRC
this will be installed in your default roles area ~/.ansible/roles/

- install a role in a specific directory
~/ansible/galaxy
#+BEGIN_SRC sh
ansible-galaxy install geerlingguy.mysql -p roles
#+END_SRC
this will install the role relative to where you are in the file system (~/ansible/galaxy/roles)

- remove a role
#+BEGIN_SRC sh
ansible-galaxy remove wasilak.centos-docker
#+END_SRC

* Lecture
* Tutorial
* Links

* ansible-vault
* Usage
- encrypt a file
#+BEGIN_SRC sh
ansible-vault encrypt roles/test.demo/vars/main.yml
#+END_SRC
you will be prompted for your password

- run a playbook with encrypted files
#+BEGIN_SRC sh
ansible-playbook test.demo.yml --ask-vault-pass
#+END_SRC

- edit an encrypted file
#+BEGIN_SRC sh
ansible-vault edit roles/test.demo/vars/main.yml
#+END_SRC
you will be prompted for your password

- change the password on a file
#+BEGIN_SRC sh
ansible-vault rekey roles/test.demo/vars/main.yml
#+END_SRC
first you will have to enter the old password, then the new one

- cat out the encrypted file
#+BEGIN_SRC sh
ansible-vault view roles/test.demo/vars/main.yml
#+END_SRC
this will be cat out to the screen

- decrypt a file
#+BEGIN_SRC sh
ansible-vault decrypt roles/test.demo/vars/main.yml
#+END_SRC
this will return the file to its oringinal plain text

- using a password file
#+BEGIN_SRC sh
ansible-playbook test-demo.yml --vault-password-file=secured-code
#+END_SRC

* Lecture
* Tutorial
* Links
