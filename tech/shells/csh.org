#+TAGS: shell C

* csh								    :shell:C:
* Description
* Usage
** Variables
- To set a variable use
#+BEGIN_SRC sh
set Var = "value"
#+END_SRC

- To delete a variable use
#+BEGIN_SRC 
unset Var
#+END_SRC

- Null values are set by
#+BEGIN_SRC sh
set Var =
#+END_SRC

Special variable $$ holds the pid of the of the shell, or shell script that is running.

** Built-in Variables
$user    - whoami
$hostess - name of the computer I am logged on to
$path    - my execution path
$term    - what kind of terminal I am using
$status  - a numeric variable, usually used to return error codes
$prompt  - what I am currently using for a prompt
$shell   - which shell am I using

** Arithmetic Variables
These are set using the @ instead of the set command. This is so that numbers are stored correctly and not as strings.

#+BEGIN_SRC sh
@ Var = 10
#+END_SRC

there is also a -- and a ++ operator which will decrement and increment numeric variables. There should be a space between the @ and the variable.
#+BEGIN_SRC sh
@ Var ++
@ Var --
#+END_SRC

** Booleans
! -- negate
|| -- logical or
&& -- logical and

** Boolean conditions
Expressions and operators

== - equal

!= - not equal

=~ - string match

!~ - string mismatch

<= - numerical less than or equal to

>= - numerical greater than or equal to

>  - numerical greater than

<  - numerical less than

** File queries

-e file - file exists (may be protected from user)
-r file - file exists and is readable by user
-w file - file is writable by user
-x file - file is executable by user
-o file - file is owned by user
-z file - file has size 0
-f file - file is an ordinary file
-d file - file is a directory

** Array Variables
- Setting an array
#+BEGIN_SRC sh
set $ARRAY = ("pig" "sheep" "cow")
#+END_SRC

- How many elements in an array
#+BEGIN_SRC sh
echo $#ARRAY
#+END_SRC

- Accessing elements in an array
#+BEGIN_SRC sh
echo $ARRAY[1]
#+END_SRC
or
#+BEGIN_SRC 
echo $ARRAY[1-4]
#+END_SRC
or
#+BEGIN_SRC sh
echo $ARRAY[2-]
#+END_SRC

*** Adding to an array
- to the end
#+BEGIN_SRC sh
set  ARRAY = ($<array> new\_element)
#+END_SRC

- to the begining
#+BEGIN_SRC sh
set <array> = (new\_element $<array>)
#+END_SRC

- in the middle
#+BEGIN_SRC sh
set <array> = ($<array>[a-l] new\_element $<array>[m-])
#+END_SRC

*** Remove from an array
- Remove the first element of an array
#+BEGIN_SRC sh
shift ARRAY
#+END_SRC

Switch statements

general format

switch ( expression )

     case a:

                  commands

                   breaksw

     case b:

                  commands

                   breaksw

endsw

-  important is that commands are not on the same line as the case line.

-  breaksw is used instead of the C language break

* Lecture
* Tutorial
* Books
[[file://home/crito/Documents/Linux/Shell/Introduction_to_the_C_shell.pdf][Introduction to the C Shell]]
* Links
