#+TAGS: DB postgresql postgres


* PostreSQL					     :DB:postgresql:postgres:
HomePage: [[https://www.postgresql.org/][postgresql.org]]
* Description
* Usage
** Basic Admin
*** Changing a users password
#+BEGIN_SRC sh
\password frank
#+END_SRC

** Configuration for Centos7
*** Installation
1. Install the required pkgs
#+BEGIN_SRC sh
yum install postgresql-server postgresql-contrib
#+END_SRC

2. Create a new PostgreSQL database cluster
#+BEGIN_SRC sh
postgresql-setup initdb
#+END_SRC
#+RESULT
Initializing database ... OK

3. Edit the pg_hba.conf
#+BEGIN_SRC sh
host    all             all             127.0.0.1/32            md5
host    all             all             ::1/128                 md5
#+END_SRC
By default postgres doesn't allow password authentication, the above changes this

4. Start and enable the service
#+BEGIN_SRC sh
systemctl start postgresql.service
systemctl enable postgresql.service
#+END_SRC

5. Log into the user postgres and then log into postgres
#+BEGIN_SRC sh
sudo -i -u postgres
psql
#+END_SRC

6. Quit postgres
#+BEGIN_SRC sh
\q

#+END_SRC
*** Create a user
1. To create the first role/user you will need to be postgres user
#+BEGIN_SRC sh
sudo -i -u postgres
#+END_SRC

2. Run the [[file://home/crito/org/tech/cmds/createuser.org][createuser]] cmd
#+BEGIN_SRC sh
createuser --interactive
#+END_SRC

*** Create a db
1. With a user that has the privilege run the [[file://home/crito/org/tech/cmds/createdb.org][createdb]] 
#+BEGIN_SRC sh
createdb test_one
#+END_SRC
*** Create a table
In this example we will create a small table playground from inside psql
#+BEGIN_SRC sh
CREATE TABLE playground (
    equip_id serial PRIMARY KEY,
    type varchar (50) NOT NULL,
    color varchar (25) NOT NULL,
    location varchar(25) check (location in ('north', 'south', 'west', 'east', 'northeast', 'southeast', 'southwest', 'northwest')),
    install_date date
);
#+END_SRC
*** Inset into table
#+BEGIN_SRC sh
INSERT INTO playground (type, color, location, install_date) VALUES ('slide', 'blue', 'south', '2014-04-28');
#+END_SRC
* Lecture
** Just Use Postgres - Rhys Elsmore
[[https://www.youtube.com/watch?v%3DUgcC_bY4rPg][URL]]

- more services provide more attack surface.
- code level db locking - redis 
- social graphs are available
- windows/partition function - look at connections between rows.
- CTE (Common Table Expressions)
  - temp table for just one query
- NOTIFY/LISTEN - can be used to inform a user that certain table/db has been updated.
- Foreign Data Wrappers - connect to other db and access data.
- JSON in Postgres
  - able to remove MongoDB
- Avoid Race Conditions
  - Access - row locking
* Tutorial
** [[https://www.postgresql.org/docs/9.4/static/tutorial.html][PostgreSQL Tutorial]]
** LinuxCBT - PostgreSQL
*** Features
+ What is PostgreSQL
- Object Relational Database Management System (ORDMS)
  - Objects can be related in a hierarchy: Parent -> Child

- Transactional RDBMS
Note: Transactional statements must execute: ALL or None
  - SQL Statements have implicit: BEGIN; COMMIT; statements
  - SQL Statements may also have explicit: BEGIN; COMMIT; statements

- One process per connection - auto-spawns per new connection
  - managed by master process: 'postmaster'
    
- Processes use only ONE CPU
  - OS/Distro may spawn new connection on a different CPU/Core **May now have changed

- Multiple helper processes, which appear as 'postgres' instances, run always
  - stats collector
  - background writer
  - auto-vacuum - cleanup/space re-claimer 
  - WALsender - Write Ahead Log 
all run as daemons and will appear as 'postgres' on ps

- MAX DB Size: Unlimited
  - limited by OS and resources

- MAX Table Size: 32TB - stored as multiple: 1GB files
- MAX Row Size: 400GB
- MAX Column Size: 1GB  
- MAX Indexes on a table: Unlimited
- MAX Identifier (DB Objects (table|column names, etc): 63 bytes limitation is extensible via the source code

- Default Listener: TCP:5432
  - May install install as none privileged user

- Users are distinct from OS users - similar to MySQL
  - Users are shared across DBs
    
- Inheritance 
  - Tables lower in hierarchy may inherit columns from higher tables 
  - Caveat: No unique constraints or foreign keys support

- Case-Insensitive commands - sans double quotes  - i.e 'select * from Syslog;' any table know as syslog
- Case-Sensitive commands - with double quotes - i.e 'select * from "Syslog";' table must be "Syslog" not or syslog or any other variation
  
- 3 Primary Config files: $POSTGRESROOT/data/*.conf
  - 'pg_hba.conf' - controls host/user/DB connectivity (hba host base access)
  - 'postgresql.conf' - general settings
  - 'pg_ident.conf' - user mapping (more legacy)
    
- Integrated Log Rotation Management - postgresql.conf
  - criteria: Age | Size

*** Installation
Debian:
[[https://www.postgresql.org/download/linux/debian/][Debian Installatin Information]]
#+BEGIN_SRC sh
apt-get install postgresql-9.4
#+END_SRC 
postgres is available on all recent versions of debian
1. Create the file /etc/apt/source.list.d/pgdg.list
2. add this line to access the repo
deb http://apt.postgresql.org/pub/repos/apt/ (jessie|wheezy|squeeze)-pgdg main
3. Import the signing key
#+BEGIN_SRC sh
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
#+END_SRC
4. Update package database
#+BEGIN_SRC sh
apt-get update
#+END_SRC

+ What is installed
all the binaries are found in /usr/lib/postgresql/9.4/bin
- psql - this is the terminal monitor - akin to mysql>
- createdb|dropdb - creates and drops db respectively
- createuser|dropuser - creates and drops users respectively
- postgres - server daemon 
  
- Documentaion - /usr/share/postresql/9.4
  - [[https://www.postgresql.org/docs/9.4/static/index.html][docs/9.4]]
  
- data - /var/lib/postgresql/9.4/main/
  - older versions or source installations /opt/PostgreSQL/9.0/data
    - config files wil also be found in here instead of /etc

- conf files - /etc/postgresql/9.4/main
  - postgres.conf
  - pg_hba.conf
  - pg_ident.conf
    
- log files - /var/log/postgresql/
  - the Write Ahead Long is stored in /var/lib/postgresql/9.4/main/pg_xlog - this maintains changes to files at all times
  - legacy version maybe /opt/PostgreSQL/data/pg_log
    
- postmaster.opts - /var/lib/postgresql/9.4/main/
  - this file provides the options for how the daemon is started
  - an example - /usr/lib/postgresql/9.4/bin/postgres "-D" "/var/lib/postgresql/9.4/main" "-c" "config_file=/etc/postgresql/9.4/main/postgresql.conf"
    
- systemd unit file - /lib/systemd/system/postgresql.service 
  - there is also a symbolic link in /etc/systemd/system/multi-user.target.wants/
**** systemd unit file
# systemd service for managing all PostgreSQL clusters on the system. This
# service is actually a systemd target, but we are using a service since
# targets cannot be reloaded.

[Unit]
Description=PostgreSQL RDBMS

[Service]
Type=oneshot
ExecStart=/bin/true
ExecReload=/bin/true
RemainAfterExit=on

[Install]
WantedBy=multi-user.target


- Defult user when any of the binaries are run is the current user
  
- Environment variables can be stored in the /etc/postpresql/9.4/main/environment file
  - legacy file is pg_env.sh

*** psql
Features:
1. Non-Interactive usage - i.e. 'mysql' terminal monitor
2. Command history - up|down arrows
3. Tab completion
4. Commands terminate with semicolon and may wrap lines and have whitespace separators
5. Defaults to supplying the currently-logged-in user
6. Different versions of psql can work with different versions of postgresql   
   
- Commands
--version - informs us of the psql version
--help - help menu
-l - list databases
-U - provide name of user

PostgreSQL installs three default dbs
1. 'postgres' - contains user accounts DB, etc
2. 'template0' - vanilla, original DB 
3. 'template1' - copy of template0, and may be extended, and is used to generate new DBs

psql - this will enter the postgres shell
- if prompt contains a hash, it indicates a superuser
- \h - returns a list of SQL cmds
- \h [SQL Cmd] - this will return information on command
- \? - returns psql specific help
- \l - list db
  - \l+ - provides more information
- \du[+] - returns list of users in system db    
- \! - switch to shell
- \! [cmd] - execute a specfic cmd non-interactively
- \i FILE - execute cmds from file
  - it doesn't have to be sql, but can be psql cmds

Multiple commands can be seperated with whitespace, terminate with semicolon

- \c [DB] - switch database
   - \c DB [REMOTE HOST] - connects to different DB and remote host
- \d[S+] - reveals tables, views, sequences and various DB objects
- \q - this quits psql
  
*** Access Controls
Config files:
pg_hba.conf
pg_ident.conf
postgresql.conf

Users - Roles are both users and groups
Central accounts DB shared by ALL DBs - accounts must be unique
Default setup includes one user - postgres
Privileges are managed with:
  - GRANT
  - REVOKE
  - ALTER
  - CREATE USER|ROLE
  - DROP USER|ROLE
  - createuser|dropuser - command wrappers to SQL statements
DB object creators own those objects and can assign priv to them
  - to change DB object ownership use: ALTER - sql key word
Special user named: PUBLIC grants assigned priv to ALL sys users

- Create Super User
a.\du - enumerate current users|roles
b. create a new superuser
#+BEGIN_SRC sh
createuser -e -s -U postgres new_su
#+END_SRC
- e - echo the SQL cmd created
- s - created user will have superuser priv
- U - which user to connect to DB as
    
- By default, users are only allowed to login locally if the system username matches the PostgreSQL username.

c. set password
  - psql>\password new_su - permits setting of user's password
d. connect with new user
#+BEGIN_SRC sh
psql -U new_su -d postgres -h 127.0.0.1 -W
#+END_SRC

- Drop User
#+BEGIN_SRC sh
dropuser -e -U postgres new_su
#+END_SRC

- Create User with no priv
#+BEGIN_SRC sh
psql -e -U postgres new_user
#+END_SRC

- Create User interactively
As of 9.1 > postgres now uses the --interactive flay, previously this was the default action
#+BEGIN_SRC sh
createuer --interactive new_user
#+END_SRC

When creating users always set password from inside postgres as not to store password in stdout.

- checking what db a user is connected to
#+BEGIN_SRC sh
ps -ef | grep -i postgres
#+END_SRC
a process is creted for each user and the database connection, and the db is indicated.

- Remote TCP-based connectivity
pg_hba.conf specifies which connections can be created
#+BEGIN_SRC sh
psql -U postgres -h 51.20.21.111
#+END_SRC
will fail unless it has be set in pg_hba.conf, default remote connections not set

for the above this line needs to be added
host	ALL	51.20.21.111	md5
the above will only allow conection from that ip, but a subnet can be set
*** Logging
Features:
- 3 types of logs supported by default
  - 'stderr' (Default)
  - 'csvlog' - import into spreadsheets
  - 'syslog'
- These logs are controlled via: $POSTGRESROOT/data/postgresql.conf
- Simultaneous logging
- Ability to control verbosity
- Automatic log rotation based on criteria: age | size
- Logs handled by the included logger (stderr, csvlog) are stored in: $POSTGRESROOT/data/pg_log
- Syslog is handled by the system and routed accordingly
  
postgresql.conf
- Variables found under the Error Reporting and Logging Section
- the variable that turns logging on is logging_collector=on
  
Logging Levels
  - client_min_messages variable sets this
  - log_min_duration_statement=-1 by default. If set to 0 this will log all quires and there times
   
Configure syslog
  - update log_destination and add 'syslog'
  - update syslog configuration for: 'LOCAL0' facility
  - depending what init system you are using determines how this is configured
    - /etc/rsyslog.conf
    - /etc/logrotate.d/postgresql.common  
      
Configure csvlog
  - update log_destination and add 'csvlog'
  - logging_collector must be on for csvlog and stderr
    
Note some systemd - logging_collector has no effect all logs are sent to the journal

*** Data Types
- Allow us to control the type of data on a per column basis

Types:
 Numeric:
  a. 'smallint' - 16-bits (2-bytes) - whole numbers 0 - 65535 signed -32768 - 32767
  b. 'int'      - 32-bits (4-bytes) - whole numbers 0 - 4billion  signed -2billion - 2billion
  c. 'bigint'   - 64-bits (8-bytes) - whole numbers that required to be unique
  d. 'numeric[precision,scale] - catches all numberic (lazy option)
    - precision - sig figs
    - scale - number of values to the right of the deciaml point
    - none specified - 1000 digits of precision
  e. 'real'     - 32-bits - variable - 6 decimal digits of precision
  f. 'double'   - 64-bits - variable - 15 decimal digits of precision 
  g. 'serial'   - 32-bits - auto-incrementing
  h. 'bigserial'- 64-bits - auto-incrementing
  
 Money:
  a. 'money' - 64-bits - 2^63 signed ie -9EB - 9EB (exobyte) - will accept leading currency symbol

 Strings:
  a. 'text'    - varchar - unlimited - preferred character storage type within PostgreSQL
  b. 'char(n)' - fixed-length, blank-padded if value stored is < 'n' length 
    - i.e. 'char(9)' - 'linuxcbt' -> stored as: 'linuxcbt ' - none used spaces become white space padding
    - char(n) truncates values that are > 'n' length
    - 'char' == 'char(1)' - effectively becomes a 1 character field
  c. 'varchar(n)' - variable length with n limit, if n is present - does not blank-pad
    - i.e. 'varchar(9) - 'linuxcbt -> strored as: 'linuxcbt'
    - 'varchar' -> variable length - Does not blank-pad
      
 Dates & Time - Uses 'Julian Dates (from 4713BC) -> 10^5 years ahead'
  a. 'date' - 32-bits - date only
  b. 'time' - 64-bits - defaults to time 'without time zone' - microsecond precision
  c. 'time with time zone' - 96-bits - date & time with time zone - microsecond precision
  d. 'timestamp with time zone' - 64-bits - ...
  e. 'timestamp without time zone' - 64-bits - microsecond precision
  f. 'interval' - 96-bits - range of time - microsecond precision
  
 Boolean - 8-bits - True(1)(on) | False(0)(off)
 Geometric Types - lines, curcles, ploygons, etc
 Network Address Types
   a. 'cidr'    - 7 or 19-bytes - IPv4 or IPv6 networks - i.e '192.168.0.0/24' | '2002:27ff:feba:2/64'
   b. 'inet'    - 7 or 19-bytes - IPv4 or IPv6 hosts and networks
   c. 'macaddr' - 48-bits -i.e. 00:11:11:5b:70:53

*** Create
- Limited to 63 characters for the definition of objects
- Identifiers (DB objects) MUST begin with alpha characters
- Used to create: DBs, Schemes, Tables, Indexes, Functions, etc.

- PostgeSQL Hierarchy:
  - DB
    - Schema (Optional) - default schema is named 'public' 
  - Objects (Tables, Functions, Triggers, etc)
  
All DBs have: 'public' and 'pg_catalog' schemas
All users|roles have 'CREATE' & 'USAGE' access to the 'public' schema for ALL DBs
Create distinct schemas if security beyond 'public' is necessary

- DB Creation 
  a. create a user named: 'frank' with 'CREATEROLE CREATEDB' rights
    - 'createuser -e -U postgres frank (this will create a blank user with no password or privs)
    - 'createuser --interactive' walks through the creation of a user
  b. create a DB named 'fish' 
    - 'CREATE DATABASE fish;'
  c. create a table named: 'fish_type'
    - 'CREATE TABLE fish_type (date date);'
  d. create a user named fred with usage rights, but no privs
    - 'createuser --interactive'
    - psql> CREATE ROLE fred nosuperuser login inherit;
  e. create a schema named: 'fish_shop'
    - 'CREATE SCHEMA fish_shops;
  f. create a table named 'fish_type' within the schema 'fish.fish_shops'
    - 'CREATE TABLE fish_shops.fish_type (date date);'
    - '\d fish_shops.fish_type' - confirms the description of the ta
* Books
[[file://home/crito/Documents/Database/Postgres/Learning_PostgreSQL.pdf][Learning PostgreSQL - O'Reilly]]
[[file://home/crito/Documents/Database/Postgres/PostgreSQL_Up_and_Running_2e.pdf][PostgreSQL Up and Running 2e]]
[[file://home/crito/Documents/Database/Postgres/PostgreSQL-Introduction_and_Concepts.pdf][PostgreSQL - Introduction and Concepts]]
[[file://home/crito/Documents/Database/Postgres/PostgreSQL_Cookbook-Packt.pdf][PostgreSQL Cookbook - Packt]]

* Links

