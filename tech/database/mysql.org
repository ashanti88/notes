#+TAGS: db sql

* mysql
* Usage
** Backup database
 mysqldump -u <user> -p <database> > <backup.sql>

** Restore an backup
 mysql -u <user> -p <database\_name> < <backup.sql>

** How to backup a table to a text file
ysql> SELECT * INTO OUTFILE 'table\_backup\_file' FROM
name\_of\_table';

** Automysqlbackup
his application allows you to automate your backups can be found in the
ebian/ubuntu repo.

 apt-get install automysqlbackup

un with
 automyqlbackup

he main configuration file is /etc/default/automysqlbackup

efault place for backups is /var/lib/automysqlbackup

** Techniques that are no longer recomended

yqlhotcopy shouldn't be used anymore due to limitations. One of these
s it only works for data stored in 'MyISAM' and 'Archive' storage
ngines. It also has to be run on the local machine, so no backing up
rom a remote box.

** Import

irst create the database on the machine. Otherwise the database will
ake on the name of the sql file.

 mysql -u root -p <database\_name> < <database\_file.sql>

** Export

 mysql -u root -p <database\_name> > <database\_file.sql>i
y default the data directory can be found in /var/lib/mysql .

his maybe moved due to size constraints.

** Overview of the procedure

. Move the MySQL database files from /var/lib/mysql to the new
artition.

. Modify the .cnf file to reflect the new position.

. Update any SELinux settings.

Take a backup of the current MySQL data*

top the mysql service

 systemctl stop mysql.service

opy files to backup location

 cp -r /var/lib/mysql <backup\_partition>

r

ql dump single database

 sqldump -u root -p[password] <database> > dumpfilename.sql

ll databases

 sqldump -u root -p[password] --all-databases > /tmp/all-databases.sql

** Move MySQL data directory to new partition

. > mkdir -p <new\_data\_directory>
. > cd <new\_data\_directory>
. > mv <mysql\_datadir> <new\_data\_directory>
. > chown -R mysql:mysql <new\_data\_directory>

** Modify my.cnf and start MySQL

 vi /etc/my.cnf

atadir=<new\_data\_directory>
ocket=<new\_data\_directory/mysql.sock>
mp=<new\_data\_directory>

 systemctl restart mysql.start

** SELinux context type for MySQL

heck the selinux context before moving moving data directory.

 ls -Z
myisamchk is used for MyISAM databases.

mysqlcheck -uroot -p $databases is used for innodb.

[http://www.laurencegellert.com/2011/07/mysql-maintenance-tasks-for-innodb-with-mysql-5-1/]]

[http://www.techrepublic.com/article/checking-and-repairing-mysql-tables/]]
heck the size of a databases

ELECT table\_schema AS "Database name", SUM(data\_length +
ndex\_length) / 1024 / 1024 AS "Size (MB)" FROM
nformation\_schema.TABLES GROUP BY table\_schema;

 database that uses a lot of transactions may cause fragmentation. This
eans a lot of unused space. Recommended that the tables are defraged on
n ongoing basis.

** Identify Tables for Optimisation

Use the following query to determine how much unused space is available
in every table.

sql> use <database>;

sql> select <table\_name>,

round(data\_length/1024/1024) as data\_length\_mb,

round(data\_free/1024/1024) as data\_free\_mb

     from information\_scheme tables

     where round(data\_free/1024/1024) > 500

     order by data\_free\_mb;

The query will output - 

1) a list of tables that has a minimum of 500MB of unused space.

2) data\_length\_mb displays the total unused space in the particular
   table.

** Set root password
+ For a fresh install use
> mysqladmin -u root password <new_password>
+ Change passowrd
> mysqladmin -u root -p<old_pass> password <new_password>

+ Recover root password 
URL: [[http://dev.mysql.com/doc/refman/5.7/en/resetting-permissions.html][MySQL - Root Password Recovery]]
safe method
1. locate the .pid file
  - possible locations /var/lib/mysql/, /var/run/mysqld/ and /usr/local/mysql/data/
2. stop the mysqld process    
  > kill `cat /mysql_data_dir/host.pid`
3. create a txt file containing the password assignment statement on a single line 
  - MySQL 5.7.6 and later
ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass';
  - MySQL 5.7.5 and earlier
SET PASSWORD FOR 'root'@'localhost' = PASSWORD('MyNewPass');
save this file as mysql-init
4. start mysql using the --init-file flag
  > mysqld_safe --init-file=/home/me/mysql-init &
5. delete the mysql-init file
6. restart mysqld and login with the new password
less safe method
1. stop the MySQL server
2. restart the server with the --skip-grant-tables. This allows anyone to connect without a password and all privileges.
3. connect to the mysqld
  > mysql
4. flush the privileges 
  > FLUSH PRIVILEGES;
5. set the new root password
  - MySQL 5.7.6 and later
> ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass';
  - MySQL 5.7.5 and earlier
> mysql> SET PASSWORD FOR 'root'@'localhost' = PASSWORD('MyNewPass');
6. restart the mysqld and login with the new password
If the ALTER USER doesn't work try
UPDATE mysql.user SET authentication_string = PASSWORD('MyNewPass') WHERE User = 'root' AND Host = 'localhost'; FLUSH PRIVILEGES;
This modifies the user table directly.

** Move data directory
By default the data directory can be found in /var/lib/mysql
This maybe moved due to size constraints.
*** Overview of the procedure
1. Move the MySQL database files from /var/lib/mysql to the new partition.
2. Modify the .cnf file to reflect the new position.
3. Update any SELinux settings.

*** Take a backup of the current MySQL data
Stop the mysql service
> systemctl stop mysqld.service
Copy files to backup location
> cp -r /var/lib/mysql <backup\_partition>
or
sql dump single database
> sqldump -u root -p[password] <database> > dumpfilename.sql

all databases
> sqldump -u root -p[password] --all-databases > /tmp/all-databases.sql

+ Move MySQL data directory to new partition*
> mkdir -p <new\_data\_directory>
> cd <new\_data\_directory>
> mv <mysql\_datadir> <new\_data\_directory>
> chown -R mysql:mysql <new\_data\_directory>

+ Modify my.cnf and start MySQL
> vi /etc/my.cnf
datadir=<new\_data\_directory>
socket=<new\_data\_directory/mysql.sock>
tmp=<new\_data\_directory>

> systemctl restart mysql.start

+ SELinux context type for MySQL
Check the selinux context before moving moving data directory.
> ls -Z

** Setting up MariaDB SSL and secure connection from clients
Article: [[https://www.cyberciti.biz/faq/how-to-setup-mariadb-ssl-and-secure-connections-from-clients/][How to setup MariaDB SSL and secure connections from clients]]
1. Make sure that secure_insallation has been run
2. Create CA certificate
  a. > cd /etc/mysql
  b. > sudo mkdir ssl
  c. > cd ssl
  d. > openssl genrsa 2048 > ca-key.pem
  e. > sudo openssl req -new -x509 -nodes - days 365000 -key ca-key.pem -out ca-cert.pem
3. Create server certificate
  a. > sudo openssl req -newkey rsa:2048 -days 365000 -nodes -keyout server-key.pem -out server-req.pem
  b. > sudo openssl rsa -in server-key.pem -out server-key.pem
  c. > sudo openssl x509 -req -in server-req.pem -days 365000 -CA ca-cert.pem -CAkey ca-key.pem -set_serial 01 -out server-cert.pem 
4. Create client certificate
  a. > sudo openssl req -newkey rsa:2048 -days 365000 -nodes -keyout client-key.pem -out client-req.pem
  b. > sudo openssl rsa -in client-key.pem -out client-key.pem
  c. > sudo openssl x509 -req -in client-req.pem -days 365000 -CA ca-cert-pem -CAkey ca-key.pem -set_serial 01 -out client-cert.pem
5. Verify the Certificates
  a. > openssl verify -CAfile ca-cert.pem server-cert.pem client-cert.pem
6. Configure MariaDB server to use SSL
  a. > sudo vi /etc/mysql/mariadb.conf.d/50-server.cnf
  b. append the following in [mysqld]
    ### MySQL Server ###
    ## Securing the Database with ssl option and certificates ##
    ## There is no control over the protocol level used. ##
    ##  mariadb will use TLSv1.0 or better.  ##
    ssl
    ssl-ca=/etc/mysql/ssl/ca-cert.pem
    ssl-cert=/etc/mysql/ssl/server-cert.pem
    ssl-key=/etc/mysql/ssl/server-key.pem
  c. > sudo systemctl restart mysql
7. Configure MariaDB client to use SSL
  a. > sudo vi /etc/mysql/mariadb.conf.d/50-mysql-clients.cnf
  b. append the following to [mysql]
    ## MySQL Client Configuration ##
    ssl-ca=/etc/mysql/ssl/ca-cert.pem
    ssl-cert=/etc/mysql/ssl/client-cert.pem
    ssl-key=/etc/mysql/ssl/client-key.pem
8. Verification
  a. > mysql -u <user> -h <host> -p <data_db>
  b. mysql> SHOW VARIABLES LIKE '%ssl%';
     or
     mysql> STATUS;
   [[file://home/crito/Pictures/org/mysql_ssl_01.png][Sample Output]]
  
  c. > openssl s_client -connect <host_ip:3306> -tls1
  d. > openssl s_client -connect <host_ip:3306> -tls1_1
  e. > openssl s_client -connect <host_ip:3306> -tls1_2
  [[file://home/crito/Pictures/org/mysql_ssl_ver2.png][Sample Output]]

  f. use tcp to check that no clear text is sent
     > sudo tcpdump -i eth0 -s 65535 port 3306 -w /tmp/mysql.pcap
     > mysql -u <user> -h <host> -p <db_name>
     > tcpdump -r /tmp/mysql.pcap | less

* Commands 
- [[file://home/crito/org/tech/cmds/mysqladmin.org][mysqladmin]]
- [[file://home/crito/org/tech/cmds/mysqldump.org][mysqldump]]
- [[file://home/crito/org/tech/cmds/mytop.org][mytop]]
- [[file://home/crito/org/tech/cmds/mysqlaccess.org][mysqlaccess]]
- [[file://home/crito/org/tech/cmds/mysqltuner.org][mysqltuner]]

* Optimization
** Single Table
mysql> use <database>;
mysql> optimize table <table\_name>/

** Multiple Tables
mysql> use <database>;
mysql> optimize table <table\_one>, <table\_two>, <table\_three>;

Optimie table works for InnoDB engine, MyISAM engine and ARCHIVE tables.

** Defrag using mysqlcheck cmd

> mysqlcheck -o <database> <table> -u root -p<password>

o - option is to indicate that mysqlcheck should perform "optimize
table" operation

u - user

p - password

Defrag all tables on all databases

> mysqlcheck -o --all-databases -u root -p<password>

** After Optimization
run the query that we an initially run. This time the data\_free\_mb
should show zeros in the column.
When no Plesk or Cpanel if facing a .htaccess file with the following:

AuthName "Restricted Area" AuthType Basic AuthUserFile
/var/www/html/phpMyAdmin-SBAL/.htpasswd AuthGroupFile /dev/null require
valid-user

Check the .htpasswd file in the same directory, if it contains a
password, then this is fine. When catting this, it will show the
encrypted version of the password so you need to get the password off
the customer.

* Repair
** MyISAM 
** InnoDB
URL: [[https://www.percona.com/blog/2008/07/04/recovering-innodb-table-corruption/][Recovering Innodb Table Corruption - Percona]]
* Engines
URL: [[https://en.wikipedia.org/wiki/Comparison_of_MySQL_database_engines][Wiki - Engine Comparison]]
** MyISAM
** InnoDB
** InfiniDB
** NDB

** Spider
** ScaleDB
* Forks
** Mariadb
** Percona

* GUI
** phpmyadmin
* Lectures
** To Shard or Not to Shard? - Peter Zaitsev			      :shard:
URL: [[https://www.youtube.com/watch?v%3D2MyyH-bH8Bw&list%3DWL&index%3D75][To Shard or Not to Shard?]]
+ Before you decide how to shard you'd best understand whether or not you really need to shard!

+ Single MySQL Can Do (Mid Range System)
  - 100K+ queries per second
  - 100K+ rows inserted/updated/deleted per second
  - 5M+ rows scanned per second
  - 10K+ concurrent connections
  - 10TB+ data size

+ MySQL 5.7 can perform 645000 qps

+ Calculating query load
Example:
3M daily active users
30 interactions per user per day
10 queries per interaction
3x peak versus average use
= 31250 Queries/sec10 queries per interaction

+ Avoiding Sharding
  - Enterprise with 200K+ wmployees internal Drupal installation
  - E-commerce merchant with $10M+ sales per month
    - both run on a single MySQL instance

+ Startegies to Delay Sharding
  - Architecture
    - Building up from small blocks
    - Each "owning" its data
    - "Microservices"
  - Functional Partitioning
    - Keep separate data separate
  - Replication
    - Scale reads
    - Beware - MySQL replication is aynchronous
  - Caching
    - Scale Reads
    - Query Cache
    - Application Server Cache
    - Memcache/Redis
    - Summary Tables - caching mysql in mysql
    - HTTP Cache
  - Queueing
    - Scale Writes
    - Balance Demand Spikes
    - Batch Work
    - Redis
    - RabbitMQ
    - ActiveMQ
    - Kafka
  - Beyond MySQL
    - Analytics
      - Hadoop
      - Vertica
      - Spark
    - Full Text Search
      - ElasticSearch
      - Sphinx
      - Solr
    - Document Store
      - MongoDB
      - CouchBase
      - RethinkDB
      - cassandra
  - Optimize
    - Do "Simple" optimization first    
      
+ Hardware
  - Fast CPUs - MySQL likes fast processor
  - Plenty of memory
  - Fast flash storage - shouldn't be using spinning disks
  - Good network(keep it close) - latency will casue queries
    - app server and db should not be many hops apart
      
+ Environment
  - Linux is the most common OS
  - New MySQL versions scale better
  - Use a recent GA version(MySQL 5.7)
    
+ Configuration
  - Configure MySQL Server Properly - the default configure shouldn't be used customize for your need
  - What storage engine is reight for you
    - innodb - good all rounder
    - TokuDB is another option

+ Sharding - When?
  - Too Early - waste resources
  - Too Late - Run into the wall

+ Architectural Runway
  - Sharding is architecture consideration
    - sharding over a wkend is crazy, it should be apart of the arch development
  - Make it part of your achitecture runway planning
  - How long would it take you to implement Sharding?
    
+ Capactiy Planning
  - Know where your wall is!
  - Be conservative in your estimates!
  - Do not plan for linear scalability!

+ Benefits of Sharding
  - It is the only way to get "Facebook" scale
  - removes complex caching layer
  - removes asynchronous replication for scaling
  + Isolation
    - Security - seperates data into own blocks
    - Compliance - this speration my be required for compliance
    - keeping data close to use - law regarding data remaining in county of origin
  + Costs
    - Can use lower power systems
    - Especially important in the cloud

+ Sharding Questions
  + Sharding Level
    - Database Level
    - Deployment Unit Level - normally when db are going to be in different physical locations
  + Sharding Keys
    - Most "small" accesses go to single shard
    - No shard is too larde in terms of data or load
    - May double-store date with different sharding keys if needed
  + Sharding Unit
    - Shard = Physical MySQL instance
    - Shard = Schema
    - Multiple "Shards" Per Schema/Table
  + Sharding HA
    - More chance of failure
    - Increased need for HA
    - Sharding over Master-Slave "Clusters"
      
+ Sharding Technologies
  - Roll-your-own
  - Vitess - one to watch
  - Jetpants    - not much support
  - Shard-Query - not much support
  - Clustrix - close source not much traction
  - MySQL Cluster - complicated tech difficult to use
  - MySQL Fabric - official solution from MySQL team at Oracle
  - Tesora Database Virt Engine - Automated
  - ScaleArc - Rule Based, Commercial popular
  - ScaleBase - Died, Zombie
    
+ Summary
  - Multiple technologies for Sharding
  - There is no standard solution used across the board

** Scaling MySQL and MariaDB - Max Mether			 :arch:shard:
URL: [[https://www.youtube.com/watch?v%3D44tRhxGYXTY&list%3DWL&index%3D74][Scaling MySQL and MariaDB]]
+ What is Scalability?
"Scalability is the ability of a system, network, or process to handle a growing amount of woork in a capable manner or its ability to be enlarged to accomodate that growth."

+ Horizontal vs Vertial
- horizontal - spread over more machines
- vertical - increasing resources to a single machine

+ When do you need to scale?
- The resources of one machine is not enough!
- Large Datasets
  - I/O and CPU load is the bottleneck
  - Long execution times for queries
  - Effects creating indexes, statistics, maintenance of tables
- When per instance partitioning does not help

+ Scaling options for MySQL
- Replication (Read Scaling)
- Galera Clustering (Mainly read scaling)
- Sharding(read and write scaling)
  - at the application/connector layer
  - at the proxy layer
  - at the database layer
    
+ Replication Architecture

Application Writes
        |                Slave 1
        |             /
        |            /
MySQL Master Server / --- Slave 2

+ Replication Phases
- Asynchronous: 3 Phases
1. Commit and write to binlog on Master
2. Ship changes to relay log on slave
3. Apply changes on slave

sync binlog option makes sure that transactions are recorded in the binlog. Should allows be enabled if you value your data. Ensures tha all transactions can be recovered if failure occurs.

+ Replication for Scaling?
- Can only be used for read Scaling
  - Slaves not necessarily synced
- Proxy needed for load-balancing

-Useful for application with heavy read ratio
  - with a 95% R/W ratio adding 4 slaves to 1 master => 24% load on each server (79% r/w)
  - with a 50% R/W ratio adding 4 slaves => 60% load on each server (16.7% R/W)
- Good for lots of reads, but no effect when it comes to writes.   

+ Galera Cluster
- Clustered nodes cooperate to remain in sync
- With multiple master nodes, reads and updates both scale
- Synchronous replication with optimistic locking delivers high availability with little overhead
- Fast failover because all nodes remain in sync
  
+ Galera Cluster for Scaling?
- Can be used for read Scaling

- can also be used for write scaling to some extent
  - write to any node, automatice synchronisation
  - cluster level commits => local redundancy not needed
    - InnoDB disk options can be relaxed

- Load Balancer needed

+ Load Balancing
- Needed for transparency
- Example proxies:
  - HAProxy
  - glb
  - JDBC client
  - MySQL Fabric
  - MariaDB MaxScale

+ Sharding
- Sharding is database partitioning across multiple instances
- Sharding can be key-based, schema-based etc
- Implementation of sharding using
  - application logic
  - Coonectors: Connector J, MySQL Fabric
  - Proxies: MySQL Proxy, MySQL Fabric, MariaDB MaxScale
  - Storage engine: Spider, NDB(MySQL Cluster), ScaleDB

+ Disadvantages with Sharding
- Increased complexity of SQL
- Management complexity
- Multiple points of failure
- Failover more complex
- Backups more complex
- Operational complexity added
  
+ Spider Storage Engine
- Developed by Spiral Arms
- Storage engine "partitions" tables across multiple db server instances
- Based on partitions with integrated sharding
- Virtual view on tables distributed across instances
- Supports XA transactions
- Transactional storage engine
- Provides scale-out in combination with HA
- A lot of manual work requried to setup

+ Spider Internals
- When a Spider table is created it creates a link to the remote table
- The linked table can have any engine
- The linked table can use partitioning
- The remote server is not spider aware
- You can have multiple Spider nodes for the same underlying tables

+ Spider and Performance
- Reading
  - Simple queries generally faster
  - Queries spanning all shards can be slower if confitions not pushed down
  - Joins and complex queries can be a lot slower
    - Performance optimizations available through spider functions and options

- Writing
  - INSERTS Generally faster as each node is independent
  - UPDATES depend on reads to get to rows so depends
    
+ Summary
- Rplication
  - Read Scaling - only useful for high read ratio
- Galera Cluster
  - Read Scaling and increased write performance
- Sharding
  - Both read and write scaling
  - More complex to manage
  - Performance impact on complex queries

** Efficient Indexes in MySQL - Ovais Tariq & Aleksandr kuzminsky     :index:
+ How Data is Organised
InnoDB - B+ Tree structure
  - leaf node contains data
  - Doubly linked list of leaf nodes
  - Keys stored in sorted order
  - All leaf nodes at the same height

- B+ Tree was selected for InnoDB back in 1994, and is good for spinning discs
    
+ Few Advantages
  - Reduced I/O
  - Reduced Rebalancing
  - Extremely efficient range scans
  - Implicit sorting
    
+ Index Height
  - h is the height of the tree
  - n is the number of rows in a table
  - p is the branching factor of the tree
  - p = page size in bytes/key length in bytes

      h = ( log n / log p )
    
+ Indexes
  - can be used to speed up quereries by removing random look ups
  - only one index can be used at once
    
+ DISTINCT !!!! need to read up on this function

* Tutorials
* Books
[[file://home/crito/Documents/Database/MySQL/High_Performance_MySQL_2e.pdf][High Performance MySQL - O'Reilly]]
[[file://home/crito/Documents/Database/MySQL/Learning_MySQL_and_MariaDB.pdf][Learning MySQL and MariaDB - O'Reilly]]
[[file://home/crito/Documents/Database/MySQL/Mastering_MariaDB.pdf][Mastering MariaDB - Packt]]
[[file://home/crito/Documents/Database/MySQL/MySQL_Cookbook_2e.pdf][MySQL Cookbook - O'Reilly]]
[[file://home/crito/Documents/Database/MySQL/MySQL_for_Python.pdf][MySQL for Python]]

