#+TAGS: DB sqlite


* sqlite3							  :DB:sqlite:
* Description
* Usage
+ Create a database
#+BEGIN_SRC sh
sqlite3 example.db
#+END_SRC
this will take you into the sqlite client and allow you to create the database.

+ To exit
#+BEGIN_SRC sh
.quit
#+END_SRC

+ Insert records from a file
#+BEGIN_SRC sh
sqlite3 example.db < insert\_file.sql
#+END_SRC
- create a file in vi with insert commands on each line.
- then push the file into sqlite3

+ View records
#+BEGIN_SRC sh
sqlite3 example.db
#+END_SRC
- select database to be used.
- normal sql select cmd

+ Rename table name
#+BEGIN_SRC sh
alter table <name\to\change> rename to <new\name>;
#+END_SRC

+ Add a column to an existing table
#+BEGIN_SRC sh
alter table <name\of\table> add column <new\field_data\type>;
#+END_SRC

+ Alter data in a record
#+BEGIN_SRC sh
update <table> set <field=id> where <specify\_field>;
#+END_SRC

+ View all tables in database
#+BEGIN_SRC sh
.tables
#+END_SRC

+ Describe table
#+BEGIN_SRC sh
.schema <table\_name>;
#+END_SRC

+ Create an index*
#+BEGIN_SRC 
create unique index <index\name> on <table>(<field>);
#+END_SRC
this will ensure that no other record is added with the same table-field combination.

* Lecture
** An Introduction to SQLite - Richard Hipp
[[https://www.youtube.com/watch?v%3Df428dSRkTs4&index%3D88&list%3DWL][URL]]
+ What is SQLite
  - an embedded SQL database engine
  - serverless
  - small databases
  - entire database is a single disk file
  - small footprint - 230KB
  - cross platform - big endian -- little endian

+ SQL Language Understood by SQLite
  - Foreign keys not supported
 
+ What is it good for
  - Application file format
  - Chalkboard for sharing data amoung serveral processes
  - Storage for complex data structures
  - Replacement for Client/Server DB
    disadvantage
      - limited scalability
      - doesn't work over NFS
      - doesn't scale to terabytes or beyond
    advantages
      - works out of the box
      - fast and lightweight
      - runs off of a cd-rom
	
+ Complex Data Structures
  - usa an in-memory database
  - Think of a database as a collection of structures
    - each sql table is a structure or class defininition
    - each row in a table is a specific structure or obj

+ Application File Format
  - File/Open menu option opens an SQLite database connection rather than reading and parsing a custom file format
  - No need to read the entire file into memory - only those parts that are actually needed.
  - Atomic, seriallized writes privent file corruption following a crash or power loss.
  - File format is self- describing
    
+ Datatypes in SQL
  - Every column of a table has "type"
  - cell type doesn't have to match the column type

+ Attach
  - the ability to talk to multiple db at the same time
  - allows joins to be created between db
    
+ Key Points
  - powerful replacement for fopen(), ODBM or BerkeleyDB
  - works well in place of enterprise db for smaller problems, during testing or demos.
  - cross-platform single-file dbh
    
* Tutorial
* Books
* Links

