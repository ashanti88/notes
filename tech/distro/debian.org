#+TAGS: debian .deb kali


* Debian - 3-4yrs Life Cycle - Release Cycle 2yrs
* Usage
** General System Configuration					   :deb:conf:
*** Setting the default text editor
> set EDITOR=<txt\_editor>
> set VISUAL=<txt\_editor>

Using update-alternative
> update-alternative --config editor

*** Language & User
*** Change Default Language
> dpkg -reconfigure locales
or
+ edit /etc/locale.gen - uncomment the correct language
> locale-gen
url:https://wiki.archlinux.org/index.php/locale

*** Change Keyboard Layout
> dpkg -reconfigure console-setup
or in older debian
> dpkg -reconfigure console-data
or on X11
> setxkbmap gb

** Configuring Networking					    :deb:net:
[[https://wiki.debian.org/NetworkConfiguration#Setting_up_an_Ethernet_Interface][Network Configuration]]
Files:
*** /etc/interfaces
*** /etc/resolv.conf
resolv.conf This is the file used for setting the DNS to use Format in the file: 
nameserver x.x.x.x 
- any number of dns servers can be added 
Concepts:
*** Configuration Tools
- [[file://home/crito/org/tech/cmds/wpa_cli.org][wpa_cli]]
- [[file://home/crito/org/tech/cmds/netctl.org][netctl]]
*** Creating a bridge
**** iproute2
Create <ip link add name <bridge\_name> type bridge <ip link set
<bridge\_name> up

To add an interface into the bridge it must be up <ip link set
<interface> up <ip link set <interface> master <bridge\_name>

To show existing bridges and associated interfaces use <bridge link

To remove an interface from the bridge <ip link set <interface> nomaster

To delete a bridge <ip link delete <bridge\_name> type bridge

**** bridge-utils
Create <brctl addbr <bridge\_name>

To add an interface into the bridge <brctl addif <bridge\_name>
<interface>

Adding an interface to a bridge will cause that interface to loose its
ip address.

To show existing bridges and associated interfaces use <brctl show

Set the bridge device up <ip link set up dev <bridge\_name>

Deleting a bridge requires that the bridge is down <ip link set dev
<bridge\_name> down <brctl delbr <bridge\_name>

** Desktop User Configuration					     :deb:de:

** resolv.conf keeps being over-written
- NetworkManager
  - If networkManager is use add dns=none to [main]

- Kali - the above didn't work - did the following 
  - removed the sym link /etc/resolv.conf -> /var/NetworkManager/resolv.conf
  - created a new /etc/resolv.conf and then made immutable
    - chattr +i /etc/resolv.conf
* Package Management
** Files
/etc/apt/sources.list    - this is the list of repos that debian will use for package installation
/etc/apt/sources.list.d/ - this is where you can add other repos for the apt tool to query
/etc/apt/trusted.gpg     -

** Cmds
*** dpkg
**** Basic Administration
Install
#+BEGIN_SRC sh
dpkg -i application.deb
#+END_SRC
*makesure to add the deb-src to the source.list for updates

Remove
#+BEGIN_SRC sh
dpkg -r application.deb
#+END_SRC

Purge
#+BEGIN_SRC sh
dpkg -P application.deb
#+END_SRC

- List all installed packages
#+BEGIN_SRC sh
dpkg -l
#+END_SRC

- List all files installed with package
#+BEGIN_SRC sh
dpkg -L nano
#+END_SRC

- Query a .deb package, this will show dependencies, arch, version, package-name etc
#+BEGIN_SRC sh
dpkg -I google-chrome-stable_current_amd64.deb
#+END_SRC

- Checking if package is installed
#+BEGIN_SRC sh
dpkg --get-selections google-chrome-stable
#+END_SRC

- list all the files that are installed with a pkg
#+BEGIN_SRC sh
dpkg -L linux-headers-generic
#+END_SRC

- list all the files that will be installed
#+BEGIN_SRC sh
dpkg --content telnet.deb
#+END_SRC

***** Dealing with missing dependencies with .deb files
#+BEGIN_SRC sh
dpkg -i google-chrome-stable_current_amd64.deb
#+END_SRC
this will inform us that we are missing certain dependencies, we could now go and find all the missing dependencies or run
#+BEGIN_SRC sh
apt update
apt -f upgrade
#+END_SRC
the system is intelligent to know that we were searching for the previous missing depencies and will go and pull the packages
#+BEGIN_SRC sh
dpkg -i google-chrome-stable_current_amd64.deb
#+END_SRC
now the installation will complete

**** Adding an additional architecture
this comes in handy when you need to install a 32bit application on a
64bit machine
#+BEGIN_SRC sh
dpkg --add-architecture i386
apt-get update
#+END_SRC

*** apt-get
**** Basic Actions
- Update available software database
#+BEGIN_SRC sh
apt-get update
apt update
#+END_SRC

- Upgrade all software available for upgrade
#+BEGIN_SRC sh
apt-get upgrade
apt upgrade
#+END_SRC

- Upgrade with a little intelligence
#+BEGIN_SRC sh
apt-get dist-upgrade
#+END_SRC
Tries to not break any applications

- Install
#+BEGIN_SRC sh
apt-get install application
#+END_SRC

- Remove
#+BEGIN_SRC sh
apt-get remove application
#+END_SRC
this will only remove package files, not configuration files

- Purge
#+BEGIN_SRC sh
apt-get purge apllication
#+END_SRC
This will attempt to remove all configuration files

- Search for an application
#+BEGIN_SRC sh
apt-cache search vsftpd
#+END_SRC

- show information of an application
#+BEGIN_SRC sh
apt-cache show vsftpd
#+END_SRC

- show more detailed information of an application
#+BEGIN_SRC sh
apt-cache showpkg vsftpd
#+END_SRC

- Show all installed applications
#+BEGIN_SRC sh
apt-cache pkgnames
#+END_SRC
Apt only will not know about software installed with dpkg or from source unless told

- Fix broken dependencies
#+BEGIN_SRC sh
apt-get -f install
#+END_SRC
This comes in hand if you have installed a .deb with dpkg and there are some dependencies missing

- Download the source file
#+BEGIN_SRC sh
apt-get source nano
#+END_SRC
To keep track of installed applications from source make sure the source is added to /etc/apt/source.list. It will be a deb-src ....

- Download the .deb file but don't install
#+BEGIN_SRC sh
apt-get download nano
#+END_SRC

- Installing dependencies for a source file
#+BEGIN_SRC sh
apt-get build-dep application
#+END_SRC

- list all infomation on a package
#+BEGIN_SRC sh
apt-file find tmux
#+END_SRC

**** Advanced Actions
- apt-key
#+BEGIN_SRC sh
apt-key add saved_gpg_key
#+END_SRC
to add a gpg key to a repository, first download the key and save as a file.

- apt-Src
!Think this just brings both "apt-get" and "dpkg" togeather

Downloading the source

  Building source files
  #+BEGIN_SRC sh
  apt-src build package
  #+END_SRC
  
  Installing source files
  #+BEGIN_SRC sh
  apt-src package
  #+END_SRC

- Updating debian kernel
#+BEGIN_SRC 
apt-cache search linux-image
#+END_SRC
this will provide all available debian linux kernels

**** rollback an apt-get upgrade
Article: [[https://www.cyberciti.biz/howto/debian-linux/ubuntu-linux-rollback-an-apt-get-upgrade/][nixcraft]]
1. search the apt history for the date of the upgrade to rollback from
  > grep -A 2 'Start-Date: YYYY-MM-DD HH:MM:SS' /var/log/apt/history.log
2. create list of programs that are to be removed
  > grep -A 2 'Start-Date: YYYY-MM-DD HH:MM:SS' /var/log/apt/history.log | tail -1 >/tmp/packages.txt
3. edit the /tmp/packages.txt and delete the Install: word
  > sed -i 's/Install://' /tmp/packages.txt
4. Final clean up
  > tr ',' '\n' < /tmp/packages.txt | sed '/automatic)/d' | awk '{ print $1}' > /tmp/final.packages.txt
  > wc -l /tmp/packages.txt - this will give the number packages that were installed
5. run this script as root
# Run as root
# Store packages name in $p
p="$(</tmp/final.packages.txt)"
 
# Nuke it
apt-get --purge remove $p
 
#clears out the local repository of retrieved package files
apt-get clean
 
# Just in case ...
apt-get autoremove
 
# Verify disk space
df -H

*** apt
* Lectures
** Anatomy of a Debian Package - Google Tech Talk
url: [[https://www.youtube.com/watch?v%3DlFzPrzY2KFM&index%3D28&list%3DWL][Anatomy of a Debian Package]]
*** Structure of binary packages
+ Every .deb package is actually just an "ar"
+ data.tar.gz - files for the filesystem
+ control.tar.gz - maintainer scripts and extra meta data
  - Package name
  - Source package - can contain many packages - eg php core, modules etc
  - Version 
    - upstream version xxx-
    - verion of the debian package -x
  - Architecture
  - Metadata for software relationships to other software
    - Depends
    - Recommends
    - Suggests
    - Replaces
    - Conflicts
    - Enhances
  - Maintainer Scripts - executed on installation and removal - usually bash or perl. The std scripts are:
    - preinst - run prior to extraction
    - postinst - run after extraction
    - prerm - run prior to removal
    - postrm - run after removal


+ debian-binary - package version: currently 2.0
  
> ar t xxx.deb
- this will break the deb into its constituent parts.

**** Installation Sequence
1. dpkg -i
2. Debconf - this is where config questions are asked
3. prinst install
4. Package unpack
5. Package files are installed, but config is still to be done
6. postinst install
7. Package is fully installed and ready to use
   
**** Removal Sequence
1. dpkg -r
2. preem remove
3. Program files are removed
4. postrm remove
5. Residual config infomation is all that remains
6. postrm purge
7. Nothing left
  
**** dpkg
+ dpkg --info xxx.deb - Examine package metadata
+ dpkg --contents xxx.deb - File listing
+ dpkg --unpack xxx.deb - Extract the package locally
+ dpkg --install xxx.deb - Extract and run config scripts

*** Structure of source packages
A source package is an architecture independent archive of everything neded to build a binary package:

+ xxx.dsc - Overall control file containing a description and fields for build parameters.
+ xxx.orig.tar.gz - Original source code as provided by upsteam.
+ xxx.diff.gz - All changes applied for Debian.

These three create the binary package when compiled.

> tar zxf xxx.tar.gz
This will extract the source files 

**** Build suites
+ debhelper
+ dh-make
  - used to bootstrap an architecture to build around
  - contains heler files for building the package.
  - very well documented
    
**** Build-Time Helpers
Using one of the following packages will help with a sanity check.
+ dpkg-buildpackage
  - cleans source
  - builds the binary packages
  - builds description and changes files
  - signs the package
+ debuild
  - wraps dpkg-buildpackage and adds extra bits like automatic lintian/linda checks.
+ pbuilder
  - builds in a clean chroot env
+ cvs-buildpackage
  - pulls a release from cvs and builds it   
+ dpatch
+ dbs
+ cdbs

+ lintian | linda sanity check the build.
  - makesure that no cruft is left behind.
  - creates cpy right file if one isn't provided.

ITP - Intention To Package - informs other maintainers that you are working on the project.

*** The future: Wig & Pen format
+ Multiple upstream tarball supported.
+ The "Bebian Diff" may be replaced by a "Debian Tar"
+ Bzip2 compression supported as alternative to gzip.

*** RPM to DEB
+ Alien but not advised, ok for quick fix

** Ubuntu snaps: From Zero to Hero
YouTube: [[https://www.youtube.com/watch?v%3DMM6m2Ju7-lE][From Zero to Hero]] - Didier Roche
- snap uses squashfs, /snap/<snap_name>/<version>
  - the snap can contain servicees
- the snap has access to:
  - the snap will have access to common root writable area(for services)
  - common user writable area
  - versioned root writable area(for services)
  - versioned user writable area
    [[file://home/crito/Picture/org/snappy_overview.png][Snappy Overview]]
- it sees its onw /, /var/lib/snapd/hostfs(from host), /sys, /dev/<device>
- snaps are confined and isolated
  [[file://home/crito/Pictures/org/snappy_interact.png][How snaps interact]]

+ Benefits for application devs
  - not reliant on OS to provide libraries
  - devs control dependencies
  - they are in control of update of the application
  - they can provide different versions of snaps e.g. edge, beta, candidate, stable

+ Ubuntu Core
  [[file://home/crito/Pictures/org/buntu_core.png][An ll-snaps system]]
  
- When snaps are installed they automatically start their service
  
+ Create a snap
1. git pull <application>
2. move into application directory
3. use snapcraft to initialise a snap
#+BEGIN_SRC sh
snapcraft init
#+END_SRC
4. This command produces a yaml file that allows details of the application to be added to
  - name:
    version:
    summary:
    description:
    grade:
    parts:

* Articles
* Books
[[file://home/crito/Documents/Linux/Debian/Debian-Linux_Ref_Card.pdf][Debian Reference Card]]
[[file://home/crito/Documents/Linux/Debian/Debian7_System_Administration_Best_Practices.pdf][Debian 7 - System Administration Best Practices]]
[[file://home/crito/Documents/Linux/Debian/Debian7_System_Administration_Best_Practices.pdf][Debian 7: System Administration Best Practices]]
[[file://home/crito/Documents/Linux/Debian/The_Debian_System-Concepts_and_Techniques.pdf][The Debian System - Concepts and Techniques - No Starch Press]]

* Links


* Ubuntu - LTS 5yrs - Release Cycle (LTS) 6yrs - Point Release 6mth
* Usage
** Mail Server 
file://home/crito/org/tech/linux_concepts/ubuntu_mail_server.org
** Error with apt-get lock file
- if find that you get this error
#+BEGIN_EXAMPLE
E: Could not get lock /var/lib/dpkg/lock - open (11 Resource temporarily unavailable)
E: Unable to lock the administration directory (/var/lib/dpkg/) is another process using it?
#+END_EXAMPLE

- you will need to rm the lock files at
  - /var/lib/apt/lists/lock
  - /var/cache/apt/archives/lock
  - /var/lib/dpkg/lock

** Changing default text editor
#+BEGIN_SRC sh
update-alternatives --config editor
#+END_SRC
* Package Management
** Files
/etc/apt/sources.list
** Create a local repository for Ubuntu (for local updates)

- install proftpd and apt-mirror 
#+BEGIN_SRC sh
apt-get install apt-mirror proftpd-basic
#+END_SRC

- proftd will provide an ncurses setup

[[file://home/crito/Pictures/org/deb_local_repo0.png]]
the inetd is more appropriate for sysvinit, whereas standalone is more suited for systemd   

- test ftp with localhost
#+BEGIN_SRC sh
ftp localhost
#+END_SRC
this should connect you to the ftp server

- Now vist the Ubuntu Mirror Acheive https://launchpad.net/ubuntu/+archivemirrors
  - choose a mirror that has ftp, sftp options
    
- edit mirror
#+BEGIN_EXAMPLE
set base_path /opt/dist-mirror
set_nthreads 20
set _tilde 0

# Where I am mirroring from
deb http://mirror.lstn.net/ubuntu/ trusty main
deb-src http://mirror.lstn.net/ubuntu/ trusty main
#+END_EXAMPLE
the "Where I am mirroring from, should be the mirror that you choose

- mkdir /opt/dist-mirror and download the mirrorlist
#+BEGIN_SRC sh
mkdir /opt/dist-mirror
cd /opt/dist-mirror
apt-mirror
#+END_SRC
this will download the repo from the mirror (around an hour)

- configure a mirror path for the proftpd
#+BEGIN_SRC sh
mount --bind /opt/dist-mirror/mirror/mirror.lstn.net/ /srv/ftp/
#+END_SRC

- make the mount bind at boot add this to /etc/rc.local
#+BEGIN_EXAMPLE
mount --bind /opt/dist-mirror/mirror/mirror.lstn.net/ /srv/ftp/
#+END_EXAMPLE

- use cron to update the repo
#+BEGIN_SRC sh
cron -e
#+END_SRC
#+BEGIN_EXAMPLE
0 3 * * * /usr/bin/apt-mirror >> /home/jim/mirror.log
#+END_EXAMPLE
3 am every day update the log files

*** Configuring the client
    
- edit the /etc/apt/sources.list, add the following
#+BEGIN_EXAMPLE
deb ftp://192.168.1.135:/ubuntu trusty main
deb-src ftp://192.168.1.135:/ubuntu trusty main
#+END_EXAMPLE

- update
#+BEGIN_SRC sh
apt-get update
#+END_SRC
errors may occur, such as throwing errors asking for 32bit arch on a 64bit arch

- if this does occur edit the /etc/apt/sources.list
#+BEGIN_SRC sh
deb [arch=amd64]ftp://192.168.1.135:/ubuntu trusty main
deb-src [arch=amd64]ftp://192.168.1.135:/ubuntu trusty main
#+END_SRC
this should resolve this issue

- test by running an apt-cache search and view the repo address
#+BEGIN_SRC sh
apt-cache search git
#+END_SRC

* Lecture
* Tutorial
* Books
[[file://home/crito/Documents/Linux/Debian/Ubuntu_Linux_Toolbox_1000_Plus_Commands.pdf][Ubuntu Linux Toolbox]]
[[file://home/crito/Documents/Linux/Debian/Ubuntu_Unleashed_2015.pdf][Ubuntu Unleashed 2015]]
[[file://home/crito/Documents/Linux/Debian/Ubuntu_Linux_Secrets.pdf][Ubuntu Linux Secrets]]
[[file://home/crito/Documents/Linux/Debian/Troubleshooting_Ubuntu_Server.pdf][Troubleshooting Ubuntu Server]]

* Links

* Kali
*** Adding Kali tools to Debian
Kalis tools can be added to a debian machine with katoolin
1. > git [[https://github.com/LionSec/katoolin.git]]
2. >cp katoolin/katoolin /usr/bin/katoolin
3.> chmod +x /usr/bin/katoolin

You now have an application called katoolin
> katoolin

This will provide numerical options to choose from
To exit ctrl c

*** Adding wifi interface
1. Close virtualbox
2. Execute in bash (for Debians): sudo adduser $USER vboxusers. If you don't have a Debian-like distro, read here.
3. Log out and log in again
4. Attach to your PC the USB devices you want to be automatically mounted in the VM (virtual machine).
5. Open Virtualbox
6. Select your VM and go to "Machine" -> "Settings" -> "USB".
7. Check "Enable USB Controller"; click on the icon with the USB plug and the plus, and click on the devices you want to be automatically mounted in the VM. Click "Ok".
8. Click on "Start" toolbar button, and ensure your USB devices are recognized and mounted by the VM. Remember that you have to unmount them in the host OS too if you have to disconnect them after you exit the VM.
* Usage
* Lecture
* Tutorial
* Books
* Links
