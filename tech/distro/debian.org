#+TAGS: deb ubuntu


* Debian								:deb:
* Usage
** General System Configuration					   :deb:conf:
*** Setting the default text editor
> set EDITOR=<txt\_editor>
> set VISUAL=<txt\_editor>

Using update-alternative
> update-alternative --config editor

*** Language & User
*** Change Default Language
> dpkg -reconfigure locales
or
+ edit /etc/locale.gen - uncomment the correct language
> locale-gen
url:https://wiki.archlinux.org/index.php/locale

*** Change Keyboard Layout
> dpkg -reconfigure console-setup
or in older debian
> dpkg -reconfigure console-data
or on X11
> setxkbmap gb

** Configuring Networking					    :deb:net:
[[https://wiki.debian.org/NetworkConfiguration#Setting_up_an_Ethernet_Interface][Network Configuration]]
Files:
*** /etc/interfaces
*** /etc/resolv.conf
resolv.conf This is the file used for setting the DNS to use Format in the file: 
nameserver x.x.x.x 
- any number of dns servers can be added 
Concepts:
*** Configuration Tools
- [[file://home/crito/org/tech/cmds/wpa_cli.org][wpa_cli]]
- [[file://home/crito/org/tech/cmds/netctl.org][netctl]]
*** Creating a bridge
**** iproute2
Create <ip link add name <bridge\_name> type bridge <ip link set
<bridge\_name> up

To add an interface into the bridge it must be up <ip link set
<interface> up <ip link set <interface> master <bridge\_name>

To show existing bridges and associated interfaces use <bridge link

To remove an interface from the bridge <ip link set <interface> nomaster

To delete a bridge <ip link delete <bridge\_name> type bridge

**** bridge-utils
Create <brctl addbr <bridge\_name>

To add an interface into the bridge <brctl addif <bridge\_name>
<interface>

Adding an interface to a bridge will cause that interface to loose its
ip address.

To show existing bridges and associated interfaces use <brctl show

Set the bridge device up <ip link set up dev <bridge\_name>

Deleting a bridge requires that the bridge is down <ip link set dev
<bridge\_name> down <brctl delbr <bridge\_name>

** Desktop User Configuration					     :deb:de:

** resolv.conf keeps being over-written
- NetworkManager
  - If networkManager is use add dns=none to [main]

- Kali - the above didn't work - did the following 
  - removed the sym link /etc/resolv.conf -> /var/NetworkManager/resolv.conf
  - created a new /etc/resolv.conf and then made immutable
    - chattr +i /etc/resolv.conf
* Based Distros
** Kali								       :kali:
*** Adding Kali tools to Debian
Kalis tools can be added to a debian machine with katoolin
1. > gitÂ [[https://github.com/LionSec/katoolin.git]]
2. >cp katoolin/katoolin /usr/bin/katoolin
3.> chmod +x /usr/bin/katoolin

You now have an application called katoolin
> katoolin

This will provide numerical options to choose from
To exit ctrl c

*** Adding wifi interface
1. Close virtualbox
2. Execute in bash (for Debians): sudo adduser $USER vboxusers. If you don't have a Debian-like distro, read here.
3. Log out and log in again
4. Attach to your PC the USB devices you want to be automatically mounted in the VM (virtual machine).
5. Open Virtualbox
6. Select your VM and go to "Machine" -> "Settings" -> "USB".
7. Check "Enable USB Controller"; click on the icon with the USB plug and the plus, and click on the devices you want to be automatically mounted in the VM. Click "Ok".
8. Click on "Start" toolbar button, and ensure your USB devices are recognized and mounted by the VM. Remember that you have to unmount them in the host OS too if you have to disconnect them after you exit the VM.

* Lectures
** Anatomy of a Debian Package - Google Tech Talk
url: [[https://www.youtube.com/watch?v%3DlFzPrzY2KFM&index%3D28&list%3DWL][Anatomy of a Debian Package]]
*** Structure of binary packages
+ Every .deb package is actually just an "ar"
+ data.tar.gz - files for the filesystem
+ control.tar.gz - maintainer scripts and extra meta data
  - Package name
  - Source package - can contain many packages - eg php core, modules etc
  - Version 
    - upstream version xxx-
    - verion of the debian package -x
  - Architecture
  - Metadata for software relationships to other software
    - Depends
    - Recommends
    - Suggests
    - Replaces
    - Conflicts
    - Enhances
  - Maintainer Scripts - executed on installation and removal - usually bash or perl. The std scripts are:
    - preinst - run prior to extraction
    - postinst - run after extraction
    - prerm - run prior to removal
    - postrm - run after removal


+ debian-binary - package version: currently 2.0
  
> ar t xxx.deb
- this will break the deb into its constituent parts.

**** Installation Sequence
1. dpkg -i
2. Debconf - this is where config questions are asked
3. prinst install
4. Package unpack
5. Package files are installed, but config is still to be done
6. postinst install
7. Package is fully installed and ready to use
   
**** Removal Sequence
1. dpkg -r
2. preem remove
3. Program files are removed
4. postrm remove
5. Residual config infomation is all that remains
6. postrm purge
7. Nothing left
  
**** dpkg
+ dpkg --info xxx.deb - Examine package metadata
+ dpkg --contents xxx.deb - File listing
+ dpkg --unpack xxx.deb - Extract the package locally
+ dpkg --install xxx.deb - Extract and run config scripts

*** Structure of source packages
A source package is an architecture independent archive of everything neded to build a binary package:

+ xxx.dsc - Overall control file containing a description and fields for build parameters.
+ xxx.orig.tar.gz - Original source code as provided by upsteam.
+ xxx.diff.gz - All changes applied for Debian.

These three create the binary package when compiled.

> tar zxf xxx.tar.gz
This will extract the source files 

**** Build suites
+ debhelper
+ dh-make
  - used to bootstrap an architecture to build around
  - contains heler files for building the package.
  - very well documented
    
**** Build-Time Helpers
Using one of the following packages will help with a sanity check.
+ dpkg-buildpackage
  - cleans source
  - builds the binary packages
  - builds description and changes files
  - signs the package
+ debuild
  - wraps dpkg-buildpackage and adds extra bits like automatic lintian/linda checks.
+ pbuilder
  - builds in a clean chroot env
+ cvs-buildpackage
  - pulls a release from cvs and builds it   
+ dpatch
+ dbs
+ cdbs

+ lintian | linda sanity check the build.
  - makesure that no cruft is left behind.
  - creates cpy right file if one isn't provided.

ITP - Intention To Package - informs other maintainers that you are working on the project.

*** The future: Wig & Pen format
+ Multiple upstream tarball supported.
+ The "Bebian Diff" may be replaced by a "Debian Tar"
+ Bzip2 compression supported as alternative to gzip.

*** RPM to DEB
+ Alien but not advised, ok for quick fix

** Ubuntu snaps: From Zero to Hero
YouTube: [[https://www.youtube.com/watch?v%3DMM6m2Ju7-lE][From Zero to Hero]] - Didier Roche
- snap uses squashfs, /snap/<snap_name>/<version>
  - the snap can contain servicees
- the snap has access to:
  - the snap will have access to common root writable area(for services)
  - common user writable area
  - versioned root writable area(for services)
  - versioned user writable area
    [[file://home/crito/Picture/org/snappy_overview.png][Snappy Overview]]
- it sees its onw /, /var/lib/snapd/hostfs(from host), /sys, /dev/<device>
- snaps are confined and isolated
  [[file://home/crito/Pictures/org/snappy_interact.png][How snaps interact]]

+ Benefits for application devs
  - not reliant on OS to provide libraries
  - devs control dependencies
  - they are in control of update of the application
  - they can provide different versions of snaps e.g. edge, beta, candidate, stable

+ Ubuntu Core
  [[file://home/crito/Pictures/org/buntu_core.png][An ll-snaps system]]
  
- When snaps are installed they automatically start their service
  
+ Create a snap
1. git pull <application>
2. move into application directory
3. use snapcraft to initialise a snap
#+BEGIN_SRC sh
snapcraft init
#+END_SRC
4. This command produces a yaml file that allows details of the application to be added to
  - name:
    version:
    summary:
    description:
    grade:
    parts:

* Articles
* Books
[[file://home/crito/Documents/Linux/Debian/Debian7_System_Administration_Best_Practices.pdf][Debian 7: System Administration Best Practices]]
[[file://home/crito/Documents/Linux/Debian/The_Debian_System-Concepts_and_Techniques.pdf][The Debian System - Concepts and Techniques - No Starch Press]]

* Links
