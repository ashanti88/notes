#+TAGS: debian .deb ubuntu


* Debian - 3-4yrs Life Cycle - Release Cycle 2yrs
* Usage
** General System Configuration
*** Setting the default text editor
> set EDITOR=<txt\_editor>
> set VISUAL=<txt\_editor>

Using update-alternative
> update-alternative --config editor

*** Language & User
*** Change Default Language
> dpkg -reconfigure locales
or
+ edit /etc/locale.gen - uncomment the correct language
> locale-gen
url:https://wiki.archlinux.org/index.php/locale

*** Change Keyboard Layout
> dpkg -reconfigure console-setup
or in older debian
> dpkg -reconfigure console-data
or on X11
> setxkbmap gb

** Configuring Networking
[[https://wiki.debian.org/NetworkConfiguration#Setting_up_an_Ethernet_Interface][Network Configuration]]
Files:
*** /etc/interfaces
*** /etc/resolv.conf
resolv.conf This is the file used for setting the DNS to use Format in the file: 
nameserver x.x.x.x 
- any number of dns servers can be added 
Concepts:
*** Configuration Tools
- [[file://home/crito/org/tech/cmds/wpa_cli.org][wpa_cli]]
- [[file://home/crito/org/tech/cmds/netctl.org][netctl]]
*** Creating a bridge
**** iproute2
Create <ip link add name <bridge\_name> type bridge <ip link set
<bridge\_name> up

To add an interface into the bridge it must be up <ip link set
<interface> up <ip link set <interface> master <bridge\_name>

To show existing bridges and associated interfaces use <bridge link

To remove an interface from the bridge <ip link set <interface> nomaster

To delete a bridge <ip link delete <bridge\_name> type bridge

**** bridge-utils
Create <brctl addbr <bridge\_name>

To add an interface into the bridge <brctl addif <bridge\_name>
<interface>

Adding an interface to a bridge will cause that interface to loose its
ip address.

To show existing bridges and associated interfaces use <brctl show

Set the bridge device up <ip link set up dev <bridge\_name>

Deleting a bridge requires that the bridge is down <ip link set dev
<bridge\_name> down <brctl delbr <bridge\_name>

** Desktop User Configuration

** resolv.conf keeps being over-written
- NetworkManager
  - If networkManager is use add dns=none to [main]

- Kali - the above didn't work - did the following 
  - removed the sym link /etc/resolv.conf -> /var/NetworkManager/resolv.conf
  - created a new /etc/resolv.conf and then made immutable
    - chattr +i /etc/resolv.conf
** Setting up iptables Debian

- create a test set of rules
/etc/iptables.test.rules
#+BEGIN_EXAMPLE
*filter

# Allows all loopback (lo0) traffic and drop all traffic to 127/8 that doesn't use lo0
-A INPUT -i lo -j ACCEPT
-A INPUT ! -i lo -d 127.0.0.0/8 -j REJECT

# Accepts all established inbound connections
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# Allows all outbound traffic
# You could modify this to only allow certain traffic
-A OUTPUT -j ACCEPT

# Allows HTTP and HTTPS connections from anywhere (the normal ports for websites)
-A INPUT -p tcp --dport 80 -j ACCEPT
-A INPUT -p tcp --dport 443 -j ACCEPT

# Allows SSH connections 
# The --dport number is the same as in /etc/ssh/sshd_config
-A INPUT -p tcp -m state --state NEW --dport 22 -j ACCEPT

# Now you should read up on iptables rules and consider whether ssh access 
# for everyone is really desired. Most likely you will only allow access from certain IPs.

# Allow ping
#  note that blocking other types of icmp packets is considered a bad idea by some
#  remove -m icmp --icmp-type 8 from this line to allow all kinds of icmp:
#  https://security.stackexchange.com/questions/22711
-A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT

# log iptables denied calls (access via 'dmesg' command)
-A INPUT -m limit --limit 5/min -j LOG --log-prefix "iptables denied: " --log-level 7

# Reject all other inbound - default deny unless explicitly allowed policy:
-A INPUT -j REJECT
-A FORWARD -j REJECT

COMMIT
#+END_EXAMPLE

- activate the new rules
#+BEGIN_SRC sh
iptables-restore < /etc/iptables.test.rules
#+END_SRC

- confirm that the rules are correct
#+BEGIN_SRC sh
iptables -L
#+END_SRC

- if the rules are correct save to the master iptables file
#+BEGIN_SRC sh
iptables-save > /etc/iptables.up.rules
#+END_SRC

- create a file to start the iptable file on boot
/etc/network/if-pre-up.d/iptables
#+BEGIN_EXAMPLE
#!/bin/sh

/sbin/iptables-restore < /etc/iptables.up.rules
#+END_EXAMPLE

- set the file to executable
#+BEGIN_SRC sh
chmod +x /etc/network/if-pre-up.d/iptables
#+END_SRC

** Setting up LDAP
- install the required packages
#+BEGIN_SRC sh
apt-get install slapd ldap-utils
#+END_SRC

- will we be droped into an ncurses configuration process
  
1. We want to continue with the configuration proceess to create the requierd config and db 

[[file://home/crito/Pictures/org/deb_ldap_2.png]]


2. provide the DNS name 

[[file://home/crito/Pictures/org/deb_ldap_3.png]]


3. provide the organisation name

[[file://home/crito/Pictures/org/deb_ldap_4.png]]


4. now we need to provide an admin password 

[[file://home/crito/Pictures/org/deb_ldap_5.png]]


5. confirm the password

[[file://home/crito/Pictures/org/deb_ldap_6.png]]


6. Now want to choose the type of database to use

[[file://home/crito/Pictures/org/deb_ldap_7.png]]

MDB - uses LMDB high performance replacement for Berkeley DB
BDB - deprecated, high-performance transactional database that uses Berkeley DB
HDB - deprecated, hierarchical transactional database that uses Berkeley DB

7. No point in risking losing the db in case of a mistake

[[file://home/crito/Pictures/org/deb_ldap_8.png]]


8. we want the old db to be moved

[[file://home/crito/Pictures/org/deb_ldap_9.png]]


- now confirm the configuration
#+BEGIN_EXAMPLE
root@alickmitchell4:~# ldapsearch -x
# extended LDIF
#
# LDAPv3
# base <dc=mylabserver, dc=com> (default) with scope subtree
# filter: (objectclass=*)
# requesting: ALL
#

# mylabserver.com
dn: dc=mylabserver,dc=com
objectClass: top
objectClass: dcObject
objectClass: organization
o: mylabserver.com
dc: mylabserver

# admin, mylabserver.com
dn: cn=admin,dc=mylabserver,dc=com
objectClass: simpleSecurityObject
objectClass: organizationalRole
cn: admin
description: LDAP administrator

# search result
search: 2
result: 0 Success

# numResponses: 3
# numEntries: 2
#+END_EXAMPLE

- We can now add our enteries
  - 2 options  
    i) individual on the cmd line
    ii) multiple entries with a file
    
- build the file
#+BEGIN_EXAMPLE
# User Entry
dn: cn=fred,dc=mylabserver,dc=com
cn: fred
objectClass: person
sn: last

# User Entry
dn: cn=phil,dc=mylabserver,dc=com
cn: phil
objectClass: person
sn: last

# User Entry
dn: cn=alice,dc=mylabserver,dc=com
cn: alice
objectClass: person
sn: last

# User Entry
dn: cn=milly,dc=mylabserver,dc=com
cn: milly
objectClass: person
sn: last
#+END_EXAMPLE

** Setting up Kerberos Server
Debian: https://debian-administration.org/article/570/MIT_Kerberos_installation_on_Debian

- installing the packages   
#+BEGIN_SRC sh
apt-get install krb5-{admin-server,kdc}
#+END_SRC

- this will drop us into an ncurses config process

- we will be asked for the Realm
  
file://home/crito/Pictures/org/deb_krb_1.png


- provide the hostname of the kerberos server

file://home/crito/Pictures/org/deb_krb_2.png


- enter the hostname of the administrative kerberos server

file://home/crito/Pictures/org/deb_krb_3.png


- confirm the configuration

file://home/crito/Pictures/org/deb_krb_4.png


- this will create a config file /etc/krb5.conf
#+BEGIN_EXAMPLE
[realms]                                                                                      
        MYLABSERVER.COM = {                  
                kdc = alickmitchell4.mylabserver.com
                admin_server = alickmitchell4.mylabserver.com
                default_domain = mylabserver.com
        }                                  

[domain_realm]
        .mylabserver.com = MYLABSERVER.COM
        mylabserver.com = MYLABSERVER.COM

[logging]
        kdc = /var/log/kerberos/krb5kdc.log
        admin_server = /var/log/kerberos/kadmin.log
        default = /var/log/kerberos/krb5lib.log
#+END_EXAMPLE  

- make the logging directory
#+BEGIN_SRC sh
mkdir /var/log/kerberos
#+END_SRC

- restart the kerberos admin server
#+BEGIN_SRC sh
systemctl restart krb5-admin-server
#+END_SRC

- restart the kdc
#+BEGIN_SRC sh
systemctl restart krb5-kdc
#+END_SRC

- Intial test of kerberos
#+BEGIN_EXAMPLE
root@alickmitchell4:~# kadmin.local 
kadmin.local: cannot parse </var/log/kerberos/kadmin.log>
kadmin.local: warning - logging entry syntax error
Authenticating as principal root/admin@MYLABSERVER.COM with password.
kadmin.local:  listprincs
K/M@MYLABSERVER.COM
kadmin/admin@MYLABSERVER.COM
kadmin/changepw@MYLABSERVER.COM
kadmin/ec2-34-244-249-41.eu-west-1.compute.amazonaws.com@MYLABSERVER.COM
kiprop/ec2-34-244-249-41.eu-west-1.compute.amazonaws.com@MYLABSERVER.COM
krbtgt/MYLABSERVER.COM@MYLABSERVER.COM
kadmin.local:  quit
#+END_EXAMPLE
the difference between kadmin.local and kadmin is that kadmin.local can only be run on the admin server and doesn't use the kerberos protocol to connect. You won't need a password for kadmin

- now edit the /etc/krb5kdc/kadm5.acl
#+BEGIN_EXAMPLE
*/admin *
#+END_EXAMPLE

- we can now create root/admin
#+BEGIN_EXAMPLE
root@alickmitchell4:~# kadmin.local
kadmin.local: cannot parse </var/log/kerberos/kadmin.log>
kadmin.local: warning - logging entry syntax error
Authenticating as principal root/admin@MYLABSERVER.COM with password.
kadmin.local:  addprinc root/admin
WARNING: no policy specified for root/admin@MYLABSERVER.COM; defaulting to no policy
Enter password for principal "root/admin@MYLABSERVER.COM": 
Re-enter password for principal "root/admin@MYLABSERVER.COM": 
Principal "root/admin@MYLABSERVER.COM" created.
kadmin.local:  quit
#+END_EXAMPLE

- makesure that you have the ip machine in /etc/hosts
#+BEGIN_SRC sh
172.31.107.9 alickmitchell4.mylabserver.com
#+END_SRC

- restart the admin server
#+BEGIN_SRC sh
systemctl restart krb5-admin-server
#+END_SRC

- now test that we can connect with kadmin
#+BEGIN_EXAMPLE
root@alickmitchell4:~# kadmin
Authenticating as principal root/admin@MYLABSERVER.COM with password.
Password for root/admin@MYLABSERVER.COM: 
kadmin:  listprincs 
K/M@MYLABSERVER.COM
kadmin/admin@MYLABSERVER.COM
kadmin/changepw@MYLABSERVER.COM
kadmin/ec2-34-244-249-41.eu-west-1.compute.amazonaws.com@MYLABSERVER.COM
kiprop/ec2-34-244-249-41.eu-west-1.compute.amazonaws.com@MYLABSERVER.COM
krbtgt/MYLABSERVER.COM@MYLABSERVER.COM
root/admin@MYLABSERVER.COM
kadmin:  quit
#+END_EXAMPLE

- now create a newuser that we will add as a principle
#+BEGIN_EXAMPLE
root@alickmitchell4:~# adduser fred
Adding user `fred' ...
Adding new group `fred' (1002) ...
Adding new user `fred' (1002) with group `fred' ...
Creating home directory `/home/fred' ...
Copying files from `/etc/skel' ...
Enter new UNIX password: 
Retype new UNIX password: 
passwd: password updated successfully
You are required to change your password immediately (root enforced)
chfn: PAM: Authentication token is no longer valid; new one required
adduser: `/usr/bin/chfn fred' returned error code 1. Exiting.
#+END_EXAMPLE

- add the newuser to kerberos
#+BEGIN_EXAMPLE
root@alickmitchell4:~# kadmin
Authenticating as principal root/admin@MYLABSERVER.COM with password.
Password for root/admin@MYLABSERVER.COM: 
kadmin:  addprinc fred
WARNING: no policy specified for fred@MYLABSERVER.COM; defaulting to no policy
Enter password for principal "fred@MYLABSERVER.COM": 
Re-enter password for principal "fred@MYLABSERVER.COM": 
Principal "fred@MYLABSERVER.COM" created.
kadmin:  quit
#+END_EXAMPLE

- check the ticket cache for issued tickets
#+BEGIN_EXAMPLE
root@alickmitchell4:~# klist 
klist: No credentials cache found (filename: /tmp/krb5cc_0)
#+END_EXAMPLE
This is okay. There are no tickets and there's no credentials cache created, since we didn't authenticate yet :) So let's run 

- lets get a ticket for fred
#+BEGIN_EXAMPLE
root@alickmitchell4:~# su fred
fred@alickmitchell4:/root$ kinit
Password for fred@MYLABSERVER.COM: 
fred@alickmitchell4:/root$ klist
Ticket cache: FILE:/tmp/krb5cc_1002
Default principal: fred@MYLABSERVER.COM

Valid starting       Expires              Service principal
06/13/2018 08:23:04  06/13/2018 18:23:04  krbtgt/MYLABSERVER.COM@MYLABSERVER.COM
        renew until 06/14/2018 08:22:58
#+END_EXAMPLE

- destory fred's ticket
#+BEGIN_SRC sh
kdestroy
#+END_SRC

- we will now test this will ssh
I was having problems connecting over ssh with kerberos(kept asking for password) due to not having a host/alickmitchell4.com principle
#+BEGIN_EXAMPLE
root@alickmitchell4:~# kadmin.local
Authenticating as principal root/admin@MYLABSERVER.COM with password.
kadmin.local:  addprinc -randkey host/alickmitchell4.mylabserver.com
WARNING: no policy specified for host/alickmitchell4.mylabserver.com@MYLABSERVER.COM; defaultin
g to no policy
Principal "host/alickmitchell4.mylabserver.com@MYLABSERVER.COM" created.
kadmin.local:  quit
#+END_EXAMPLE

- I also had to use the ktadd, to create the keyfile
#+BEGIN_EXAMPLE
root@alickmitchell4:~# kadmin.local 
Authenticating as principal root/admin@MYLABSERVER.COM with password.
kadmin.local:  ktadd host/alickmitchell4.mylabserver.com
Entry for principal host/alickmitchell4.mylabserver.com with kvno 2, encryption type aes256-cts
-hmac-sha1-96 added to keytab FILE:/etc/krb5.keytab.
Entry for principal host/alickmitchell4.mylabserver.com with kvno 2, encryption type aes128-cts
-hmac-sha1-96 added to keytab FILE:/etc/krb5.keytab.
kadmin.local:  quit            
#+END_EXAMPLE

- this then allowed password free ssh

* Package Management
** Files
/etc/apt/sources.list    - this is the list of repos that debian will use for package installation
/etc/apt/sources.list.d/ - this is where you can add other repos for the apt tool to query
/etc/apt/trusted.gpg     -

** Cmds
*** dpkg
Install
#+BEGIN_SRC sh
dpkg -i application.deb
#+END_SRC
*makesure to add the deb-src to the source.list for updates

Remove
#+BEGIN_SRC sh
dpkg -r application.deb
#+END_SRC

Purge
#+BEGIN_SRC sh
dpkg -P application.deb
#+END_SRC

- List all installed packages
#+BEGIN_SRC sh
dpkg -l
#+END_SRC

- List all files installed with package
#+BEGIN_SRC sh
dpkg -L nano
#+END_SRC

- Query a .deb package, this will show dependencies, arch, version, package-name etc
#+BEGIN_SRC sh
dpkg -I google-chrome-stable_current_amd64.deb
#+END_SRC

- Checking if package is installed
#+BEGIN_SRC sh
dpkg --get-selections google-chrome-stable
#+END_SRC

- list all the files that are installed with a pkg
#+BEGIN_SRC sh
dpkg -L linux-headers-generic
#+END_SRC

- list all the files that will be installed
#+BEGIN_SRC sh
dpkg --content telnet.deb
#+END_SRC

- Adding an additional architecture
#+BEGIN_SRC sh
dpkg --add-architecture i386
apt-get update
#+END_SRC
this comes in handy when you need to install a 32bit application on a 64bit machine

*** apt-get
- Update available software database
#+BEGIN_SRC sh
apt-get update
apt update
#+END_SRC

- Upgrade all software available for upgrade
#+BEGIN_SRC sh
apt-get upgrade
apt upgrade
#+END_SRC

- Upgrade with a little intelligence
#+BEGIN_SRC sh
apt-get dist-upgrade
#+END_SRC
Tries to not break any applications

- Install
#+BEGIN_SRC sh
apt-get install application
#+END_SRC

- Remove
#+BEGIN_SRC sh
apt-get remove application
#+END_SRC
this will only remove package files, not configuration files

- Purge
#+BEGIN_SRC sh
apt-get purge apllication
#+END_SRC
This will attempt to remove all configuration files

- Fix broken dependencies
#+BEGIN_SRC sh
apt-get -f install
#+END_SRC
This comes in hand if you have installed a .deb with dpkg and there are some dependencies missing

- Download the source file
#+BEGIN_SRC sh
apt-get source nano
#+END_SRC
To keep track of installed applications from source make sure the source is added to /etc/apt/source.list. It will be a deb-src ....

- Download the .deb file but don't install
#+BEGIN_SRC sh
apt-get download nano
#+END_SRC

- Installing dependencies for a source file
#+BEGIN_SRC sh
apt-get build-dep application
#+END_SRC

*** apt-cache
- Search for an application
#+BEGIN_SRC sh
apt-cache search vsftpd
#+END_SRC

- show information of an application
#+BEGIN_SRC sh
apt-cache show vsftpd
#+END_SRC

- show more detailed information of an application
#+BEGIN_SRC sh
apt-cache showpkg vsftpd
#+END_SRC

- Show all installed applications
#+BEGIN_SRC sh
apt-cache pkgnames
#+END_SRC
Apt only will not know about software installed with dpkg or from source unless told

- view statistics on the current number of packages and their package attributes
#+BEGIN_SRC sh
apt-cache stats
#+END_SRC

- view what dependencies a pkg has
#+BEGIN_SRC sh
apt-cache depends w3m
#+END_SRC

- show reverse dependencies of a pkg
#+BEGIN_SRC sh
apt-cache rdpends
#+END_SRC

*** apt-file
- list all infomation on a package
#+BEGIN_SRC sh
apt-file find tmux
#+END_SRC

*** apt-key
- to add a gpg key to a repository, first download the key and save as a file.
#+BEGIN_SRC sh
apt-key add saved_gpg_key
#+END_SRC

- list all keys in the /etc/apt/trusted

*** apt-src
- Think this just brings both "apt-get" and "dpkg" togeather

Downloading the source

  Building source files
  #+BEGIN_SRC sh
  apt-src build package
  #+END_SRC
  
  Installing source files
  #+BEGIN_SRC sh
  apt-src package
  #+END_SRC

- Updating debian kernel
this will provide all available debian linux kernels

*** apt
*** axi-cache
This is a more sophisticated tool than apt-cache, it tends to return more positive results

- to install
#+BEGIN_SRC sh
apt-get install atp-xapian-index
#+END_SRC

- search for an application
#+BEGIN_SRC sh
axi-cache search w3m
#+END_SRC

*** Frontends
- aptitude
  - Debian: https://wiki.debian.org/Aptitude
- synaptic
  - Debian: https://wiki.debian.org/Synaptic

** Dealing with missing dependencies with .deb files
#+BEGIN_SRC sh
dpkg -i google-chrome-stable_current_amd64.deb
#+END_SRC
this will inform us that we are missing certain dependencies, we could now go and find all the missing dependencies or run

#+BEGIN_SRC sh
apt update
apt -f upgrade
#+END_SRC
the system is intelligent to know that we were searching for the previous missing depencies and will go and pull the packages

#+BEGIN_SRC sh
dpkg -i google-chrome-stable_current_amd64.deb
#+END_SRC
now the installation will complete

** rollback an apt-get upgrade
Article: [[https://www.cyberciti.biz/howto/debian-linux/ubuntu-linux-rollback-an-apt-get-upgrade/][nixcraft]]
1. search the apt history for the date of the upgrade to rollback from
#+BEGIN_SRC sh
grep -A 2 'Start-Date: YYYY-MM-DD HH:MM:SS' /var/log/apt/history.log
#+END_SRC

2. create list of programs that are to be removed
#+BEGIN_SRC sh
grep -A 2 'Start-Date: YYYY-MM-DD HH:MM:SS' /var/log/apt/history.log | tail -1 >/tmp/packages.txt
#+END_SRC

3. edit the /tmp/packages.txt and delete the Install: word
#+BEGIN_SRC sh
sed -i 's/Install://' /tmp/packages.txt
#+END_SRC

4. Final clean up
#+BEGIN_SRC sh
tr ',' '\n' < /tmp/packages.txt | sed '/automatic)/d' | awk '{ print $1}' > /tmp/final.packages.txt
wc -l /tmp/packages.txt - this will give the number packages that were installed
#+END_SRC

5. run this script as root
#+BEGIN_EXAMPLE
#!/bin/bash
# Run as root
# Store packages name in $p
p="$(</tmp/final.packages.txt)"
 
# Nuke it
apt-get --purge remove $p
 
#clears out the local repository of retrieved package files
apt-get clean
 
# Just in case ...
apt-get autoremove
 
# Verify disk space
df -H
#+END_EXAMPLE

** Updating the debian kernel
- first find what kernels are avialable
#+BEGIN_SRC 
apt-cache search linux-image
#+END_SRC

- install the required kernel
#+BEGIN_SRC sh
apt-get install linux-image-4.9.0-5-amd64
#+END_SRC

** Accidental deletion of the dpkg package means that .debs are no long able to be installed
- we would first down load a copy of dpkg_1.17.23_amd64.deb (whatever the current version is)
#+BEGIN_SRC sh
wget http://ftp.uk.debian.org/debian/pool/main/d/dpkg/dpkg-dev_1.19.0.5_all.deb
#+END_SRC

- we can now extract the data.tar.gz
#+BEGIN_SRC sh
tar -xzf data.tar.gz
#+END_SRC
this may be in xz compression

- copy the binary for the data.tar.gz to /usr/bin
#+BEGIN_SRC sh
cp ./usr/bin/dpkg /usr/bin/
#+END_SRC

- you should have a working version of dpkg

** Checking Package Authenticity
With 3rd party applications you will have to import the key from the provider

- first download the public key, that is usually a text file
  
- we have to import this file
#+BEGIN_SRC sh
apt-key add < key.asc
#+END_SRC
key.asc is the downloaded file



* Lectures
** Anatomy of a Debian Package - Google Tech Talk
url: [[https://www.youtube.com/watch?v%3DlFzPrzY2KFM&index%3D28&list%3DWL][Anatomy of a Debian Package]]
*** Structure of binary packages
+ Every .deb package is actually just an "ar"
+ data.tar.gz - files for the filesystem
+ control.tar.gz - maintainer scripts and extra meta data
  - Package name
  - Source package - can contain many packages - eg php core, modules etc
  - Version 
    - upstream version xxx-
    - verion of the debian package -x
  - Architecture
  - Metadata for software relationships to other software
    - Depends
    - Recommends
    - Suggests
    - Replaces
    - Conflicts
    - Enhances
  - Maintainer Scripts - executed on installation and removal - usually bash or perl. The std scripts are:
    - preinst - run prior to extraction
    - postinst - run after extraction
    - prerm - run prior to removal
    - postrm - run after removal


+ debian-binary - package version: currently 2.0
  
> ar t xxx.deb
- this will break the deb into its constituent parts.

**** Installation Sequence
1. dpkg -i
2. Debconf - this is where config questions are asked
3. prinst install
4. Package unpack
5. Package files are installed, but config is still to be done
6. postinst install
7. Package is fully installed and ready to use
   
**** Removal Sequence
1. dpkg -r
2. preem remove
3. Program files are removed
4. postrm remove
5. Residual config infomation is all that remains
6. postrm purge
7. Nothing left
  
**** dpkg
+ dpkg --info xxx.deb - Examine package metadata
+ dpkg --contents xxx.deb - File listing
+ dpkg --unpack xxx.deb - Extract the package locally
+ dpkg --install xxx.deb - Extract and run config scripts

*** Structure of source packages
A source package is an architecture independent archive of everything neded to build a binary package:

+ xxx.dsc - Overall control file containing a description and fields for build parameters.
+ xxx.orig.tar.gz - Original source code as provided by upsteam.
+ xxx.diff.gz - All changes applied for Debian.

These three create the binary package when compiled.

> tar zxf xxx.tar.gz
This will extract the source files 

**** Build suites
+ debhelper
+ dh-make
  - used to bootstrap an architecture to build around
  - contains heler files for building the package.
  - very well documented
    
**** Build-Time Helpers
Using one of the following packages will help with a sanity check.
+ dpkg-buildpackage
  - cleans source
  - builds the binary packages
  - builds description and changes files
  - signs the package
+ debuild
  - wraps dpkg-buildpackage and adds extra bits like automatic lintian/linda checks.
+ pbuilder
  - builds in a clean chroot env
+ cvs-buildpackage
  - pulls a release from cvs and builds it   
+ dpatch
+ dbs
+ cdbs

+ lintian | linda sanity check the build.
  - makesure that no cruft is left behind.
  - creates cpy right file if one isn't provided.

ITP - Intention To Package - informs other maintainers that you are working on the project.

*** The future: Wig & Pen format
+ Multiple upstream tarball supported.
+ The "Bebian Diff" may be replaced by a "Debian Tar"
+ Bzip2 compression supported as alternative to gzip.

*** RPM to DEB
+ Alien but not advised, ok for quick fix

** Ubuntu snaps: From Zero to Hero
YouTube: [[https://www.youtube.com/watch?v%3DMM6m2Ju7-lE][From Zero to Hero]] - Didier Roche
- snap uses squashfs, /snap/<snap_name>/<version>
  - the snap can contain servicees
- the snap has access to:
  - the snap will have access to common root writable area(for services)
  - common user writable area
  - versioned root writable area(for services)
  - versioned user writable area
    [[file://home/crito/Picture/org/snappy_overview.png][Snappy Overview]]
- it sees its onw /, /var/lib/snapd/hostfs(from host), /sys, /dev/<device>
- snaps are confined and isolated
  [[file://home/crito/Pictures/org/snappy_interact.png][How snaps interact]]

+ Benefits for application devs
  - not reliant on OS to provide libraries
  - devs control dependencies
  - they are in control of update of the application
  - they can provide different versions of snaps e.g. edge, beta, candidate, stable

+ Ubuntu Core
  [[file://home/crito/Pictures/org/buntu_core.png][An ll-snaps system]]
  
- When snaps are installed they automatically start their service
  
+ Create a snap
1. git pull <application>
2. move into application directory
3. use snapcraft to initialise a snap
#+BEGIN_SRC sh
snapcraft init
#+END_SRC
4. This command produces a yaml file that allows details of the application to be added to
  - name:
    version:
    summary:
    description:
    grade:
    parts:

* Articles
* Books
[[file://home/crito/Documents/Linux/Debian/Debian-Linux_Ref_Card.pdf][Debian Reference Card]]
[[file://home/crito/Documents/Linux/Debian/Debian7_System_Administration_Best_Practices.pdf][Debian 7 - System Administration Best Practices]]
[[file://home/crito/Documents/Linux/Debian/Debian7_System_Administration_Best_Practices.pdf][Debian 7: System Administration Best Practices]]
[[file://home/crito/Documents/Linux/Debian/The_Debian_System-Concepts_and_Techniques.pdf][The Debian System - Concepts and Techniques - No Starch Press]]
[[file://home/crito/Documents/Linux/Debian/Debian_Handbook_Jessie.pdf][Debian Handbook Jessie]]

* Links


* Ubuntu - LTS 5yrs - Release Cycle (LTS) 6yrs - Point Release 6mth
* Usage
** Mail Server 
file://home/crito/org/tech/linux_concepts/ubuntu_mail_server.org
** Error with apt-get lock file
- if find that you get this error
#+BEGIN_EXAMPLE
E: Could not get lock /var/lib/dpkg/lock - open (11 Resource temporarily unavailable)
E: Unable to lock the administration directory (/var/lib/dpkg/) is another process using it?
#+END_EXAMPLE

- you will need to rm the lock files at
  - /var/lib/apt/lists/lock
  - /var/cache/apt/archives/lock
  - /var/lib/dpkg/lock

** Changing default text editor
#+BEGIN_SRC sh
update-alternatives --config editor
#+END_SRC
** Internal Port Forwarding with UFW Ubuntu 14.04
- install the ufw firewall, if not already installed
#+BEGIN_SRC sh
apt-get install ufw
update-rc.d ufw enable
service ufw start
#+END_SRC

- edit /etc/ufw/before.rules add these lines at the top
#+BEGIN_EXAMPLE
*nat
:PREROUTING ACCEPT [0:0]
-A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 5901
COMMIT
#+END_EXAMPLE
connect port 443 to port 5901

- open up the required ports
#+BEGIN_SRC sh
ufw allow 22
ufw allow 443
ufw allow 5901
#+END_SRC

- enable ufw
#+BEGIN_SRC sh
ufw enable
#+END_SRC

- reboot the server
#+BEGIN_SRC sh
reboot
#+END_SRC

* Package Management
** Files
/etc/apt/sources.list
** Create a local repository for Ubuntu (for local updates)

- install proftpd and apt-mirror 
#+BEGIN_SRC sh
apt-get install apt-mirror proftpd-basic
#+END_SRC

- proftd will provide an ncurses setup

[[file://home/crito/Pictures/org/deb_local_repo0.png]]
the inetd is more appropriate for sysvinit, whereas standalone is more suited for systemd   

- test ftp with localhost
#+BEGIN_SRC sh
ftp localhost
#+END_SRC
this should connect you to the ftp server

- Now vist the Ubuntu Mirror Acheive https://launchpad.net/ubuntu/+archivemirrors
  - choose a mirror that has ftp, sftp options
    
- edit mirror
#+BEGIN_EXAMPLE
set base_path /opt/dist-mirror
set_nthreads 20
set _tilde 0

# Where I am mirroring from
deb http://mirror.lstn.net/ubuntu/ trusty main
deb-src http://mirror.lstn.net/ubuntu/ trusty main
#+END_EXAMPLE
the "Where I am mirroring from, should be the mirror that you choose

- mkdir /opt/dist-mirror and download the mirrorlist
#+BEGIN_SRC sh
mkdir /opt/dist-mirror
cd /opt/dist-mirror
apt-mirror
#+END_SRC
this will download the repo from the mirror (around an hour)

- configure a mirror path for the proftpd
#+BEGIN_SRC sh
mount --bind /opt/dist-mirror/mirror/mirror.lstn.net/ /srv/ftp/
#+END_SRC

- make the mount bind at boot add this to /etc/rc.local
#+BEGIN_EXAMPLE
mount --bind /opt/dist-mirror/mirror/mirror.lstn.net/ /srv/ftp/
#+END_EXAMPLE

- use cron to update the repo
#+BEGIN_SRC sh
cron -e
#+END_SRC
#+BEGIN_EXAMPLE
0 3 * * * /usr/bin/apt-mirror >> /home/jim/mirror.log
#+END_EXAMPLE
3 am every day update the log files

*** Configuring the client
    
- edit the /etc/apt/sources.list, add the following
#+BEGIN_EXAMPLE
deb ftp://192.168.1.135:/ubuntu trusty main
deb-src ftp://192.168.1.135:/ubuntu trusty main
#+END_EXAMPLE

- update
#+BEGIN_SRC sh
apt-get update
#+END_SRC
errors may occur, such as throwing errors asking for 32bit arch on a 64bit arch

- if this does occur edit the /etc/apt/sources.list
#+BEGIN_SRC sh
deb [arch=amd64]ftp://192.168.1.135:/ubuntu trusty main
deb-src [arch=amd64]ftp://192.168.1.135:/ubuntu trusty main
#+END_SRC
this should resolve this issue

- test by running an apt-cache search and view the repo address
#+BEGIN_SRC sh
apt-cache search git
#+END_SRC

* Lecture
* Tutorial
* Books
[[file://home/crito/Documents/Linux/Debian/Ubuntu_Linux_Toolbox_1000_Plus_Commands.pdf][Ubuntu Linux Toolbox]]
[[file://home/crito/Documents/Linux/Debian/Ubuntu_Unleashed_2015.pdf][Ubuntu Unleashed 2015]]
[[file://home/crito/Documents/Linux/Debian/Ubuntu_Linux_Secrets.pdf][Ubuntu Linux Secrets]]
[[file://home/crito/Documents/Linux/Debian/Troubleshooting_Ubuntu_Server.pdf][Troubleshooting Ubuntu Server]]

* Links

* Kali
*** Adding Kali tools to Debian
Kalis tools can be added to a debian machine with katoolin
1. > git [[https://github.com/LionSec/katoolin.git]]
2. >cp katoolin/katoolin /usr/bin/katoolin
3.> chmod +x /usr/bin/katoolin

You now have an application called katoolin
> katoolin

This will provide numerical options to choose from
To exit ctrl c

*** Adding wifi interface
1. Close virtualbox
2. Execute in bash (for Debians): sudo adduser $USER vboxusers. If you don't have a Debian-like distro, read here.
3. Log out and log in again
4. Attach to your PC the USB devices you want to be automatically mounted in the VM (virtual machine).
5. Open Virtualbox
6. Select your VM and go to "Machine" -> "Settings" -> "USB".
7. Check "Enable USB Controller"; click on the icon with the USB plug and the plus, and click on the devices you want to be automatically mounted in the VM. Click "Ok".
8. Click on "Start" toolbar button, and ensure your USB devices are recognized and mounted by the VM. Remember that you have to unmount them in the host OS too if you have to disconnect them after you exit the VM.
* Usage
* Lecture
* Tutorial
* Books
* Links
