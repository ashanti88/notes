



* Lectures
** Anatomy of a Debian Package - Google Tech Talk
url:https://www.youtube.com/watch?v=lFzPrzY2KFM&index=28&list=WL

*** Structure of binary packages
+ Every .deb package is actually just an "ar"
+ data.tar.gz - files for the filesystem
+ control.tar.gz - maintainer scripts and extra meta data
  - Package name
  - Source package - can contain many packages - eg php core, modules etc
  - Version 
    - upstream version xxx-
    - verion of the debian package -x
  - Architecture
  - Metadata for software relationships to other software
    - Depends
    - Recommends
    - Suggests
    - Replaces
    - Conflicts
    - Enhances
  - Maintainer Scripts - executed on installation and removal - usually bash or perl. The std scripts are:
    - preinst - run prior to extraction
    - postinst - run after extraction
    - prerm - run prior to removal
    - postrm - run after removal


+ debian-binary - package version: currently 2.0
  
> ar t xxx.deb
- this will break the deb into its constituent parts.

**** Installation Sequence
1. dpkg -i
2. Debconf - this is where config questions are asked
3. prinst install
4. Package unpack
5. Package files are installed, but config is still to be done
6. postinst install
7. Package is fully installed and ready to use
   
**** Removal Sequence
1. dpkg -r
2. preem remove
3. Program files are removed
4. postrm remove
5. Residual config infomation is all that remains
6. postrm purge
7. Nothing left
  
**** dpkg
+ dpkg --info xxx.deb - Examine package metadata
+ dpkg --contents xxx.deb - File listing
+ dpkg --unpack xxx.deb - Extract the package locally
+ dpkg --install xxx.deb - Extract and run config scripts

*** Structure of source packages
A source package is an architecture independent archive of everything neded to build a binary package:

+ xxx.dsc - Overall control file containing a description and fields for build parameters.
+ xxx.orig.tar.gz - Original source code as provided by upsteam.
+ xxx.diff.gz - All changes applied for Debian.

These three create the binary package when compiled.

> tar zxf xxx.tar.gz
This will extract the source files 

**** Build suites
+ debhelper
+ dh-make
  - used to bootstrap an architecture to build around
  - contains heler files for building the package.
  - very well documented
    
**** Build-Time Helpers
Using one of the following packages will help with a sanity check.
+ dpkg-buildpackage
  - cleans source
  - builds the binary packages
  - builds description and changes files
  - signs the package
+ debuild
  - wraps dpkg-buildpackage and adds extra bits like automatic lintian/linda checks.
+ pbuilder
  - builds in a clean chroot env
+ cvs-buildpackage
  - pulls a release from cvs and builds it   
+ dpatch
+ dbs
+ cdbs

+ lintian | linda sanity check the build.
  - makesure that no cruft is left behind.
  - creates cpy right file if one isn't provided.

ITP - Intention To Package - informs other maintainers that you are working on the project.

*** The future: Wig & Pen format
+ Multiple upstream tarball supported.
+ The "Bebian Diff" may be replaced by a "Debian Tar"
+ Bzip2 compression supported as alternative to gzip.

*** RPM to DEB
+ Alien but not advised, ok for quick fix

* Articles

* Package Management
** dpkg

+ Install
> dpkg -i application.deb
*makesure to add the deb-src to the source.list for updates

+ Remove
> dpkg -r application.deb

+ Purge
> dpkg -P application.deb

+ Adding an additional architecture - this comes in handy when you need to install a 32bit application on a 64bit machine
> dpkg --add-architecture i386

+ Files added by package
> dpkg -L <package_name>

** apt
*** apt-get
+ Update available software database
> apt-get update
or
> apt update

+ Upgrade all software available for upgrade
> apt-get upgrade
or
> apt upgrade

+ Upgrade with a little intelligence, tries to not break any applications
> apt-get dist-upgrade

+ Installation
> apt-get install application

Remove
> apt-get remove application

+ Purge - This will attempt to remove all configuration files
> apt-get purge apllication

+ Search for an application
>apt-cache search "keyword"

+ Show all installed applications
Apt only will not know about software installed with dpkg or from source, unless told
> apt-cache pkgnames

+ Fix broken dependencies - This comes in hand if you have installed a .deb with dpkg and there are some dependencies missing
>apt-get -f install

+ Download the source file - To keep track of installed applications from source make sure the source is added to /etc/apt/source.list. It will be a deb-src ....
> apt-get source application

+ Installing dependencies for a source file
>apt-get build-dep application

*** apt-cache
> apt-cache search linux-image

this will provide all available debian linux kernels

*** apt-key
+ apt-key - to add a gpg key to a repository, first download the key and save as a file.
> apt-key add <saved\_gpg\_key>

*** apt-Src
! Think this just brings both "apt-get" and "dpkg" togeather

Downloading the source

+ Building source files
> apt-src build <package>

+ Installing source files
> apt-src

*Updating debian kernel*

* Networking 
** resolv.conf This is the file used for setting the DNS to use Format in the file: nameserver x.x.x.x 
+ any number of dns servers can be added 
** Setting wireless connection on headless machine 
1. Find the wireless interface > iwconfig 
2. Find the ESSID to connect to > iwlist @@html:<int>@@ s | grep ESSID 
3. Create the config file in /etc example ctrl\_interface=DIR=/var/run/wpa\_supplicant GROUP=netdev update\_config=1 country=GB network={ ssid="********" psk="********" key\_mgmt=WPA-PSK } 
4. Edit /etc/network/interfaces allow-hotplug wlan0 iface wlan0 inet dhcp wpa-conf /etc/wpa\_supplicant/wpa\_supplicant.conf 
5. Bring the interface up and down > sudo ifdown @@html:<int>@@ or > sudo ip link set @@html:<int>@@ down > sudo ifup @@html:<int>@@ or > sudo ip link set @@html:<int>@@ up -  if dhcp fails check the ssid and psk spelling ** netcl 
* Language & User
+ Change Default Language
> dpkg -reconfigure locales
or
+ edit /etc/locale.gen - uncomment the correct language
> locale-gen
url:https://wiki.archlinux.org/index.php/locale

+ Change Keyboard Layout
> dpkg -reconfigure console-setup
or in older debian
> dpkg -reconfigure console-data
or on X11
> setxkbmap gb
