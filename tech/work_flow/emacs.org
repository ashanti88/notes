
* Lecture
** Emacs Lisp Development Tips with John Wiegley
    
+ par edit mode

+ use paredit
  - many key bindings to learn
+ ctrl meta-x - will evaluate
+ ctrl-h f - this will produce a list of functions that are available in the environment
+ this will evaluate the elisp code ctrl-x ctrl-e
+ command-log-mode - this will show show on the screen keystrokes
+ C-u C-M-x this will run the interactive debuger - ? will give you all options
+ eldoc-mode - this provides prompting for function variables
  - set this for when elisp-mode is called
+ info- here is where all the manuals are
+ marks - mx will mark current point with x
  - to get to x use 'x go to the ^ of the line, or `x go to exact point
+ C-h-f - this will give you info on function that you are currently over
+ More information of a function can be found in the emacs manual.
+ check-parens - self-explanitory
+ slurping and barfing
+ paredit has a companion lib redshank
+ ert - unit testing framework 
+ undercover.el - sacha chua has a blog on it
+ checkdoc - minor mode - for working with project documentation 

** Emacs as a Python IDE - thoughtbot
url: https://www.youtube.com/watch?v=6BlTGPsjGJk

*** What an IDE in emacs should do
+ Easily find files and switch between projects
+ Easily navigate through function definitions
+ Contextual documentation
+ Inline help for complex function calls
  
*** Make the above work
+ Need an interface for completion and showing alternatives
  - auto-complete
+ Need an interpreter that knows the language
  - Here, a server that wraps a Python parsing lib
+ You need glue
  - epc, jedi.el
    
*** Installation with pkg-mgmt
+ Fist install projectile auto-complete epc jedi
+ add this to .emacs
(require 'package)
(package-initialize)
(add-to-list
  'package-archives
  '("melpa" . "http://melpa.milkbox.net/packages/"))
 
(require 'Projectile)
(projectile-global-mode)

(require 'auto-complete-config)
(ac-config-default)
(set ac-show-menu-immediately-on-auto-complete t)

**** Jedi & EPC
+ Jedi is a python lib for contextual parsing of files 
+ Simple emacs/python rpc lib
+ jedi.el 
  - small python server wrapping some jedi features
  - elisp front end to the server

**** Jedi deps
+ Jedi setting up
  + pip & virtualenv need to be installed
  + A one time M-x jedi:install-server
  + dep installed in sandbox env
  + This won't work with other package managers eg conda
+ Manually
  + Necessay if you can't use virtualenv/pip
  + Install epc and jedi python modules globally
  + Need to ensure they are available to Jedi server
  + May need to point Jedi to a particular installed python 
    
+ add this to .emacs
(require 'jedi)
;; Hook up to autocomplete
(add-to-list 'ac-sources 'ac-source-jedi-direct)
;; Enable for python-mode
(add-hook 'python-mode-hook 'jedi:setup)

*** Jedi Server Options
+ Finding your project (--sys-path)
  - sys-path is where python looks for modules
+ Finding your installed modules (--virtual-env)
  - normally set to nil

+ add this to .emacs
(defvar jedi-config-with-virtualenv nil
  "Set to non-nil to point to a particular virtualenv")

;; Variables to help find the project root
(defvar jedi-config:vcs-root-sentinel ".git")
(defvar jedi-config:python-module-sentinel "__init__.py")

;; Function to find project root given a buffer
(defvun get-project-root (buf repo-type init-file)
  (vc-find-root (expand-file-name (buffer-file_name buf)) repo-type))
  
(defvar jedi-config:find-root-function 'get-project-root)

;; And call this on initialization
(defun current-buffer-project-root ()
  (funcall jedi-config:find-root-function
    (current-buffer)
    jedi-config:vcs-root-sentinel
    jedi-config:python-module-sentinel))

*** Set the server args
+ A list (ARG1 VALUE1 ARG2 VALUE2 ...)
+ Store in buffer local variable jedi:server-args

(defun jedi-config:serup-server-args()
  ;; little helper macro
  (defmacro add-args (arg-list arg-name arg-value)
    '(setq ,arg-list (append ,arg-list (list ,arg-name ,arg-value)))))

  (let ((project-root (current-buffer-project-root)))

    ;; Variable for this buffer only
    (make-local-variable 'jedi:service-args)

    ;; And set our variables
    (when project-root
      (add-args jedi:server-args "--sys-path" project-root))
    (when jedi-config:with-virtualenv
      (add-args jedi:server-args "--virtual-env"
        jedi-config:with-virtualenv))))
	

*** Packages
+ projectile - provides an easy way to navigate a project
+ epc - middleware that connects pythonland to emacsland
+ jedi.el - 
+ auto-complete - 
+ ido-vertical
  
*** Other languages
+ Ruby - robe
+ C/C++ - irony-mode
+ gocode - golang



** Emacs Chat: Karl Voit
url: https://www.youtube.com/watch?v=SaKPr4J0K2I&list=WL&index=72

+ tag trees apose to using file hierarchy
  - use date/time stamps
  - descriptive file names
  - tags

+ dates to names - a python program on his github to add date stamp to filename.
+ file tag - a program that will add tags to files.
+ Org-Agenda - keeps track of actions that occur
+ Memacs is what is used to create the above - Memacs uses archive mode so information dosn't clog up the agenda.
  - ties to emails
  - ties to twitter
+ lazyblog - to help blog from with in emacs
+ config file using org mode
  - the headers are commented out so the config is still read
+ my-map allows you to set your own keybindings
+ yasnippet - templates for org mode
  
** Have Emacs Teach You Chinese or English or Math or whatever - thoughtbot Josh Moller-Mara
[[https://www.youtube.com/watch?v%3DuraPXeLfWcM][url]]
+ How?
  - Using the spaced repetition package org-drill
    - Don't want to waste time studying cards you already know
  - Automatically creating flashcards using org-capture templates
    - Don't waste time making new cards
      
+ How it works?
- You get a flashcard 
- You think about what the answer to the answer to the flashcard is
- You flip over the flashcard
- Depending on how well you answered it, you categorize it from 0 to 5
  0. Totally forgot
  1. Took a while to remember
  2. You remembered after seeing itf
  3. It took a while, but you remember
  4. You remembered after a little tought
  5. You remembered the item easily

+ Org-drill
- important to add it to org-modules
- Add a "drill" tag in org-mode to whatever you want drilled.
- Use clozes or subheadings to determine what's on the back of the card.
- org-drill cmds
  - org-drill - drills the current buffer
  - org-drill-tree - drills the current org-mode heading
  - org-drill-directory - Drills all files in the current directory
- Clozes are the fill in the blank type card. By default using [    ]

+ Org-Capture
- Jonathan Magen has a good talk    
- org capture templates allow for quick ways to add information

+ Anatomy of an org-capture template
- '(keys description type target template)
+ you tell it the key to bind to
+ you tell where you want your capture info stored
+ you prompt for "fill-in-the-blank" strings with %^{prompt}
+ Importantly, org-capture templates can contain a % (sexp)
  - org-mode wants you to hack it


* Articles
** Emacs Mini Manual
url: http://tuhdo.github.io/emacs-tutor.html

*** Part 1

**** Built-in-help system
+ C-h m - runs describe-mode - see all the key bindings & documentation of current major and minor modes.
+ C-h w - where-is - to get which keystrokes invoke a given cmd.
+ C-h c - describe-key-bridfly - find out what cmd is bound to a key.
+ C-h k - describe-key - to find out what cmd is bound to key.
+ C-h e - view-echo-area-messages - see logging of echo area.
+ C-h i - M-x info - brings up all the info manuals.

**** Man Pages
+ M-x man - get a nam page

**** Finding Files
+ M-x find-file - C-x C-f - open a file
+ M-x ffap - find file at point

**** Ido mode - Interactively Do Things
+ With this mode enabled searching becomes a narrowing of options until you find the file.
+ Simpler alternative to Helm.

**** Saving files
+ C-x C-s - save current buffer to file
+ C-x C-w - save as

**** Emacs Modes
+ Major mode - provides specialized facilities for working on particular file type. They are mutually exclusive, only one major mode per buffer.
+ Minor mode - these provide functionality but are not types specific and there can be any number of these.

**** Buffer MGMT
+ adding the following to my .emacs
  - (global-set-key (kbd "C-x C-b") 'ibuffer)
  - this invokes interactive buffer, which allows for better search functionality
+ /m - this will pull up all major modes. Selecting the mode will only show buffers that are using the mode.
+ // - this removes filtering
+ /g - this can be called once filtering is set to name a group of files.
+ o - this opens and puts the point on the opened buffer
+ C-o - this opens the buffer but keeps the point in the ibuffer
+ C-x o - this will move between windows
+ C-x 1 - One main window
+ C-x 2 - Two equal windows, horizontal
+ C-x 3 - Two equal windows, vertical

| Key | Bindings                       |
| /m  | Add a filter by a major mode   |
| /n  | Add a filter by a buffer name  |
| /c  | Add a filter by buffer content |
| /f  | Add a filter by filename       |
| />  | Add a filter by buffer size    |
| /<  | Add a filter by buffer size    |
| //  | Remove filters                 |

**** Bookmarks
l+ C-x rm - this provides for a name to be give to a point in a file to come back to.
+ C-x rb <name>- this will take you back to the specified bookmark
+ C-x rl - list all bookmarks

| Key | Bindings                               |
| RET | Open bm                                |
| 1   | Open bm and close other buffers        |
| n   | Go to the next entry                   |
| p   | Go to previous entry                   |
| s   | Save the current bookmark list to file |
| o   | Open bookmark in other window          |
| r   | Re-name bm                             |
| d   | Flag bm for deletion                   |
| x   | Delete flaged bm                       |
| u   | Unmark flaged bm                       |

**** Kill Ring
+ The kill ring is where cut text is kept
+ It is a list of previously killed content.
  
**** Marks
+ C-SPC C-SPC <mark> - this will produce a marker in the buffer
+ C-u C-SPC - this will move you back to set mark

**** Undo/redo
+ C-x u - this brings up an undo tracker that allows for moving through the changes made to the current file.
- C-/ - this is a quick undo
  
**** Search
+ C-s - this is froward search.
+ C-r - this is reverse search. 

***** Occur
+ This cmd marks all lines tht contain the string or regexp, and display the search results in a seperate buffer named *Occur*
+ M-s o - this prompts for the search term and then displays the buffer 

***** Multi-Occur
+ Allows for searching multiple buffers
+ M-x multi-occur
   
***** Query replace
+ M-% - prompts for the term to replace
      
***** Grep
+ M-x rgrep - allows for searching using external grep.
+ files that contain the search term are then shown in a buffer
  
**** Dired - Directory Editor
+ C-x d - select dir and start dired in that dir
+ C-x 4 d - select dir and start dired in another window 

+ ! - can perform shell cmd on file
+ d - mark for deletion
+ x - execute deletion
+ i - open sub directory

**** Registers
+ C-x r j <reg> - go to register

**** Swithcing between windows settings
+ Registers help in moving between different windows layouts
+ C-x r w <reg> - save the current window setting
+ C-x r f <reg> - save the frame state and all windows

**** Macros
+ This records your actions in Emacs and play back later.
+ C-x ( - this will start recording
+ C-x ) - this will stop recording
+ C-x e - playback

**** Version Control 
+ Emacs supports CVS, subversion, bzr, git, hg and others.
+ All are managed through a uniform interface.
+ Emacs will automatically recognise if a file is using version control.
+ C-x vv - This will commit the file if any changes have been made.
+ C-x v - This will show what changes you have made to the current file.

+ though emacs has VC, the Magit package is recommended as it is git specific.

**** Shell
+ There are 3 types of shell cmd
  1. shell - this is the oldest. It call a subshell, it doesn't support ncurses based applications.
  2. term - this is a terminal emulator written in Emacs lisp.
  3. eshell - this is emacs own shell. As it's its own shell the syntax is different. Interupt is C-c C-c

** Using org to Blog with Jekyll 
url: http://orgmode.org/worg/org-tutorials/org-jekyll.html

*** Steps Involved to Create Jekyll Site
1. write your page content using org.
2. use org to export your pages to html in Jekyll project directory.
3. run Jekyll to convert your html pages exported from org into your final site.

+ Org will be used to write everything between the <body> tags and Jekyll to create the rest.

*** Configuring org html Export


* Modes
** org mode
*** Cheat Sheet
**** Visibility Cycling
rotate current subtree between states             TAB
rotate entire buffer between states               S-TAB
restore property-dependent startup visibility     C-u C-u TAB
show the whole file, including drawers            C-u C-u C-u TAB
reveal context around point                       C-c C-r

**** Motion
next/previous heading                             C-c C-n/p
next/previous heading, same level                 C-c C-f/b
backward to higher level heading                  C-c C-u
jump to another place in document                 C-c C-j
previous/next plain list item                     S-UP/DOWN\notetwo


**** Structure Editing
insert new heading/item at current level          M-RET
insert new heading after subtree                  C-RET
insert new TODO entry/checkbox item               M-S-RET
insert TODO entry/ckbx after subtree              C-S-RET
turn (head)line into item, cycle item type        C-c -
turn item/line into headline                      C-c *
promote/demote heading                            M-LEFT/RIGHT
promote/demote current subtree                    M-S-LEFT/RIGHT
move subtree/list item up/down                    M-S-UP/DOWN
sort subtree/region/plain-list                    C-c ^
clone a subtree                                   C-c C-x c
copy visible text                                 C-c C-x v
kill/copy subtree                                 C-c C-x C-w/M-w
yank subtree                                      C-c C-x C-y or C-y
narrow buffer to subtree / widen                  C-x n s/w


**** Capture - Refile - Archiving
capture a new item (C-u C-u = goto last)          C-c c \noteone
refile subtree (C-u C-u = goto last)              C-c C-w
archive subtree using the default command         C-c C-x C-a
move subtree to archive file                      C-c C-x C-s
toggle ARCHIVE tag / to ARCHIVE sibling           C-c C-x a/A
force cycling of an ARCHIVEd tree                 C-TAB

**** Filtering and Sparse Trees
construct a sparse tree by various criteria       C-c /
view TODO's in sparse tree                        C-c / t/T
global TODO list in agenda mode                   C-c a t \noteone
time sorted view of current org file              C-c a L

**** Tables

--------------------------------------------------------------------------------
Creating a table
--------------------------------------------------------------------------------

just start typing, e.g.                           |Name|Phone|Age RET |- TAB
convert region to table                           C-c |
... separator at least 3 spaces                   C-3 C-c |

--------------------------------------------------------------------------------
Commands available inside tables
--------------------------------------------------------------------------------

The following commands work when the cursor is inside a table.
Outside of tables, the same keys may have other functionality.

--------------------------------------------------------------------------------
Re-aligning and field motion
--------------------------------------------------------------------------------

re-align the table without moving the cursor      C-c C-c
re-align the table, move to next field            TAB
move to previous field                            S-TAB
re-align the table, move to next row              RET
move to beginning/end of field                    M-a/e

--------------------------------------------------------------------------------
Row and column editing
--------------------------------------------------------------------------------

move the current column left                      M-LEFT/RIGHT
kill the current column                           M-S-LEFT
insert new column to left of cursor position      M-S-RIGHT

move the current row up/down                      M-UP/DOWN
kill the current row or horizontal line           M-S-UP
insert new row above the current row              M-S-DOWN
insert hline below (C-u : above) current row      C-c -
insert hline and move to line below it            C-c RET
sort lines in region                              C-c ^

--------------------------------------------------------------------------------
Regions
--------------------------------------------------------------------------------

cut/copy/paste rectangular region                 C-c C-x C-w/M-w/C-y
fill paragraph across selected cells              C-c C-q

--------------------------------------------------------------------------------
Miscellaneous
--------------------------------------------------------------------------------

to limit column width to N characters, use        ...| <N> |...
edit the current field in a separate window       C-c `
make current field fully visible                  C-u TAB
export as tab-separated file                      M-x org-table-export
import tab-separated file                         M-x org-table-import
sum numbers in current column/rectangle           C-c +

--------------------------------------------------------------------------------
Tables created with the table.el package
--------------------------------------------------------------------------------

insert a new table.el table                       C-c ~
recognize existing table.el table                 C-c C-c
convert table (Org-mode <-> table.el)             C-c ~

--------------------------------------------------------------------------------
Spreadsheet
--------------------------------------------------------------------------------

Formulas typed in field are executed by TAB,
RET and C-c C-c.  = introduces a column
formula, := a field formula.

Example: Add Col1 and Col2                        |=$1+$2      |
... with printf format specification              |=$1+$2;%.2f|
... with constants from constants.el              |=$1/$c/$cm |
sum from 2nd to 3rd hline                         |:=vsum(@II..@III)|
apply current column formula                      | = |

set and eval column formula                       C-c =
set and eval field formula                        C-u C-c =
re-apply all stored equations to current line     C-c *
re-apply all stored equations to entire table     C-u C-c *
iterate table to stability                        C-u C-u C-c *
rotate calculation mark through # * ! ^ _ $       C-#
show line, column, formula reference              C-c ?
toggle grid / debugger                            C-c }/{

--------------------------------------------------------------------------------
Formula Editor
--------------------------------------------------------------------------------

edit formulas in separate buffer                  C-c '
exit and install new formulas                     C-c C-c
exit, install, and apply new formulas             C-u C-c C-c
abort                                             C-c C-q
toggle reference style                            C-c C-r
pretty-print Lisp formula                         TAB
complete Lisp symbol                              M-TAB
shift reference point                             S-cursor
shift test line for column references             M-up/down
scroll the window showing the table               M-S-up/down
toggle table coordinate grid                      C-c }

**** Links

globally store link to the current location       C-c l \noteone
insert a link (TAB completes stored links)        C-c C-l
insert file link with file name completion        C-u C-c C-l
edit (also hidden part of) link at point          C-c C-l

open file links in emacs                          C-c C-o
...force open in emacs/other window               C-u C-c C-o
open link at point                                mouse-1/2
...force open in emacs/other window               mouse-3
record a position in mark ring                    C-c %
jump back to last followed link(s)                C-c &
find next link                                    C-c C-x C-n
find previous link                                C-c C-x C-p
edit code snippet of file at point                C-c '
toggle inline display of linked images            C-c C-x C-v

**** Working with Code (Babel)

execute code block at point                       C-c C-c
open results of code block at point               C-c C-o
check code block at point for errors              C-c C-v c
insert a header argument with completion          C-c C-v j
view expanded body of code block at point         C-c C-v v
view information about code block at point        C-c C-v I
go to named code block                            C-c C-v g
go to named result                                C-c C-v r
go to the head of the current code block          C-c C-v u
go to the next code block                         C-c C-v n
go to the previous code block                     C-c C-v p
demarcate a code block                            C-c C-v d
execute the next key sequence in the code edit bu C-c C-v x
execute all code blocks in current buffer         C-c C-v b
execute all code blocks in current subtree        C-c C-v s
tangle code blocks in current file                C-c C-v t
tangle code blocks in supplied file               C-c C-v f
ingest all code blocks in supplied file into the  C-c C-v i
switch to the session of the current code block   C-c C-v z
load the current code block into a session        C-c C-v l
view sha1 hash of the current code block          C-c C-v a

**** Completion

In-buffer completion completes TODO keywords at headline start, TeX
macros after `\', option keywords after `#-', TAGS
after  `:', and dictionary words elsewhere.

complete word at point                            M-TAB

**** TODO Items and Checkboxes
rotate the state of the current item              C-c C-t
select next/previous state                        S-LEFT/RIGHT
select next/previous set                          C-S-LEFT/RIGHT
toggle ORDERED property                           C-c C-x o
view TODO items in a sparse tree                  C-c C-v
view 3rd TODO keyword's sparse tree               C-3 C-c C-v

set the priority of the current item              C-c , [ABC]
remove priority cookie from current item          C-c , SPC
raise/lower priority of current item              S-UP/DOWN\notetwo

insert new checkbox item in plain list            M-S-RET
toggle checkbox(es) in region/entry/at point      C-c C-x C-b
toggle checkbox at point                          C-c C-c
update checkbox statistics (C-u : whole file)     C-c #

**** Tags
set tags for current heading                      C-c C-q
realign tags in all headings                      C-u C-c C-q
create sparse tree with matching tags             C-c \\
globally (agenda) match tags at cursor            C-c C-o

**** Properties and Column View
set property/effort                               C-c C-x p/e
special commands in property lines                C-c C-c
next/previous allowed value                       S-left/right
turn on column view                               C-c C-x C-c
capture columns view in dynamic block             C-c C-x i

quit column view                                  q
show full value                                   v
edit value                                        e
next/previous allowed value                       n/p or S-left/right
edit allowed values list                          a
make column wider/narrower                        > / <
move column left/right                            M-left/right
add new column                                    M-S-right
Delete current column                             M-S-left


**** Timestamps
prompt for date and insert timestamp              C-c .
like C-c . but insert date and time format        C-u C-c .
like C-c . but make stamp inactive                C-c !
insert DEADLINE timestamp                         C-c C-d
insert SCHEDULED timestamp                        C-c C-s
create sparse tree with all deadlines due         C-c / d
the time between 2 dates in a time range          C-c C-y
change timestamp at cursor Â±1 day                S-RIGHT/LEFT\notetwo
change year/month/day at cursor by Â±1            S-UP/DOWN\notetwo
access the calendar for the current date          C-c >
insert timestamp matching date in calendar        C-c <
access agenda for current date                    C-c C-o
select date while prompted                        mouse-1/RET
toggle custom format display for dates/times      C-c C-x C-t


--------------------------------------------------------------------------------
Clocking time
--------------------------------------------------------------------------------

start clock on current item                       C-c C-x C-i
stop/cancel clock on current item                 C-c C-x C-o/x
display total subtree times                       C-c C-x C-d
remove displayed times                            C-c C-c
insert/update table with clock report             C-c C-x C-r

**** Agenda Views
add/move current file to front of agenda          C-c [
remove current file from your agenda              C-c ]
cycle through agenda file list                    C-'
set/remove restriction lock                       C-c C-x </>

compile agenda for the current week               C-c a a \noteone
compile global TODO list                          C-c a t \noteone
compile TODO list for specific keyword            C-c a T \noteone
match tags, TODO kwds, properties                 C-c a m \noteone
match only in TODO entries                        C-c a M \noteone
find stuck projects                               C-c a # \noteone
show timeline of current org file                 C-c a L \noteone
configure custom commands                         C-c a C \noteone
agenda for date at cursor                         C-c C-o

--------------------------------------------------------------------------------
Commands available in an agenda buffer
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
View Org file
--------------------------------------------------------------------------------

show original location of item                    SPC/mouse-3
show and recenter window                          L
goto original location in other window            TAB/mouse-2
goto original location, delete other windows      RET
show subtree in indirect buffer, ded.\ frame      C-c C-x b
toggle follow-mode                                F

--------------------------------------------------------------------------------
Change display
--------------------------------------------------------------------------------

delete other windows                              o
view mode dispatcher                              v
switch to day/week/month/year/def view            d w vm vy vSP
toggle diary entries / time grid / habits         D / G / K
toggle entry text / clock report                  E / R
toggle display of logbook entries                 l / v l/L/c
toggle inclusion of archived trees/files          v a/A
refresh agenda buffer with any changes            r / g
filter with respect to a tag                      /
save all org-mode buffers                         s
display next/previous day,week,...                f / b
goto today / some date (prompt)                   . / j

--------------------------------------------------------------------------------
Remote editing
--------------------------------------------------------------------------------

digit argument                                    0-9
change state of current TODO item                 t
kill item and source                              C-k
archive default                                   $ / a
refile the subtree                                C-c C-w
set/show tags of current headline                 : / T
set effort property (prefix=nth)                  e
set / compute priority of current item            , / P
raise/lower priority of current item              S-UP/DOWN\notetwo
run an attachment command                         C-c C-a
schedule/set deadline for this item               C-c C-s/d
change timestamp one day earlier/later            S-LEFT/RIGHT\notetwo
change timestamp to today                         >
insert new entry into diary                       i
start/stop/cancel the clock on current item       I / O / X
jump to running clock entry                       J
mark / unmark / execute bulk action               m / u / B

--------------------------------------------------------------------------------
Misc
--------------------------------------------------------------------------------

follow one or offer all links in current entry    C-c C-o

--------------------------------------------------------------------------------
Calendar commands
--------------------------------------------------------------------------------

find agenda cursor date in calendar               c
compute agenda for calendar cursor date           c
show phases of the moon                           M
show sunrise/sunset times                         S
show holidays                                     H
convert date to other calendars                   C

--------------------------------------------------------------------------------
Quit and Exit
--------------------------------------------------------------------------------

quit agenda, remove agenda buffer                 q
exit agenda, remove all agenda buffers            x

**** LaTeX and cdlatex-mode

preview LaTeX fragment                            C-c C-x C-l
expand abbreviation (cdlatex-mode)                TAB
insert/modify math symbol (cdlatex-mode)          ` / '
insert citation using RefTeX                      C-c C-x [

**** Exporting and Publishing

Exporting creates files with extensions .txt and .html
in the current directory.  Publishing puts the resulting file into
some other place.

export/publish dispatcher                         C-c C-e

export visible part only                          C-c C-e v
insert template of export options                 C-c C-e t
toggle fixed width for entry or region            C-c :
toggle pretty display of scripts, entities        C-c C-x {\tt\char`\}

--------------------------------------------------------------------------------
Comments: Text not being exported
--------------------------------------------------------------------------------

Lines starting with # and subtrees starting with COMMENT are
never exported.

toggle COMMENT keyword on entry                   C-c ;

**** Dynamic Blocks

update dynamic block at point                     C-c C-x C-u
update all dynamic blocks                         C-u C-c C-x C-u

**** Notes
[1] This is only a suggestion for a binding of this command.  Choose
your own key as shown under ACTIVATION.

[2] Keybinding affected by org-support-shift-select and also
 org-replace-disputed-keys.

*** Outlining and Writing
  
Asterisks are used to denote headings these can 
be nested using increments of astrisks. Lines that 
don't start with the * are considered the body of 
the text.

*** Under lying headings

Underlying objects can be wrapped up into the 
heading for clarity. This is done by moving the cursor
to the end of the headings line and pressing TAB.

*** thrid level
**** fourth level
***** fivth level
  
*** Visability cycling
  
**** Gloabl and local cycling
   
+Cycling through the headings is accomplised with sucsecive TAB commands. A level which is above can open any below. You don't have to be on the ajacent heading to cycle just above.

| Commands | Function                |
|----------+-------------------------|
| C-c C-n  | Next heading            |
| C-c C-p  | Prev heading            |
| C-c C-f  | Next heading same level |
| C-c C-b  | Prev heading same level |
|          |                         |

**** Setting initial visibility
   
+Using C-u Cu will switch back to the start up viaibility.
+ Setting per file visibility
  - #+STARTUP - overview
  - #+STARTUP - content
  - #+STARTUP - showall
  - #+STARTUP - showeverything
  - these are to be added at the start of the org file.

*** Lists

**** Unordered
unordered lists can be added using +,-
- apple
- banana
- grapes

**** Ordered
ordered lists can be added using 1.

1. apple
2. banna
3. cherry

**** Check-box
   
- [ ] is it true
- [ ] is it false
  
to toggle the state of the checkbox C-c C-c
to toggle through itemize bullets C-c -
Turn an item in to a heading C-c * this will turn a 
checkbox into a TODO list

*** Drawers

This is outside the drawer
:DRAWER_NAME:
This is inside the drawer
:END:
After the drawer

A drawer can also be added interactivly with 
C-c C-x d - This will add the :Drawer: and :END:

*** \TODO List
  
*** Hyperlinks
  
Simple url
http://linuxjournal.com
or
[[http://linuxjournal.com]::[Linux Journal]]

Link to image
https://plus.google.com/photos/100234956980391947791/album/6170753083564209409/6170753084798814642?authkey=CNuXwuz8yuqGYg&sqid=116491848144040455924&ssid=b159388e-0b2d-4384-91bd-86ac4c803abc

Link to a file
file://.vimrc

*** Tables
  
| Column 1 | Column 2 | Column 3 |
|          |          |          |

ALT moves between cells

*** Tags 							       :BLUE:
  
You can assign a tag to a header.
They are to the form :TAG_ONE:

Tags can also be added to a heading by C-c C-c on it.

Search tags with C-c \

**** TAG EXP 							       :BLUE:
**** TAG EXP 						    :TAG_ONE:TAG_TWO:
   
*** Exporting & Publishing
  
**** Exporting as ASCII
   M-x org-export-as-ascii - creates a file with same name but .txt
   
**** Exporting as HTML
   M-x org-export-as-html - creates a file with the same name but .html
   
*** Creating Timestamps
  For org mode to recognize timestamps they have to be of a cetain format.

**** Org Timestamp
<2016-10-19 Wed> - this is created with C-c .

**** Org Timestamp Inactive
[2016-11-01 Tue] - this is created with C-c ! 
Same as above but will not cause an agenda entry

*** Deadlines and Scheduling
    
*** Publishing
+ This allows for the conversion of .org files to .html or .pdf.

**** Configuration
+ Publish requires a significant amount of configuration.

***** The variable org-publish-project-alist
+ It is this variable that initiates each project.
+ Each element of the list is one project.

("project_name" :property value :property value ...)
or
("project_name" :components ("project_name" "project_name" ...))

+ A project defines a set of files that will be published, along with the publishing config.

***** Sources and Destinations for Files
+ Most properties are optional, but where and from needs to be specified.

| Property              | Description  |
|-----------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| :base-directory       | Directory containing source files                                                                                                                                                         |
| :publishing-directory | Directory where output files will be published. You can directly publish to a web server using a file name syntax appropriate for Emacs tramp pkg, or just publish to a locali directory. |
| :preparation-function | Function or list of functions to be called before starting the publishing process.                                                                                                        |
| :completion-function  | Function or list of functions called after finishing the publishing process, for example to change permissions of the resulting files.                                                    |

***** Selecting Files
+ By default all files with the .org extension in the base directory will be apart of the project. This can be modified with the following properties.
  
| Property        | Description                                                                                                       |
|-----------------+-------------------------------------------------------------------------------------------------------------------|
| :base-extension | Extension of source files. Set to any if you wish to get all file types                                           |
| :exclude        | Regular expression to match file names that should not be published, even though selected with the base-extension |
| :include        | List of files to be included regardless of :base-extension and :exclude                                           |
| :recursive      | non-nil means to chech the base recursively for files to publish.                                                 |


***** Publishing Actions
+ default action is to publish files as html.
+ publishing is done by calling the org-html-publish-to-html
+ for other formats the function is org-latex-publish-to-pdf , ascii, Texinfo etc.

*** Babel
    

    
