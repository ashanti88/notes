; -*- mode: Org;-*-
#+TAGS: code txt

* emacs                                                      :emacs:code:txt:
* Description
* Configuration
** Setting display configuration on GUI
1. > M-x customize-face
2. specify default
3. a menu will pop up and allow for the changing of settings3. a menu will pop up and allow for the changing of settings3. a menu will pop up and allow for the changing of settings
4. save this file and restart emacs, some may take effect straight away, but usually best to restart emacs or the daemon.

** Setting Tab width						  :emacs:tab:
M-x set-variable<ret> tab-eidth 4
* Concepts
** Make the above work
Need an interface for completion and showing alternatives
- auto-complete
Need an interpreter that knows the language
- Here, a server that wraps a Python parsing lib
You need glue
- epc, jedi.el
   
** Installation with pkg-mgmt
Fist install projectile auto-complete epc jedi
add this to .emacs
require 'package)
package-initialize)
add-to-list
 'package-archives
 '("melpa" . "http://melpa.milkbox.net/packages/"))

require 'Projectile)
projectile-global-mode)

require 'auto-complete-config)
ac-config-default)
set ac-show-menu-immediately-on-auto-complete t)

*** Jedi & EPC
Jedi is a python lib for contextual parsing of files 
Simple emacs/python rpc lib
jedi.el 
- small python server wrapping some jedi features
- elisp front end to the server

*** Jedi deps
Jedi setting up
+ pip & virtualenv need to be installed
+ A one time M-x jedi:install-server
+ dep installed in sandbox env
+ This won't work with other package managers eg conda
Manually
+ Necessay if you can't use virtualenv/pip
+ Install epc and jedi python modules globally
+ Need to ensure they are available to Jedi server
+ May need to point Jedi to a particular installed python 
  
 add this to .emacs
require 'jedi)
; Hook up to autocomplete
add-to-list 'ac-sources 'ac-source-jedi-direct)
; Enable for python-mode
add-hook 'python-mode-hook 'jedi:setup)

** Set the server args
 A list (ARG1 VALUE1 ARG2 VALUE2 ...)
 Store in buffer local variable jedi:server-args

defun jedi-config:serup-server-args()
 ;; little helper macro
 (defmacro add-args (arg-list arg-name arg-value)
   '(setq ,arg-list (append ,arg-list (list ,arg-name ,arg-value)))))

 (let ((project-root (current-buffer-project-root)))

   ;; Variable for this buffer only
   (make-local-variable 'jedi:service-args)

   ;; And set our variables
   (when project-root
     (add-args jedi:server-args "--sys-path" project-root))
   (when jedi-config:with-virtualenv
     (add-args jedi:server-args "--virtual-env"
       jedi-config:with-virtualenv))))

** Dired Buffer
*** Navigation
p - move up
n - move down
j - (dired-goto-file) - will prompt for a filename

** Other languages
Ruby - robe
C/C++ - irony-mode
gocode - golang

** Shells
Article: [[https://www.masteringemacs.org/article/running-shells-in-emacs-overview][Running shells in emacs - Mastering Emacs]]
*** eshell
** Fonts
+ Packages
  - fontawsome
  - emojify
  - all-the-fonts

- Special characters can be added using
  C-x 8 <char>
- To get a list of all the special characters
  C-x 8 C-h
- Characters can be added using the unicode
  C-x 8 <ret>

*** Increase and decrease font size
Increase     - C-x C-+ 
Deacrease - C-x C--

** Bookmarks
book-bmenu-list - C-x rl

adding a bookmark - C-x rm <name>
jump to a bookmark - C-x rb <name>

** Finding Help
C-h ?   - overview of help
C-h P   - search Package
C-h m - help on the mode currently in
      - this will also list the current minor modes
C-h i    - Emacs info
  - u - move up a level
  - [  - move to previous node
  - ]  - move to next node
  - spc - move down the page
C-h f   - search for a specific emacs cmd
C-h a - seach with apropos
C-h k - see what a key binding does
C-x v C-h - this will list all the bindings set to prefix

** Recover files after a crash
C-x recover-session
** Python Environment
python will need to install 
#+BEGIN_SRC sh
python3 -m pip install rope_py3k 
python3 -m pip install jedi
python3 -m pip install importmagic
python3 -m pip install autopep8
python3 -m pip install yapf
python3 -m pip install flake8
#+END_SRC

** Emacs is a way of life
Emacs people are basically people who are hacking Lisp code for fun. They get the job done in a creative way. For example, [[http://sachachua.com/blog/][Sacha Chua]] mentioned that [[http://sachachua.com/blog/2012/07/transcript-emacs-chat-john-wiegley/][she let Emacs read the manual when cooking]].

So *what benefit* can I get after knowing the Emacs way?

After mastering Emacs, I could not endure the default key bindings of Firefox. So I installed an addon [[https://github.com/mooz/keysnail/wiki][Keysnail]] to convert Firefox into Emacs. That doubled my speed in browser navigation. As a web developer, I am doing the browser navigation thing everyday.

Then I realized that Keysnail was awesome because [[https://github.com/mooz][its developer mooz]] was awesome. I followed him and used whatever he used. His [[https://github.com/mooz/percol][percol]] made all my operations (git, [[http://blog.binchen.org/posts/how-to-do-the-file-navigation-efficiently.html][file navigation]], database management ...) under shell ten times faster.

Things that used to be important become trivial now. For example, I don't care which text editor has better file explorer. Why should I use any file explorer if I am *ten times faster* in shell?

We are living in the world of science and engineering. I improve myself *more quickly* by sharing to the best, by learning from the best. Knowledge is not black magic. Hiding knowledge will *make it stale*.

*** FAQ
***** I'm Emacs dummy. How to start?
Go to [[https://github.com/redguardtoo/emacs.d]] and check the section "Install stable version in easiest way" in [[https://github.com/redguardtoo/emacs.d/blob/master/README.org][README]].

Then follow the steps at [[https://github.com/redguardtoo/emacs.d/blob/master/BETA.org]].
***** Any documentation on Steve Purcell's setup?
Nope. Read its README and code comment. The header of the code file usually has some guide and the developer's email.
***** Is Master's setup too heavy weight?
No. It is lightweight actually. Masters know how to optimize their Elisp code.

For example, they use a technique called [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Autoload.html][Autoload]]. It will load a module when and only when module is actually used. I'm 100% sure all the setup I mentioned has applied this technique.

***** Any other setup you can recommend *except* Purcell's?
I did [[https://github.com/search?l=Emacs+Lisp&o=desc&q=emacs&ref=searchresults&s=stars&type=Repositories][search at github]], here is the list of top ones:
- [[https://github.com/bbatsov/prelude][Bozhidar Batsov's emacs.d]]
- [[https://github.com/syl20bnr/spacemacs][Sylvain Benner's spacemacs]] (Spacemacs focus on [[http://www.emacswiki.org/emacs/Evil][Evil]], so it might not be good for non-vim users)
- [[https://github.com/eschulte/emacs24-starter-kit/][Eric Schulte's Emacs Starter Kit]].
***** Which version I should use?
v24.3.1 is the latest stable version, it has been released for more than one year without any big issue. It can be installed easily on any platform.

I've watched too many people failed because they started from un-stable version!

Though v24.4 is released, it has some compatibility issues with third party plugins. I suggest you wait at least half a year before switching to the new version.
***** As a Vi person, why should I turn to Emacs?
[[http://www.emacswiki.org/emacs/Evil][Evil]], the best of the best! 

***** Why some Vim users cannot accept Evil?
It's because their customized key bindings conflict with Emacs/Evil default key bindings.

The solution is to use [[http://stackoverflow.com/questions/1764263/what-is-the-leader-in-a-vimrc][Leader Key]] in both Emacs and Vim.

Please note in Emacs you need install a [[https://github.com/cofi/evil-leader][third party plugin]] for this solution.

The other solution is to stay inside the comfort zone of vim.

That's totally fine if you are OK with the life without Org-mode and Lisp. ;)

Or maybe you can read the section "What matters is attitude"?

I am die-hard Vi user with 14 year experience. After realizing the potential of Evil and Leader key, I *re-assign all my vim key bindings* according to Emacs configuration.

Another more brilliant example is [[https://github.com/syl20bnr/spacemacs][a guy who earning tons of Github stars]].
***** I don't like default key bindings
[[http://ergoemacs.org/][ergoemacs]] if you prefer Microsoft's key bindings.
***** Too many key bindings to memorise
Use [[http://www.emacswiki.org/Smex][Smex]]. It's a myth that a Emacs guru must remember many key bindings.
***** I am not comfortable with other people's setup. Can I modify it?
Try to understand the master's setup at first. Don't make judgment too early. It's easy to make judgment. But understanding needs wisdom and hard work.

For example, some people reported that there was some weird character at column 80 when editing a file. That's actually a feature to remind the user not to create any line with width more than 80 columns. [[http://www.emacswiki.org/emacs/EightyColumnRule][Here is the reason]].

***** I've cloned the master's setup but the package is not upgraded.
Remove the file .emacs in your HOME directory. The ~/.emacs.d/init.el has same functionality.
***** I have some specific question about Emacs
Please,
- read official tutorial
- google

For example, google "emacswiki init.el" to understand what's the init.el.
***** I got some error message when starting Emacs with master's setup
That message could be ignored. It's just the *warning* message when Emacs can't find some OPTIONAL command line tool.

If you need install that missing tool, search the list in [[https://github.com/redguardtoo/emacs.d][my readme]].

If you are sure it's actually an *error* message, 
- Run "emacs -nw --debug-init" in terminal
- Send the output to the author of the setup
- Please use bug tracker if possible

***** My own setup is more controllable
That's what I thought at the beginning. After several months I realized that I could never be as good as a master like Steve Purcell if keeping this way.

While I spend serveral weeks to overcome some minor issues in Emacs setup, Purcell has already installed/developed dozens of cool plugins.

If I cannot win, the only strategy is to join him, that's why I clone his setup and start to report bug for him. Here is [[https://github.com/purcell/emacs.d/issues/6][first issue I reported]]. Besides, reporting bugs also gives me the opportunity to talk with the master.

So don't run away from the master's huge setup. Regard it as a challenge to improve yourself.
***** Why I cannot add my own plugins into master's setup
Though the quality of Emacs plugins are generally good, they may have compatibility issues. It's usually because plugins are developed by different people. For example, both [[https://github.com/auto-complete][auto-complete]] and [[https://github.com/capitaomorte/yasnippet][yasnippet]] will use TAB key to expand code. So there is confict if I use both plugins.

That's another reason to stick to the master's setup at the beginning.
***** How to use Emacs on windows
Install Cygwin!

When you have enough knowledge about environment variables and pipe. You can check [[http://stackoverflow.com/questions/3286723/emacs-cygwin-setup-under-windows/13245173#13245173][My answer at stackoverflow]] to use native windows version.

At minimum, you need set the environment variables HOME and PATH if you prefer non-cygwin way.

***** What about code-navigation and code-completion?
Thanks to [[http://clang.llvm.org/][Clang]] && [[http://www.gnu.org/software/global/][GNU Global]], C++ is perfect now. Support for other languages are also good enough except Java and C#.

I suggesting you using IDE when dealing with Java and C# in big projects.
***** What about web browsing?
I strongly recommend Firefox plus [[https://github.com/mooz/keysnail/][Keysnail]].

This is the perfect solution for Emacs fans. Trust me, I've already investigated *every* solution.

***** Email?
I use [[http://www.gnus.org/][Gnus]]. But there are many alternatives. If you have to fetch email from Microsoft Exchange Servers, you need [[http://davmail.sourceforge.net/][Davmail]].

I also use [[http://getpopfile.org/][Popfile]] to sort emails. Davmail+Popfile is the best solution!

***** Why Emacs cannot download packages?
If you are living in North Korea, Iran or China, you need below command line to start Emacs:
#+BEGIN_SRC elisp
http_proxy=your-proxy-server-ip:port emacs -nw
#+END_SRC

How to configure proxy server is not covered here.
***** As a greenhorn of Emacs, should I learn Emacs Lisp at first?
NO.

Most people lose the interest in Lisp because there its strange syntax and there not many Lisp jobs.

That's why I stress that you need avoid tweaking Emacs at the beginning. Please copy the master's setup at first.

Unless you have seen how Lisp gets your job done, you will not have the *enough stimulus* to finish the its course.

Me, for example, never feel pressued to learning Lisp. Actually, my initial plan is being great *without* touching Lisp.

As a *proof*, please visit [[https://github.com/redguardtoo/][my github account]]. Check all the issues I reported at the beginning. As you can see, I know little about Emacs Lisp for a very long time.

***** After knowing the basics, what to do next?
Find your practical problem which only Emacs can do best. Trust me, Emacs is much more powerful than your wildest imagination.

Here is my example:
- When I use Wordpress blog, I use [[https://github.com/punchagan/org2blog][org2blog]] to post articles. It's ten times faster than any other client.
- I installed cmake-mode to do the cross-platform development with [[http://www.cmake.org/Wiki/CMake/Editors/Emacs][cmake]].
- window-numbering.el is useful when jumping focus between sub-windows.
- When I work for some huge projects, I use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to comment code lines because I need deal with too many programming languages. 

***** Do I need learn keyboard macros?
No. Emacs Lisp is enough. 

But, studying the Lisp code created by macro does help to understand some interesting problems. So I suggest you learn keyboard macro *after* mastering Lisp.
***** What do you think "Emacs can do everything"?
I suggest being practical. Sometimes other tools are simply better in real world.

For example, a developer had difficulties to sort a big dictionary file with *pure* Emacs Lisp. It's too slow.

After consulting with me, he found that the [[https://github.com/tumashu/chinese-pyim/commit/90519d3f][GNU Sort is much better]] in this case.

So be practical. [[http://en.wikipedia.org/wiki/Richard_Stallman][Richard Stallman]] created a whole GNU ecosystem for you. Emacs is only one component. Why not take full advantage of the system?
* Packages
** projectile - provides an easy way to navigate a project :emacs:projectile:project:
HomePage: [[http://batsov.com/projectile/][batsoy.com/projectile]]
** epc - middleware that connects pythonland to emacsland
** elpy
check the elpy config
M-x elpy-config - this will let you know what is need to run the environment

Check the current file syntax
C-c C-v - this will check the current file
** jedi
*** Jedi Server Options
 Finding your project (--sys-path)
 - sys-path is where python looks for modules
 Finding your installed modules (--virtual-env)
 - normally set to nil

 add this to .emacs
defvar jedi-config-with-virtualenv nil
 "Set to non-nil to point to a particular virtualenv")

; Variables to help find the project root
defvar jedi-config:vcs-root-sentinel ".git")
defvar jedi-config:python-module-sentinel "__init__.py")

; Function to find project root given a buffer
defvun get-project-root (buf repo-type init-file)
 (vc-find-root (expand-file-name (buffer-file_name buf)) repo-type))
 
defvar jedi-config:find-root-function 'get-project-root)

; And call this on initialization
defun current-buffer-project-root ()
 (funcall jedi-config:find-root-function
   (current-buffer)
   jedi-config:vcs-root-sentinel
   jedi-config:python-module-sentinel))

** auto-complete
** ido-vertical
** YASnippet							  :emacs:yas:
- expanding snippets is done by typing the key and pressing the TAB
owd <TAB>   -------------> /home/crito/org/tech/$1

- for the key it's better to use key combinations, as words will prompt auto-completion

** Helm						  :emacs:helm:search:
** ido
this is an alternative to helm
**cvagrant-tramp						:emacs:tramp:
This package allows files in vagrant boxes to be edited

+ Set-Up
1. start vagrant box
2. output the .ssh/config needed with
   > vagrant ssh-config
3. add this output to the .ssh/config. The name should be changed from default
4. in emacs use C-x C-f /<name_in_ssh_config>:/file/to/edit/in/vagrant

The above(3,4) can also be achieved with:
#+BEGIN_SRC sh:
vagrant ssh-config --host <host_name> >> $HOME/.ssh/config
#+END_SRC

** all-the-icons
Github: [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]
To add the fonts required places all the required .tff into ~/.local/share/fonts

** eww								  :emacs:web:
Gnu: [[https://www.gnu.org/software/emacs/manual/html_node/eww/index.html#Top][gnu.org/eww]]

- By deafult eww uses duckduckgo
#+BEGIN_SRC elisp
eww
stormtrooper fancydress
#+END_SRC

- Make emacs use eww as default browser
#+BEGIN_SRC elisp
;; make emacs always use its own browser for opening URL links
(setq browse-url-browser-function 'eww-browse-url)
#+END_SRC

- Open a local html file
#+BEGIN_SRC elisp
eww-open-file
web_file.html
#+END_SRC
or
#+BEGIN_SRC sh
eww
file://home/crito/www/hollywood.html
#+END_SRC
*** Navigation & Basic Keys
back - l
forward - r - M-x eww-forward
reload - g - M-x eww-reload
home - 
download url - d - M-x eww-download
copy page url - w - M-x eww-copy-page-url
store current url as bookmark - b - Mx eww-add-bookmark
show all bookmarks - B - M-x eww-list-bookmarks
list all the eww buffers - S - M-x eww-list-buffers
view source code - v - M-x eww-source-code
view existing cookies - C - M-x eww-

*** Setting backgroud contrast
- when initially installed eww uses a background that makes the rest of the text on google unreadable
(setq shr-color-visible-luminance-min 90)
the above variable sets the color back to black

** org-mode                                                :emacs:org:notes:
*** Setting images in org-mode
1. Set the link but don't add a description
2. the run C-c C-x C-v on the link, this should now bring the image up
(C-c C-x C-v = org-toggle-inline-images)

*** Cheat Sheet
**** Visibility Cycling
rotate current subtree between states             TAB
rotate entire buffer between states               S-TAB
restore property-dependent startup visibility     C-u C-u TAB
show the whole file, including drawers            C-u C-u C-u TAB
reveal context around point                       C-c C-r

**** Motion
next/previous heading                             C-c C-n/p
next/previous heading, same level                 C-c C-f/b
backward to higher level heading                  C-c C-u
jump to another place in document                 C-c C-j
previous/next plain list item                     S-UP/DOWN\notetwo

**** Structure Editing
insert new heading/item at current level          M-RET
insert new heading after subtree                  C-RET
insert new TODO entry/checkbox item               M-S-RET
insert TODO entry/ckbx after subtree              C-S-RET
turn (head)line into item, cycle item type        C-c -
turn item/line into headline                      C-c *
promote/demote heading                            M-LEFT/RIGHT
promote/demote current subtree                    M-S-LEFT/RIGHT
move subtree/list item up/down                    M-S-UP/DOWN
sort subtree/region/plain-list                    C-c ^
clone a subtree                                   C-c C-x c
copy visible text                                 C-c C-x v
kill/copy subtree                                 C-c C-x C-w/M-w
yank subtree                                      C-c C-x C-y or C-y
narrow buffer to subtree / widen                  C-x n s/w

**** Capture - Refile - Archiving
capture a new item (C-u C-u = goto last)          C-c c \noteone
refile subtree (C-u C-u = goto last)              C-c C-w
archive subtree using the default command         C-c C-x C-a
move subtree to archive file                      C-c C-x C-s
toggle ARCHIVE tag / to ARCHIVE sibling           C-c C-x a/A
force cycling of an ARCHIVEd tree                 C-TAB

**** Filtering and Sparse Trees
construct a sparse tree by various criteria       C-c /
view TODO's in sparse tree                        C-c / t/T
global TODO list in agenda mode                   C-c a t \noteone
time sorted view of current org file              C-c a L

**** Tables

--------------------------------------------------------------------------------
Creating a table
--------------ove list and you are not sure about its quality, please go to [[http://melpa.org][MELPA's website]] to check its number of downloads.

**** Tags                                                    :emacs:org:tags:
these are added either on the #+TAGS: line at the top of the org file, or on the heading line between colons
- to search the tags use
M-x org-agenda and then press m
The output is in the form of | Filename | heading tag is on | all tags on that line |
** pdf-tools
**** Usage
scroll up page   - space
scroll down page - delete
next page        - n
previous page    - p
view outline     - o
* Podcast
** [[https://emacs-el.com][emacs-el]]
*** Ep 1 - Sacha Chua
emacs speak - use with erc for it to tell you when someone is talking to you
*** Ep 2 - Samer Masterton

  - how to get started for emacs devs
    https://lars.ingebrigtsen.no/2014/11/13/welcome-new-emacs-developers/
emacs.devl

*** Ep3 - Tobias Macey + Chris Pattti

* Articles
** [[http://tuhdo.github.io/emacs-tutor.html][Emacs Mini Manual]]
*** Part 1

*** Built-in-help system
 C-h m - runs describe-mode - see all the key bindings & documentation of current major and minor modes.
 C-h w - where-is - to get which keystrokes invoke a given cmd.
 C-h c - describe-key-bridfly - find out what cmd is bound to a key.
 C-h k - describe-key - to find out what cmd is bound to key.
 C-h e - view-echo-area-messages - see logging of echo area.
 C-h i - M-x info - brings up all the info manuals.

*** Man Pages
 M-x man - get a nam page

*** Finding Files
 M-x find-file - C-x C-f - open a file
 M-x ffap - find file at point

*** Ido mode - Interactively Do Things
 With this mode enabled searching becomes a narrowing of options until you find the file.
 Simpler alternative to Helm.

*** Saving files
 C-x C-s - save current buffer to file
 C-x C-w - save as

*** Emacs Modes
 Major mode - provides specialized facilities for working on particular file type. They are mutually exclusive, only one major mode per buffer.
 Minor mode - these provide functionality but are not types specific and there can be any number of these.

*** Buffer MGMT
 adding the following to my .emacs
 - (global-set-key (kbd "C-x C-b") 'ibuffer)
 - this invokes interactive buffer, which allows for better search functionality
 /m - this will pull up all major modes. Selecting the mode will only show buffers that are using the mode.
 // - this removes filtering
 /g - this can be called once filtering is set to name a group of files.
 o - this opens and puts the point on the opened buffer
 C-o - this opens the buffer but keeps the point in the ibuffer
 C-x o - this will move between windows
 C-x 1 - One main window
 C-x 2 - Two equal windows, horizontal
 C-x 3 - Two equal windows, vertical

 Key | Bindings                       |
 /m  | Add a filter by a major mode   |
 /n  | Add a filter by a buffer name  |
 /c  | Add a filter by buffer content |
 /f  | Add a filter by filename       |
 />  | Add a filter by buffer size    |
 /<  | Add a filter by buffer size    |
 //  | Remove filters                 |

*** Bookmarks
+ C-x rm - this provides for a name to be give to a point in a file to come back to.
 C-x rb <name>- this will take you back to the specified bookmark
 C-x rl - list all bookmarks

 Key | Bindings                               |
 RET | Open bm                                |
 1   | Open bm and close other buffers        |
 n   | Go to the next entry                   |
 p   | Go to previous entry                   |
 s   | Save the current bookmark list to file |
 o   | Open bookmark in other window          |
 r   | Re-name bm                             |
 d   | Flag bm for deletion                   |
 x   | Delete flaged bm                       |
 u   | Unmark flaged bm                       |

*** Kill Ring
 The kill ring is where cut text is kept
 It is a list of previously killed content.
 
*** Marks
 C-SPC C-SPC <mark> - this will produce a marker in the buffer
 C-u C-SPC - this will move you back to set mark

*** Undo/redo
 C-x u - this brings up an undo tracker that allows for moving through the changes made to the current file.
 C-/ - this is a quick undo
 M-_ - quick redo
 
*** Search
 C-s - this is froward search.
 C-r - this is reverse search. 

**** Occur
 This cmd marks all lines tht contain the string or regexp, and display the search results in a seperate buffer named *Occur*
 M-s o - this prompts for the search term and then displays the buffer 

**** Multi-Occur
 Allows for searching multiple buffers
 M-x multi-occur
  
**** Query replace
 M-% - prompts for the term to replace
     
**** Grep
 M-x rgrep - allows for searching using external grep.
 files that contain the search term are then shown in a buffer
 
*** Dired - Directory Editor
 C-x d - select dir and start dired in that dir
 C-x 4 d - select dir and start dired in another window 

 ! - can perform shell cmd on file
 d - mark for deletion
 x - execute deletion
 i - open sub directory

*** Registers
 C-x r j <reg> - go to register

*** Swithcing between windows settings
 Registers help in moving between different windows layouts
 C-x r w <reg> - save the current window setting
 C-x r f <reg> - save the frame state and all windows

*** Macros
 This records your actions in Emacs and play back later.
 C-x ( - this will start recording
 C-x ) - this will stop recording
 C-x e - playback

*** Version Control 
 Emacs supports CVS, subversion, bzr, git, hg and others.
 All are managed through a uniform interface.
 Emacs will automatically recognise if a file is using version control.
 C-x vv - This will commit the file if any changes have been made.
 C-x v - This will show what changes you have made to the current file.

 though emacs has VC, the Magit package is recommended as it is git specific.

*** Shell
 There are 3 types of shell cmd
 1. shell - this is the oldest. It call a subshell, it doesn't support ncurses based applications.
 2. term - this is a terminal emulator written in Emacs lisp.
 3. eshell - this is emacs own shell. As it's its own shell the syntax is different. Interupt is C-c C-c

[[http://orgmode.org/worg/org-tutorials/org-jekyll.html][Using org to Blog with Jekyll]]
** [[https://www.youtube.com/watch?v%3DJA4dqmDFt5Y][Emacs Chat - Mickey Petersen]]
- sexp - these expressions are like vim navigation shortcuts
- re/rx builder - module for helping to build regualr expressions
- inserting unicode C-x 8 ret  
  - this will allow you to insert the unicode

* Books
[[pdfview://home/crito/Documents/Tools/Emacs/org.pdf::1][The Org Manual - GNU Manual]]
[[file://home/crito/Documents/Tools/Emacs/mastering-emacs.pdf][Mastering Emacs]]
[[pdfview:/mnt/home/crito/Documents/Tools/Emacs/Writing_GNU_Emacs_Extensions.pdf::1][Writing_GN_Emacs_Extensions]]

* Links

