#+TAGS: code txt vim vi text file text_editor

* vim
* Description
* Usage
- Resoucing vimrc 
#+BEGIN_EXAMPLE
:source ~/.vimrc
#+END_EXAMPLE

** Navigation
h - left

j - down

k - up

l - right

w - move to beginning of next word

e - move to end of word

o - move to line below

O - move to line above

\^ - move to the beginning of line

$ - move to end of the line

dw - delete word

x - delete the character under cursor

*Modes*

1) normal

2) insert

3) execution

4) visual

5) select

6) ex-mode

*Notes:*

https://en.wikibooks.org/wiki/Learning\_the\_vi\_Editor/Vim
Setting highlight search

:set hlsearch

Turning highlight search off (Temp)

:nohlsearch

or

:nohl

Turning highlight search off (Perm)

:set nohlsearch

** Objects
*** word object
Select word - viw - visual inside word select word with ws - vaw (only at the end ws) - visual around word
delete word - diw delete word with ws - daw (dw performs the same function)

*** WORD object
Everything that is delimited by whitespace this.is.all.one.word
select word - viW select word with ws - vaw

*** paragraph object
select paragrapgh - vip select paragrapgh and new line - vap

*** sentence object
Change line to all capital - gUis delete the line - das

*** tag object
Select inside of tag - vit select inside plus the tags - vat
Select inside of ( - vi( select around ( - va( works for { [ " b = ( B = }

** Change a characters case
Change from current case - ~ or g~<any\_movement\_key>
Uppercase - gU<any\_movement\_key>
Lowercase - gu<any\_movement\_key>
Change a words case
Change current case - g~iw
Change till end of line - g~$
Change current line - g~~
Uppercase - gUU
Lowercase - guu

** Moving
To move down a visual line not a proper line use - gj gk g\^ g$ g0

** Actions
If a file is mentioned in the text it can be opened with - gf the file
has to be on the same path

J - this will join the current line with the next with a space K - will
look up the man page of th word it is currently on R - enter replace
mode

o in visual block will move you to the opposite corner O in visual block
will move to the opposite side

% - this will move you to the corresponding brace, bracket
** Special Characters
Special characters can be inserted with ctrl-v esc - this will give the
vim representation of esc ctrl-v enter - this will give the vim
representation of enter

unicode can also be added with ctrl-v ctrl-v u<code>

to move into normal mode for one action ctrl-o<action>

** Expresion Register
ctrl-r= this allows for valid vim script to be executed and the result
will be placed where called
Viewing all mappings use :map

** Creating Mappings
:nmap will create a mapping for normal mode :nmap x dd - this will make
x act like dd

when mapping be aware of inheritance. If another character was to take
the place of what x did previously above, it would in fact act like dd.
To avoid this behaviour use the :noremap, :nnoremap, :inoremap,
:vnoremap

:unmap - this command removes any set mappings

** Buffer Specific Mappings
This ensures that mappings remain the same as you move through buffers.
Handy when working with file specific mappings, and have different file
types open. eg auto Filetype html nnoremap <buffer> <leader>c
I<!--<esc>A--><esc> the buffer key word will ensure that leader-c will
always produce the comment in html files and not be over written if
another file type has leader-c set to another cmd.

** Operator Mapping
onoremap p i( - where we would usually use i( to select inside brackets
we now use p

** Registers
Current values of the registers can be found using :reg By default when
no register is specified the "" register is used

**** Using a Register
adding to a specific register - "add - this will put deleted line into
register a using specific register - "ap - paste contents of register a

registers are pushed down as sections of text are deleted or yanked

**** Macros
Macros are also stored in registers. The letter seleted is just that
register.
For almost all settings we use the set cmd 

** Boolean Settings
:set number - true - on :set nonumber - false - off 

:set number! - toogle to opposite settign to current

find the value of a boolean with :set <setting>?

** Value Settings
:set background=dark :set bg=dark In vimrc use the long value setting
for clarity

finding values of none boolean values :set <setting> but set no value

** Spelling
- to initiate spell check run the following
#+BEGIN_EXAMPLE
:set spell spelllang=en_gb
#+END_EXAMPLE
this will use the en_gb dictionary, without the en_gb it will use the default

- run spellcheck on local buffer
#+BEGIN_EXAMPLE
:setlocal spell spelllang=en_gb
#+END_EXAMPLE

- to disable spellcheck
#+BEGIN_EXAMPLE
:set nospell
#+END_EXAMPLE

- get selection for incorrect spelling
#+BEGIN_EXAMPLE
z + =
#+END_EXAMPLE
this will output a numbered list too choose from

** Recomended Settings
:set relativenumber is handy for working out offsets :set wrap can be
switched on or off :set linebreak this means that wrap won't cut words
in half :set showbreak=delimiter this show where wrapping is occuring
:set textwidth=0 default this is the setting before a carriage return

let mapleader=',' appose to the  that is the default using :map shows
all available mappings that are available

make the arrow keys useless add the below to .vimrc noremap <left> <nop>
noremap <right> <nop> noremap <up> <nop> noremap <down> <nop>

:saveas new\_name this means that you are now editing the new file not
the original

** Few More Settings
:set scrolloff=<value> this provides a buffer between the top and bootom
of the screen when scrolling up and down :set showmode will switch the
message on and off as to what mode you are in :set wildmenu ths provides
options in the bar above :set wildmode this is set to full by default
:set cursorline will show a highlighted line where the cursor is :set
undofile this allows actions from previous sessions to be undo. This is
done by creating an undofile for each file to track changes.
* Lecture
* Tutorial
* Books
* Links
