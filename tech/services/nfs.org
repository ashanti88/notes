#+TAGS: nfs file_server export_filesystem file_share


* NFS
* Cmds
- exportfs

* Files
- /etc/exports - this holds the available nfs shares
- /etc/fstab   - nfs shares can be added to the fstab file for automatic mounting at boot

* Description
* Usage
- NFSv4 Features
  - Fake root mount
  - Kerberos security
  - Listens on port 2049

- start and enabling nfs-server
#+BEGIN_SRC sh
systemctl start nfs-server
systemctl enable nfs-server
#+END_SRC

- update shares
#+BEGIN_SRC sh
exportfs -r
#+END_SRC

** fstab options
  - defaults - rw,suid,dev,exec,auto,nouser,async
  - ro     - read-only
  - rw     - read-write
  - auto   - the device will be mounted automatically at boot
  - noauto - device will only be mounted explicitly, (mount -a won't mount the device)
  - sync   - immediately written to the system
  - async  - saved in buffer, before being pushed
  - soft   - try but die if unavailable (intr is usually a better option, less chance of data corruption)
  - hard   - keep trying until timeout
  - intr   - this allows the nfs request to be interrupted if the server goes down or cannot be reached.
  - bg     - run in the background
  - timeo  - stop trying to mount after set time
  - rsize  - defines the maximum number of bytes in a read request that the client can recive when communicating with the server.
  - wsize  - defines the maximum number of bytes in a write request that the client can send when communicating with the server.
  - exec   - allow executables to be run on the mount
  - noexec - don't allow executables to be run on the mount
  - user   - allows a normal user the ability to mount the device
  - nouser - this means that only root has the ability to mount the device
  - root_squash - requests from root clients are mapped to the nobody user and gid so they will only have file privs associated with the share
  - no_root_squash - this allows a remote root user to have root privs on the share(no advised) [[https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/4/html/Security_Guide/s2-server-nfs-noroot.html][Do Not Use the no_root_squash Option - redhat]] 

** Install and configure NFS server for sysvinit(RHEL6)
#+BEGIN_SRC sh
yum install nfs-utils nfs-utils-lib
chkconfig nfs on
service rpcbind start
service nfs start
#+END_SRC

- set /home and /var/share as a file export
/etc/exports
#+BEGIN_EXAMPLE
/home	192.168.1.0/24(rw,no_root_squash)
/var/share	192.168.1.0/24(ro)
#+END_EXAMPLE
rw             - read write priv
ro             - read only
no_root_squash - always the remote users to change any files on the share and leave malicious code for other ppl. By default nfs changes the root user to nfsnobody user an unpriviliged account.

- make new shares available
#+BEGIN_SRC sh
exportfs -a
service nfs restart
#+END_SRC
a - export or unexport all directories

** Client setup for NFS on sysvinit(RHEL6)
#+BEGIN_SRC sh
yum install nfs-utils nfs-utils-lib
cd /mnt
mkdir nfs_home
mkdir nfs_share
#+END_SRC

- manually mount the nfs shares
#+BEGIN_SRC sh
mount 192.168.1.131:/home /mnt/nfs_home/
mount 192.168.1.131:/var/share /mnt/nfs_share/
#+END_SRC

- mount on boot
/etc/fstab
#+BEGIN_EXAMPLE
192.168.1.131:/home 		/mnt/nfs_home	nfs	rw,sync,hard,intr 0 0
192.168.1.131:/var/share 	/mnt/nfs_share	nfs	rw,sync,hard,intr 0 0
#+END_EXAMPLE
though /var/share is read only, the abouve rw will have no effect

** Install and configure NFS server for systemd(RHEL7)
- Install   
#+BEGIN_SRC sh
yum install nfs-utils
#+END_SRC

- configure the /etc/default/nfs-common
#+BEGIN_EXAMPLE
NEED_IDMAPD=YES
#+END_EXAMPLE

- edit /etc/idmapd.conf
#+BEGIN_EXAMPLE
DOMAIN = SERVER1.mylabserver.com
#+END_EXAMPLE

- add the shares to /etc/exports
#+BEGIN_EXAMPLE
/mnt/share 172.31.117.2(ro)
/mnt/share_two 10.0.0.0/255.255.255.0(rw,no_root_squash,no_subtree_check,crossmnt,fsid=0)
#+END_EXAMPLE
10.0.0.0/255.255.255.0 - allow all of the 10.0.0.0/24 access the share
crossmnt - allow subdirectories to be viewed as subdirectories of the share
fsid     - filesystem identifer

- restart nfs server
#+BEGIN_SRC sh
systemctl restart nfs-server
systemctl status nfs-server
#+END_SRC

** Client setup for NFS on systemd(RHEL7)
#+BEGIN_SRC sh
yum install nfs-utils nfs-utils-lib
cd /mnt
mkdir nfs_home
mkdir nfs_share
#+END_SRC
As of RHEL 7.2 nfs-utils-lib was rolled into nfs-utils

- manually mount the nfs shares
#+BEGIN_SRC sh
mount 192.168.1.131:/home /mnt/nfs_home/
mount 192.168.1.131:/var/share /mnt/nfs_share/
#+END_SRC

- mount on boot
/etc/fstab
#+BEGIN_EXAMPLE
192.168.1.131:/home 		/mnt/nfs_home	nfs	rw,sync,hard,intr 0 0
192.168.1.131:/var/share 	/mnt/nfs_share	nfs	rw,sync,hard,intr 0 0
#+END_EXAMPLE
though /var/share is read only, the abouve rw will have no effect

** NFSv3 Server Configuration LPIC2

- install the required pkgs
#+BEGIN_SRC sh
yum install nfs-utils nfs-utils-lib rpcbind
#+END_SRC

- create the export directory
#+BEGIN_SRC sh
mkdir /nfsshare
chmod 777 /nfsshare
#+END_SRC
- setting 777 means that the share controls access control, and that the server permissions aren't impeading any settings

- create the export
/etc/exports
#+BEGIN_EXAMPLE
/nfsshare frank1.mylabserver.com(rw,root_squash,sync) 192.168.0.0/24(rw,no_root_sqash,async) (ro)
#+END_EXAMPLE
      
- create an nfsuser
#+BEGIN_SRC sh
useradd -u 1101 -m nfsuser1
useradd -u 1102 -m nfsuser1
passwd nfsuser1
passwd nfsuser2
#+END_SRC

- create the same users on the client-side
#+BEGIN_SRC sh
useradd -u 1101 -m nfsuser1
useradd -u 1102 -m nfsuser1
passwd nfsuser1
passwd nfsuser2
#+END_SRC

- start and enable the nfs service
#+BEGIN_SRC sh
systemctl start rpcbind
systemctl start nfs
#+END_SRC

- edit the tcp-wrapper
/etc/hosts.allow
#+BEGIN_EXAMPLE
# provide portmap access for this client on nfs
portmap: 172.31.24.1
#+END_EXAMPLE
/etc/hosts.deny
#+BEGIN_EXAMPLE
# deny access to the following network except to thoses set in hosts.allow
portmap: 172.31.24.0/24
portmap: ALL # this would deny everyone that isn't set in hosts.allow
#+END_EXAMPLE
by default tcp-wrappers allow

- restart the nfs and rpc services
#+BEGIN_SRC sh
systemctl restart rpcbind
systemctl restart nfs
#+END_SRC

- test the configuration
#+BEGIN_SRC sh
exportfs
#+END_SRC
this will printout the available shares

- to view connects to nfs
#+BEGIN_SRC sh
nfsstat -m
#+END_SRC


** NFSv3 Client Configuration LPIC2 
   
- install the required pkgs
#+BEGIN_SRC sh
yum -y install nfs-utils nfs-utils-lib rpcbind
#+END_SRC

- create the mount point
#+BEGIN_SRC sh
mkdir /mnt/nfsshare
#+END_SRC

- manually mount the share
#+BEGIN_SRC sh
mount -t nfs 172.31.131.89:/nfsshare /mnt/nfsshare
#+END_SRC
as root_squash is being used this would cause any files that were created to have the owner nfsnobody

- change to nfsuser1 and create a file in the share
#+BEGIN_SRC sh
su - nfsuser1
cd /mnt/nfsshare
touch testfile.txt
#+END_SRC
testfile.txt instead of having the nfsnobody owner, will have nfsuser1 as both server and client have the same user with corresponding uid and gid

- add the mount to fstab
/etc/fstab
#+BEGIN_EXAMPLE
172.31.131.89:/nfsshare /mnt/nfsshare nfs hard,bg,timeo=300,rsize=2048,wsize=4096 0 0
#+END_EXAMPLE

- confirm the mount
#+BEGIN_SRC sh
mount -a
df -h
#+END_SRC

** Setting up a simple nfs share
- create a mount on the client side
#+BEGIN_SRC sh
mkdir nfsdir
#+END_SRC

- on the nfs server
#+BEGIN_SRC sh
cat /etc/exports
#+END_SRC
this will show all available shares and who can access them

- on client side mount the nfs share
#+BEGIN_SRC sh
mount -t nfs 192.168.0.3:/home nfsdir/
#+END_SRC
this will mount the available share

- on client in the /etc/fstab
#+BEGIN_EXAMPLE
192.168.0.3:/home	/mnt/nfsdir	nfs	rw,sync,hard,intr 0 0
#+END_EXAMPLE

** NFS Exports
- sharinge the directory /media
/etc/exports
#+BEGIN_EXAMPLE
/media * # accessable to everyone
/media *.example.com # accessable to everyone in the example.com domain
/media 10.0.0.0/24 # accessable to everyone in this network block
#+END_EXAMPLE

- Setting the options on the shares
#+BEGIN_EXAMPLE
/media *[rw,no_root_squash]
#+END_EXAMPLE
rw - read and writer permissions
no_root_squash - no one will be allowed root privs
all_squash - all users runs as the nsfnobody

** Mounting NFS shares
- create the direcotry to mount nfs on
#+BEGIN_SRC ssh
mkdir /nfs
mount server2/share /nfs
mount | grep nfs
#+END_SRC

** Using Kerberos to Control Access to NFS Network Shares
- Securing NFS Exports
  - By default NFS has no security but the IP address or hostname of the client
  - Different security options can be used using sec=:
    - none  - anonymount access to files, writes to the server are issued as nfsnobody. SELinux nfsd_anon_write is required
    - sys   - default value, fule access is based on UID and GID and ID mapping
    - krb5  - clients must prove ID using Kerberos
    - krb5i - like krb5 but adds guarantee that data has not been tapered with
    - krb5p - adds encryption to the above
  - To use any of these security options, the nfs-secure-server must be running on the server and nfs-secure is required on the client (nfs-server is also required)
    
*** Setting up Kerverized NFS - Setting up IPA
- Install IPA server
  - make sure it is configured to use integrated DNs
  - make sure all servers are configured with the IPA server DNS server
  - start the service 
    #+BEGIN_SRC 
    ipactl start
    #+END_SRC  

- From the IPA client
#+BEGIN_SRC sh
kinit admin
#+END_SRC

- On IPA server
  - create a service principal
    #+BEGIN_SRC sh
    ipa service-add
    #+END_SRC
    this will open interactive session where you can add the principal (nfs/name_of_server), only use the server name, not domain name (otherwise server2.example.com, becomes server2.example.com.example.com)
  - Generate a keytab file
    #+BEGIN_SRC sh
    ipa-getkeytab -s server2.example.com -p nfs/server2.example.com -k /tmp/nfs.keytab
    #+END_SRC

- Adding the other server to Kerberos Domain
- verify the client uses the IPA server as DNS server
- add the required tools for administration
#+BEGIN_SRC sh
yum install ipa-client ipa-admintools
ip-client-install --enable-dns-updates
#+END_SRC
follow the prompts, and ignore "error trying to clean keytab", this will be fixed later.
- The client is now part of the Kerberos trusted domain
- To access the NFS server (the principal), the cient sends a ticket granting ticket. In return, the Ticket granting Service (Kerberos) sends session keys back to the client and it can do its work.

*** Setting up Kerberized NFS - Configuring the NFS Server
- Make the keytab available on the NFS server server2: cp /tmp/nfs.keytab /etc/krb5.keytab) - if the NFS server is elsewhere, scp the keytab over 
- start nfs and secure-nfs
#+BEGIN_SRC sh
systemctl start nfs-server
systemctl start nfs-secure-server
systemctl enable nfs-server
systemctl enable nfs-secure-server
#+END_SRC

- make mount point
#+BEGIN_SRC sh
mkdir /secureshare
#+END_SRC

- edit /etc/exports
#+BEGIN_EXAMPLE
/secureshare *(sec=krb5p,rw)
#+END_EXAMPLE

- update shares
#+BEGIN_SRC sh
exportfs -r
#+END_SRC
means that nfs hasn't got to be restarted

- open fw ports
#+BEGIN_SRC sh
firewall-cmd --permanent --add-service=nfs
firewall-cmd --reload
#+END_SRC

- On the other server
#+BEGIN_SRC sh
systemctl enable nfs-secure
systemctl start nfs-secure
mount -o sec=krb5p server2:/secureshare /mnt
#+END_SRC

*** Showmount
Showmount cmd will throw the error with the FW enabled
#+BEGIN_EXAMPLE
clnt_create: RPC: Port mapper failure - Unable to receive: errno 113 (No route to host)
#+END_EXAMPLE
this is because it has not been made NFSv4 compatiable

** Provide Network Shares to Specific Clients - Server Installation and Configuration
- first install the required tools
#+BEGIN_SRC sh
yum install -y nfs-utils
#+END_SRC

- create the directories that are to be shared
#+BEGIN_SRC sh
mkdir /test1 /test2
#+END_SRC

- set the selinux bools 
#+BEGIN_SRC sh
getsebool -a | grep nfs_export
setsebool -P nfs_export_all_ro=1 nfs_export_all_rw=1
#+END_SRC

- add the nfs ports to the firewall
#+BEGIN_SRC sh
firewall-cmd --permanent --add-service=nfs
firewall-cmd --reload
#+END_SRC

- enable rpcbind and nfs-server to start on reboot
#+BEGIN_SRC sh
systemctl enable rpcbind
systemctl enable nfs-server
#+END_SRC

- start both rpcbind and nfs-server
#+BEGIN_SRC sh
systemctl start rpcbind
systemctl start nfs-server
#+END_SRC

- on the status of rpcgind
#+BEGIN_SRC sh
systemctl status rpcbind
#+END_SRC
if no exports have been set then, it will indicate with "exited", instead of the usual "running"

- define are exports in /etc/exports
#+BEGIN_SRC sh
/test1 172.31.117.0/24(rw,no_root_squash)
/test2 172.31.117.0/24(sync)
#+END_SRC
here I have shared it to anyone on our subnet

- export the filesystem
#+BEGIN_SRC sh
exportfs -avr
#+END_SRC
a - export or unexport all directories 
v - verbose
r - rexport all directories

- confirm that the shares have been created
#+BEGIN_SRC sh
cat /var/lib/nfs/etab
#+END_SRC
here you will see any created nfs shares

- restart rpcbind and nfs-server
#+BEGIN_SRC sh
systemctl restart rpcbind
systemctl restart nfs-server
#+END_SRC

** Provide Network Shares to Specific Clients - Client Installation and Configuration
- install required packages
#+BEGIN_SRC sh
yum install nfs-utils
apt install nfs-common
#+END_SRC

- enable and start rpcbind
#+BEGIN_SRC sh
systemctl start rpcbind
systemctl enable rpcbind
systemctl status rpcbind
#+END_SRC

- create the directories to mount the nfs shares
#+BEGIN_SRC sh
mkdir /test1 /test2
#+END_SRC

Two options for mounting temporary and permanent
- manually mount the nfs 
#+BEGIN_SRC sh
mount -t nfs -o rw 172.31.36.243:/test1
#+END_SRC

- mount the nfs share wit
#+BEGIN_EXAMPLE
172.31.117.208:/test1 /test1 nfs _netdev,rw 0 0
172.31.117.208:/test2 /test2 nfs _netdev,ro 0 0
#+END_EXAMPLE

- mount the shares
#+BEGIN_SRC sh
mount -a
#+END_SRC

** Provice Network Shares Suitable for Group Collaboration
*** On Server
- create a goup to use
#+BEGIN_SRC sh
groupadd -g 7654 nfsdatagrp
#+END_SRC

- create users and add them to the nfsdatagrp group
#+BEGIN_SRC sh
adduser user3
adduser user4
usermod -G nfsdatagrp user3
usermod -G nfsdatagrp user4
#+END_SRC

- create the share
#+BEGIN_SRC sh
mkdir /nfsdata
#+END_SRC

- set correct permissions on /nfsdata
#+BEGIN_SRC sh
chown nfsnobody:nfsdatagrp /nfsdata
#+END_SRC

- set gid bit so it is inherited
#+BEGIN_SRC sh
chmod 2770 /nfsdata/
#+END_SRC

- edit the /etc/exports
#+BEGIN_SRC sh
/nfsdata 172.31.18.59(rw,no_root_squash)
#+END_SRC

- export the filesystem
#+BEGIN_SRC sh
exportfs -avr
#+END_SRC

- confirm creation
#+BEGIN_SRC sh
cat /var/lib/nfs/etab
#+END_SRC

*** On Client
- create a goup to use
#+BEGIN_SRC sh
groupadd -g 7654 nfsdatagrp
#+END_SRC

- create users and add them to the nfsdatagrp group
#+BEGIN_SRC sh
adduser user3
adduser user4
usermod -G nfsdatagrp user3 user4
#+END_SRC

- set user passwords
#+BEGIN_SRC sh
passwd user3
passwd user4
#+END_SRC

- create the mount point
#+BEGIN_SRC sh
mkdir /nfsdata
#+END_SRC

- edit fstab
#+BEGIN_SRC sh
172.31.117.208:/nfsdata /nfsdata nfs _netdev,rw 0 0
#+END_SRC

** Use Kerberos to Control Access to NFS Network Shares - Quick NFS Setup
*** On Server
- install required packages
#+BEGIN_SRC sh
yum groupinstall file-server
#+END_SRC

- set firewall rules for nfs
#+BEGIN_SRC sh
firewall-cmd --permanent --add-service=nfs
firewall-cmd --reload
#+END_SRC

- enable rpcbind
#+BEGIN_SRC sh
systemctl enable rpcbind
systemctl enable nfs-server
#+END_SRC

- create the share directory
#+BEGIN_SRC sh
mkdir krbdata
#+END_SRC

- set the permissions to 0777
#+BEGIN_SRC sh
chmod 0777 /krbdata/
#+END_SRC

- set the correct selinux contexts
#+BEGIN_SRC sh
semanage fcontext -a -t public_content_rw_t "/krbdata(/.*)?"
restorecon -R /krbdata
semanage boolean -l | grep nfs
setsebool -P nfs_export_all_rw on
setsebool -P nfs_export_all_ro on
semanage boolean -l | grep nfs_export_all_*
#+END_SRC
fcontext - file context

- edit /etc/exports
#+BEGIN_SRC sh
/krbdata 172.31.18.59(rw,no_root_squash)
#+END_SRC
no_root_squash - this means that root, will mean root on the remote machine(if not set root's id is elevated and is no longer see with a uid of 0)

- start rpcbind and nfs-server
#+BEGIN_SRC sh
systemctl start rpcbind
systemctl start nfs-server
#+END_SRC

- export the filesytem
#+BEGIN_SRC sh
exportfs -avr
#+END_SRC

- confirm the nfs share has been created
#+BEGIN_SRC sh
cat /var/lib/nfs/etab
#+END_SRC

*** On Client
- install the required packages
#+BEGIN_SRC sh
yum install -y nfs-utils
apt install nfs-common
#+END_SRC

- create the mount point for the share
#+BEGIN_SRC sh
mkdir /mnt/test
#+END_SRC

- test the share
#+BEGIN_SRC sh
mount -t nfs 172.31.117.208:/krbdata /mnt/test
#+END_SRC

- confirm that share has been mounted
#+BEGIN_SRC sh
df -hT
#+END_SRC

** Use Kerberso to Control Access to NFS Network Shares - Kerberos NFS Server and Client
*** NFS Server
- add as a host principle
#+BEGIN_SRC sh
kadmin
#+END_SRC
#+BEGIN_EXAMPLE
kadmin: addprinc -randkey host/alickmitchell2.mylabserver.com@MYLABSERVER.COM;
kadmin: ktadd host/alickmitchell2.mylabserver.com@MYLABSERVER.COM;
#+END_EXAMPLE

- edit /etc/ssh/ssh.conf
#+BEGIN_EXAMPLE
GSSAPIAuthentication yes
GSSAPIDelegateCredentials yes
#+END_EXAMPLE

- reload sshd
#+BEGIN_SRC sh
systemctl reload sshd
#+END_SRC

- update krb
#+BEGIN_SRC sh
authconfig --enablekrb5 --update
#+END_SRC

- add as an NFS Server principle
#+BEGIN_SRC sh
kadmin
#+END_SRC
#+BEGIN_EXAMPLE
kadmin: addprinc -randkey nfs/alickmitchell2.mylabserver.com@MYLABSERVER.COM;
kadmin: ktadd nfs/alickmitchell2.mylabserver.com@MYLABSERVER.COM;
#+END_EXAMPLE

- update krb
#+BEGIN_SRC sh
authconfig --enablekrb5 --update
#+END_SRC

- edit /etc/exports so that it knows that krb is being used
#+BEGIN_EXAMPLE
/krbdata alickmitchell2.mylabserver.com(rw,no_root_squash,sec=krb5)
#+END_EXAMPLE

- export filesystems
#+BEGIN_SRC sh
exportfs -avr
#+END_SRC

- a reboot is required at this point to ensure that NFS and Kerberos work together
#+BEGIN_SRC sh
reboot
#+END_SRC  

*** On NFS client
- add principle for client
#+BEGIN_SRC sh
kadmin
#+END_SRC
#+BEGIN_EXAMPLE
kadmin: addprinc -randkey nfs/alickmitchell2.mylabserver.com
kadmin: ktadd nfs/alickmitchell2.mylabserver.com
#+END_EXAMPLE

- enable and start the nfs-client.target
#+BEGIN_SRC sh
systemctl enable nfs-client.target
systemctl start nfs-client.target
systemctl status nfs-client.target
#+END_SRC

- mount the share
#+BEGIN_SRC sh
mkdir /mnt/krbtest
mount -t nfs4 -o sec=krb5 alickmitchell2.mylabserver.com:/krbdata /mnt/krbtest
#+END_SRC

* Lecture
* Tutorial
** Linux Academy - Getting Started with NFS
- installing NFS server
#+BEGIN_SRC sh
apt-get install nfs-server
pacman -S nfs-utils
#+END_SRC

- create the directory to share
#+BEGIN_SRC sh
mkdir -p /srv/nfs/home
#+END_SRC

- add the correct permissions so that everyone can access the files
#+BEGIN_SRC sh
chmod 777 -R /sr/nfs/home
#+END_SRC
this will allow all users to access the files

- now add the directory to the /etc/exports
#+BEGIN_EXAMPLE
/srv/nfs/home 192.168.10.0/24(rw, sync, no_root_squash)
#+END_EXAMPLE

- enable and start the nfs-server
#+BEGIN_SRC sh
systemctl enable nfs-server
systemctl start nfs-server
#+END_SRC
#+BEGIN_SRC sh
systemctl enable nfs-utils
systemctl start nfs-utils
#+END_SRC

- clientside
#+BEGIN_SRC sh
apt-get install nfs-common
pacman -S nfs-util
#+END_SRC

- create the directory where the nfs directory is to be mounted
#+BEGIN_SRC sh
mkdir /mnt/sharedir
#+END_SRC

- mount the nfs directory
#+BEGIN_SRC sh
mount 192.168.1.11:/srv/nfs/home /mnt/sharedir
#+END_SRC

- to make this directory a permanent mount add it to the /etc/fstab
#+BEGIN_EXAMPLE
192.168.1.11:/srv/nfs/home	/mnt/sharedir	auto,nofail 0 0
#+END_EXAMPLE

** Linux Academy - Ubuntu NFS Version 4.0 Server Lab
LabGuide: [[file://home/crito/Documents/Linux/Labs/ubuntu-nfs4-lab.pdf][Ubuntu NFS4 Lab Guide]]

* Books
[[file://home/crito/Documents/SysAdmin/NFS-HOWTO.pdf][Linux NFS HowTo]]
[[file://home/crito/Documents/Linux/RHEL/Red_Hat_Enterprise_Linux-6-Storage_Administration_Guide-en-US.pdf][Red Hat Enterprise Linux 6 - Storage Administration Guide]]
[[file://home/crito/Documents/Linux/RHEL/Red_Hat_RHCSA_RHCE_6_Cert_Guide.pdf][RHCSA and RHCE Cert Guide and Lab Manual - RHEL 6]]
[[file://home/crito/Documents/Linux/RHEL/Red_Hat_RHCSA_RHCE_7_Cert_Guide.pdf][RHCSA and RHCE Cert Guide and Lab Manual - RHEL 7]]
[[file://home/crito/Documents/Linux/Linux_Network_Administration_TCP-IP_Learning_Course_Code.pdf][Linux Administration - TCP/IP and TCP/IP Services Student Exercises]]
* Links
[[https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nfs-mount-on-centos-6][How To Set Up an NFS Mount on CentOS 6 - DigitalOcean]]
[[https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nfs-mount-on-ubuntu-16-04][How To Set Up an NFS Mount on Ubuntu 16.04]]
