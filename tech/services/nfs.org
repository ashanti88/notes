#+TAGS: nfs file_server


* NFS
* Description
* Usage
- NFSv4 Features
  - Fake root mount
  - Kerberos security
  - Listens on port 2049

- start and enabling nfs-server
#+BEGIN_SRC sh
systemctl start nfs-server
systemctl enable nfs-server
#+END_SRC

- update shares
#+BEGIN_SRC sh
exportfs -r
#+END_SRC

#+END_SRC
** NFS Exports 
- sharinge the directory /media
/etc/exports
#+BEGIN_EXAMPLE
/media * # accessable to everyone
/media *.example.com # accessable to everyone in the example.com domain
/media 10.0.0.0/24 # accessable to everyone in this network block
#+END_EXAMPLE

- Setting the options on the shares
#+BEGIN_EXAMPLE
/media *[rw,no_root_squash]
#+END_EXAMPLE
rw - read and writer permissions
no_root_squash - no one will be allowed root privs
all_squash - all users runs as the nsfnobody

** Mounting NFS shares
- create the direcotry to mount nfs on
#+BEGIN_SRC ssh
mkdir /nfs
mount server2/share /nfs
mount | grep nfs
#+END_SRC

** Using Kerberos to Control Access to NFS Network Shares
- Securing NFS Exports
  - By default NFS has no security but the IP address or hostname of the client
  - Different security options can be used using sec=:
    - none  - anonymount access to files, writes to the server are issued as nfsnobody. SELinux nfsd_anon_write is required
    - sys   - default value, fule access is based on UID and GID and ID mapping
    - krb5  - clients must prove ID using Kerberos
    - krb5i - like krb5 but adds guarantee that data has not been tapered with
    - krb5p - adds encryption to the above
  - To use any of these security options, the nfs-secure-server must be running on the server and nfs-secure is required on the client (nfs-server is also required)
    
*** Setting up Kerverized NFS - Setting up IPA
- Install IPA server
  - make sure it is configured to use integrated DNs
  - make sure all servers are configured with the IPA server DNS server
  - start the service 
    #+BEGIN_SRC 
    ipactl start
    #+END_SRC  

- From the IPA client
#+BEGIN_SRC sh
kinit admin
#+END_SRC

- On IPA server
  - create a service principal
    #+BEGIN_SRC sh
    ipa service-add
    #+END_SRC
    this will open interactive session where you can add the principal (nfs/name_of_server), only use the server name, not domain name (otherwise server2.example.com, becomes server2.example.com.example.com)
  - Generate a keytab file
    #+BEGIN_SRC sh
    ipa-getkeytab -s server2.example.com -p nfs/server2.example.com -k /tmp/nfs.keytab
    #+END_SRC

- Adding the other server to Kerberos Domain
- verify the client uses the IPA server as DNS server
- add the required tools for administration
#+BEGIN_SRC sh
yum install ipa-client ipa-admintools
ip-client-install --enable-dns-updates
#+END_SRC
follow the prompts, and ignore "error trying to clean keytab", this will be fixed later.
- The client is now part of the Kerberos trusted domain
- To access the NFS server (the principal), the cient sends a ticket granting ticket. In return, the Ticket granting Service (Kerberos) sends session keys back to the client and it can do its work.

*** Setting up Kerberized NFS - Configuring the NFS Server
- Make the keytab available on the NFS server server2: cp /tmp/nfs.keytab /etc/krb5.keytab) - if the NFS server is elsewhere, scp the keytab over 
- start nfs and secure-nfs
#+BEGIN_SRC sh
systemctl start nfs-server
systemctl start nfs-secure-server
systemctl enable nfs-server
systemctl enable nfs-secure-server
#+END_SRC

- make mount point
#+BEGIN_SRC sh
mkdir /secureshare
#+END_SRC

- edit /etc/exports
#+BEGIN_EXAMPLE
/secureshare *(sec=krb5p,rw)
#+END_EXAMPLE

- update shares
#+BEGIN_SRC sh
exportfs -r
#+END_SRC
means that nfs hasn't got to be restarted

- open fw ports
#+BEGIN_SRC sh
firewall-cmd --permanent --add-service=nfs
firewall-cmd --reload
#+END_SRC

- On the other server
#+BEGIN_SRC sh
systemctl enable nfs-secure
systemctl start nfs-secure
mount -o sec=krb5p server2:/secureshare /mnt
#+END_SRC

*** Showmount
Showmount cmd will throw the error with the FW enabled
#+BEGIN_EXAMPLE
clnt_create: RPC: Port mapper failure - Unable to receive: errno 113 (No route to host)
#+END_EXAMPLE
this is because it has not been made NFSv4 compatiable

* Lecture
* Tutorial
** Linux Acadey - Getting Started with NFS
- installing NFS server
#+BEGIN_SRC sh
apt-get install nfs-server
pacman -S nfs-utils
#+END_SRC

- create the directory to share
#+BEGIN_SRC sh
mkdir -p /srv/nfs/home
#+END_SRC

- add the correct permissions so that everyone can access the files
#+BEGIN_SRC sh
chmod 777 -R /sr/nfs/home
#+END_SRC
this will allow all users to access the files

- now add the directory to the /etc/exports
#+BEGIN_EXAMPLE
/srv/nfs/home 192.168.10.0/24(rw, sync, no_root_squash)
#+END_EXAMPLE

- enable and start the nfs-server
#+BEGIN_SRC sh
systemctl enable nfs-server
systemctl start nfs-server
#+END_SRC
#+BEGIN_SRC sh
systemctl enable nfs-utils
systemctl start nfs-utils
#+END_SRC

- clientside
#+BEGIN_SRC sh
apt-get install nfs-common
pacman -S nfs-util
#+END_SRC

- create the directory where the nfs directory is to be mounted
#+BEGIN_SRC sh
mkdir /mnt/sharedir
#+END_SRC

- mount the nfs directory
#+BEGIN_SRC sh
mount 192.168.1.11:/srv/nfs/home /mnt/sharedir
#+END_SRC

- to make this directory a permanent mount add it to the /etc/fstab
#+BEGIN_EXAMPLE
192.168.1.11:/srv/nfs/home	/mnt/sharedir	auto,nofail 0 0
#+END_EXAMPLE


* Books
[[file://home/crito/Documents/SysAdmin/NFS-HOWTO.pdf][Linux NFS HowTo]]
* Links
