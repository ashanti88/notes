#+TAGS: web


* apache								:web:
HomePage: [[https://www.apache.org/][apache.org]]
* Files
** RHEL
/etc/httpd - server root
/etc/httpd/conf/httpd.conf - main configuration file
/etc/httpd/conf.modules.d/*.conf - module configuration directory
/etc/httpd/conf.d/*.conf   - Supplemental configuration files
/var/www/html - Default document root

* Description
* Usage
** Basic Admin
- status
#+BEGIN_SRC sh
apachectl status 
#+END_SRC

- start
#+BEGIN_SRC sh
apachectl start
#+END_SRC

- stop
#+BEGIN_SRC sh
apachectl stop
#+END_SRC

** Graceful Stop
#+BEGIN_SRC sh
apachectl graceful-stop
#+END_SRC

** Module Mgmt
- list
#+BEGIN_SRC sh
apachectl -t -D DUMP_MODULES - ths list all modules
#+END_SRC

- enable module
#+BEGIN_SRC sh
a2enmod mod_wsgi
#+END_SRC

- disables module
#+BEGIN_SRC sh
a2dismod mod_wsgi
#+END_SRC

** .htaccess
** chroot Apache Web Server					     :chroot:
[[https://www.cyberciti.biz/tips/chroot-apache-under-rhel-fedora-centos-linux.html][Chroot Apache Centos - NixCraft]]
** Changing document root
- change the document root in the httpd.conf
- also need to add the correct selinux lables to the new document root  
#+BEGIN_SRC sh
semanage fcontext -a -t httpd_sys_content_t '/web(/.*)?'
restorecon -R -v /web
#+END_SRC

** Configuring a Simple Web Server (rhel)
- install apache
#+BEGIN_SRC sh
yum install httpd
#+END_SRC

- confirm state, enable and open firewall
#+BEGIN_SRC sh
systemctl enable httpd
systemctl start httpd
firewall-cmd --permanent --add-service=http --add-service=https
firewall-cmd --reload
#+END_SRC

- add a text html page to the doc root
/var/www/html/index.html
#+BEGIN_EXAMPLE
Welcome to my server
#+END_EXAMPLE

** Giving developers access to the root document
- create the webdev group
#+BEGIN_SRC sh
groupadd webdev
#+END_SRC

- set permissions on the directory
#+BEGIN_SRC sh
setfacl -R -m g:webdev:rwX /web
setfacl -R -m d:g:webdev:rwX /web
#+END_SRC
The first is to set permissions on existing files, and the second to set a default rule for new files
Uppercase X, set execute on directories only

** Configuring Virtual hosts (RHEL)
for more than a couple of virtual hosts you should create specific domain files in /etc/httpd/conf.d/
#+BEGIN_SRC sh
touch /etc/httpd/conf.d/sales.conf
touch /etc/httpd/conf.d/example.conf
#+END_SRC

sales.conf
#+BEGIN_EXAMPLE
<Directory /srv/web/sales>
	Require all granted
	AllowOverride None
</Directory>

<VirtualHost *:80>
	DocumentRoot /srv/web/sales
	ServerName sales.example.com
	ServerAlias buying.example.com
	ServerAdmin root@sales.example.com
	ErrorLog "logs/sales_error_log
	CustomLog "logs/sales_access_log" combined
</VirtualHost>
#+END_EXAMPLE

- makesure that the document root exsists, and has the correct SELinux lebael
#+BEGIN_SRC sh
mkdir /srv/web/sales
semanage -a -t httpd_sys_content_t
semanage fcontext -a -t httpd_sys_content_t '/srv/web(/.*)?'
restorecon -R -v /srv/web
#+END_SRC
  
- restart the apache server
#+BEGIN_SRC sh
systemctl restart httpd
#+END_SRC

- Configure /etc/hosts file
#+BEGIN_EXAMPLE
192.168.0.4 server1.example.com server1 sales.example.com
#+END_EXAMPLE

Always a good idea to setup a default virtual host 00.conf(with an error message) as errors in virtual host configs will mean a redirection to the first correcctly configured virtual host.

Common Errors Working with Virtual Hosts
  - No DocumentRoot specified for a host
  - Non-default DocumentRoot with faulty SELinux label
  - No name resolution, error in nameing (example.com instead of www.example.com)

*** Advanced Apache Features
**** Configure Authentication (RHEL)
#+BEGIN_SRC sh
yum install -y httpd-manual
#+END_SRC
This will add a manual in the /etc/httpd/conf.d/ that you can browser through your browser.

- setup basic authentication
#+BEGIN_SRC sh
htpasswd -c /etc/httpd/htpasswd user_name
#+END_SRC
this will prompt you for a password

- add a directory section in /etc/httpd/conf/
#+BEGIN_EXAMPLE
<Directory /var/www/html/secret>
	AuthType Basic
	AuthName "Secret Files"
	AuthUserFile /etc/httpd/htpasswd
	Require user user_name
</Directory>
#+END_EXAMPLE

- /var/www/html create the secret directory
#+BEGIN_SRC sh
cd /var/www/html
mkdir secret
cd secret
vim index.html
#+END_SRC

- index.html
#+BEGIN_EXAMPLE
Place welcome to secret directory
#+END_EXAMPLE
when this page is browsed you will be challenged for a user/password


**** Configuring Apache for LDAP Authentication (RHEL)
- direcorty that needs to be added
#+BEGIN_EXAMPLE
<Directory /www/docs/private>
	AuthName "Private"
	AuthType Basic
	AuthBasicProvider file
	AuthUserFile /usr/local/apache/passwd/passwords
	AuthLDAPURL ldap://ldaphost/o=yourorg
	AuthGroupFile /usr/local/apache/passwd/groups
	Require group GroupName
	Require ldap-group cn=mygroup,o=yourorg
#+END_EXAMPLE

**** Enabling CGI Scripts (RHEL)
- CGI scritps should be kept in /var/www/cgi-bin/
- CGI scripts must be executable by apache user and group
- CGI can be used by Python and PHP, but that's not optimal

- PHP
  - install mod_php
  - this adds what is need for php to function to the httpd.conf
    
- Python
  - install mon_wsgi
  - Define a WSGIScriptAlias to redirect requeests to the correct application in the httpd.conf
    #+BEGIN_EXAMPLE
    WSGIScriptAlias /myapp/ /srv/myapp/www/myapp.py
    #+END_EXAMPLE
**** Setting up TLS for a site (RHEL)   
- install tools to create certificates     
#+BEGIN_SRC sh
yum install cryto-utils
yum install mod_ssl
#+END_SRC

- create the keys
#+BEGIN_SRC sh
genkey server1.example.com
#+END_SRC
This will run through an ncurses based creation wizzard     
  - there is an option to encrypt the private key, if selected it has to be entered everytime the server is restarted
The keys will be placed in /etc/pki/tls/private (priv key) and /etc/certs/ (public key)    

- Configure apache to use TLS
mod_ssl places a file in /etc/httpd/conf.d/ssl.conf
  - in this file change the SSLCertificateFile and SSLCertificateKeyFile to the newly generated cert files
#+BEGIN_SRC sh
systemctl restart httpd
#+END_SRC

* Modules
Wiki: [[https://en.wikipedia.org/wiki/List_of_Apache_modules][List of Apache Modules]]
** mod_wsgi
- install for python2
#+BEGIN_SRC sh
yaourt -Sy community/mod_wsgi
apt-get install python-pip apache2 libapache2-mod-wsgi
#+END_SRC

-install for python3
#+BEGIN_SRC sh
apt-get install python3-pip apache2 libapache2-mod-wsgi-py3
#+END_SRC

* Lecture
* Tutorials
** Practical Apache Web Server Administration - Lynda.com - Jon Peck
*** Apache Introduction
- Developed since 1995
- Apache is Modular
- Apache Versions
  - 1.3 - 1998 to 2010
  - 2.0 - 2000 to 2013
  - 2.2 - 2005 to present
  - 2.4 - 2009 to present

*** Checking if apache is installed
**** Installation methods
- Pkg Mgmt tool
  - rpm
  - dpkg
- Manual Installation
- Precompiled into binaries
  - Netware
  - Windows
- Bundled with a Package
  - XAMPP - apachefriends.org
  - WampServer - wampserver.com
  - MAMP - mamp.info
  + These bundles should only be used for local development, Never use for public 

**** Investigation
- Determine if a package manager was used to install apache
- rpm
#+BEGIN_SRC sh
rpm -qa | grep httpd
#+END_SRC

- dpkg
#+BEGIN_SRC sh
dpkg -l | grep apache
#+END_SRC

*** Apache Sturcture
+ Interacting with Apache
  - apachectl - this cmd is used to control the apache application
  
+ Apache Actions
  - status - show what apache is doing - may need to be enabled manually
  - start - starts the daemon
  - stop - abrupt stop
  - graceful-stop - will complete any request in progress
  - restart - abrupt stop and restart
  - graceful - completes any requests in progress and restarts
  
*** Configuring Apache
+ Configuration Overview
  - stored in plain text files
  - typically named httpd.conf
  - Location set at compile time
  - Changes only recognized on restart of service
  
+ Configuration Location
  - Fedora and CentOS - /etc/httpd/conf/httpd.conf
    - one monolithic file
  - Debian and Ubuntu - /etc/apache2/apache2.conf
    - related, smaller configuration files
    - One per site
    - One per group of configuration
    
+ Finding where configuration file is
  - start with default loctions depending on distro
  - apachectl -V - this will show config and variables when complied
    - HTTPD_ROOT variable tells you the directory of the apache config file
  - Search entire file system with cmd like "find"
  
+ Configuration Directives
  - One per line
  - Instruction telling Apache what to do
  - Usually followed by an argument
    E.g. ServerName - sets hostname, port for redirects
         ServerName www.example.com
  - Best practive: treat all as case-sensitive
  
*** .htaccess files
+ Directory-Level Configuration
  - .htaccess files
    - Plain text
    - Similar to Apache configuration
    - Intended to provide security for directories
      - Evolved to extending configurations
    - Main configuration can restrict overrides
      - useful for shared hosts

+ .htaccess Advantages
  - Read every request - immediate changes no need to restart service
  - Flexibility for underprivileged users

+ .htaccess Disadvantages
  - Increase security risks
  - Slower than just server config
    - Read every page load
    - Searched for each time 
    
Not recommended - Security performance

*** Anatomy of a virtual host
+ Virtual Hosting
  - Serve content for multiple domains from same server
  - Commonly used by shared web hosts
  - Cost-effective

+ Name-Base Virtual Hosting
  - Routes requests based on domain name
  - Easiest to implement 
    - SSL challenges
    
+ IP-Based Virtual Hosting
  - Seperate IP per site
  - Solves SSL challenges
  - More expensive
  - Greater technical overhead
  
+ Virtual Host Example Config
- ip based virtual host
<VirtualHost 10.0.2.15:80>
	     ServerAdmin username@example.com - where error messages are to be sent
	     ServerName alice.example.com - usually fqdn

	     <Directory /srv/web/>
	       Order allow.deny 
	       Allow from allow - who can access the site
	       Require all granted - 2.4 permissions system
	     </Directory>

	     DocumentRoot /srv/web - dir that apache will serve files
</VirtualHost>

- testing configuration > apachectl -t
                        > apachectl -t -D DUMP_VHOSTS
			
*** What are Modules
+ Apache httpd is Modular
  - System of plugins that add functionality
  - Static modules included upon compilation
    - Loaded every time Apache is started
  - Shared modules added without compilation
    - Dynamically loaded, turned on or off.

+ Modules have Directives
  - configure additional functionality
  - If config has module directives and module is missing the server won't start
  - Wrap module configuration in IfModule helps to stop this
    <IfModule mod_ssl>
    
+ Modules cmds
> apachectl -t -D DUMP_MODULES - ths list all modules
> a2enmod <mod> - this enables an apache module
> a2dismod <mod> - this disables an apache module

+ Debian Module Configuration
- /etc/apache2/mods-available and /etc/apache2/mods-enabled

*** Trouble Shooting with Log Files
+ Apache Log File Uses
  - Findin problem with a site
  - Analyzing traffic patterns
  - Detecting malicious activity
  
+ Acpache Logging Mechanisms
  - Log files can be:
    - Single file
    - File that are rotated
    - Piped to anotehr program
  - Format can configured
  
+ Apache Log Files
  - Error Log
    - Diagnostic information
    - Records any errors found
  - Access Log
    - Records all requests

+ PHP/Other Language Error Logs
  - Generated by language
    - Not by apache
  - Can be in same directory
    - different format
    - can't be combined
    
+ Technically can control PHP logging from apache
  - Best practive: configure PHP with PHP
  
*** Enabling and Reading Apache Log Files
+ Configuring Apache Logging
  - ErrorLog - defines anem, location
    - File: error_log or error.log
  - LogLevel - controls verbosity
    - default is warm
    - info more verbose
    - emergency - least detailed
    - trace - most detailed, use when developing
    
- /etc/apache2/envvars - this file holds apache variables to be set to export

- By default all sites will be logged togeather in access.log and error.log
- Setting site to log individually
> sudoedit /etc/apache2/sites-available/site_to_set_logging.conf
<VirtualHost 10.0.2.15:80>
	     ServerAdmin username@example.com
	     ServerName alice.example.com

	     <Directory /srv/web/>
	       Order allow.deny 
	       Allow from allow
	       Require all granted
	     </Directory>

	     DocumentRoot /srv/web
	     
	     ErrorLog ${APACHE_LOG_DIR}/alice-error.log	- set error log      
	     LogLevel info - verbosity level
	     CustomLog ${APACHE_LOG_DIR}/alice-access.log combined - set access log
</VirtualHost>

*** Tools For Analysing Apache Log Files 
+ AWStats
  - Real-time access log analyzer
  - available on most linux distros
  - web interface with graphs and summaries
  - Can be a security risk if available publicly
    - ensure access is restricted
    
+ GoAccess
  - Real-time access log analyzer
  - Terminal application
  - Easier to secure
  - Lightweight and fast
  - Many features
  
+ Log Aggregators
  - graylog2.org
  - lagstash.net

* Books
* Links  
