#+TAGS: web_server nginx load_balancer caching_server


* Nginx
HomePage: [[https://www.lighttpd.net/][lighttpd.net]]
HomePage: [[https://www.nginx.com/resources/wiki/][nginx.com]]
* Files
/etc/nginx/conf.d/    - this contains the config files for virtual servers, ssl etc
/etc/nginx/nginx.conf - this is the main configuration file
/usr/share/nginx/html - this is the location of the default page

** /etc/nginx/conf.d/ssl.conf
#+BEGIN_EXAMPLE
server {
        listen  443;
        server_name _;

        ssl                     on;
        ssl_certificate         /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key     /etc/nginx/ssl/nginx.key;

        ssl_session_timeout     5m;

        ssl_protocols           SSLv2 SSLv3 TLSv1;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:ECDHE-RSA-AES128-GCM-SHA256:AES256+EECDH:DHE-RSA-AES128-GCM-SHA256:AES256+EDH:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";
        ssl_prefer_server_ciphers       on;
}
#+END_EXAMPLE

* Description
Nginx is a web server that is extremely good at serving large amounts of static content.
It is considered less efficient at delivering dynamic content.
* Configuration
** Administration
*** Syntax
+ Comments
In nginx config files the #-hash is used to comment a line
+ terminating lines
nginx terminates lines/statements with the ;-semicolon

*** nginx.conf
**** First Section
user www-data;  - defines the system user that runs the nginx server
worker_processes 4; - this specifies how many threads, instances of nginx to run
pid /run/nginx.pid; - this specifies where the master pid is to be stored

events {
        worker_connections 768;
        # multi_accept on;
        # accept_multex off;
}

**** Second Section
http {


        include /etc/nginx/mime.types; - this includes what is inside mime.type into the http block
        default_type application/octet-stream;
	
	##
        ## Logging Settings - this sets the location for log files
        ##

        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        ##
        ## Gzip Settings
        ##

        gzip on; - this tells nginx to use on the fly gzip compression to reduce bandwidth usage
        gzip_disable "msie6";
	
**** Virtual Host Configs
        ##
        # Virtual Host Configs - this sets the location of the virtual host config files
        ##

        include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*;
}

*** sites-enabled/*
The above /etc/nginx/sites-enabled/ directory usually contain symbolic links to files in /etc/nginx/available-sites/*

**** /etc/nginx/sites-available/default
server {
        listen 80 default_server; - default indicates to direct traffic to this instance if no other virtual host matches
        listen [::]:80 default_server ipv6only=on; - same as above but IPv6

        root /usr/share/nginx/html;
        index index.html index.htm;

        # Make site accessible from http://localhost/
        server_name example.com .example.com; - this should be set to the domain and enables multiple domains to use the same ip. 

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ /index.html;
                # Uncomment to enable naxsi on this location
                # include /etc/nginx/naxsi.rules
        }
}
- server_name example.com .example.com example.*;
  - .example.com  - match all sub-domains
  - *.example.com - match all sub-domains
  - example.*     - match all top level domains
  - ""            - no hostname, will process all requests without hostname or with ip addr

**** Log Files 
+ Disable logs files
access_log off;

**** Location 
This section of the server block tells nginx how to deal with requests to resources within the server.
location ~ IndexPage\.php${}
The ~ indicates that nginx will perform a regular expression match. These matches are case sensitive.
location ~* IndexPage\.php${}
This will now match without case sensitivity.
location ~* \.(pl|cgi|perl|prl){}
This will now match to any perl file .pl .cgi .perl .prl){}
** HowTos
*** Cento/Fedora

+ Initial Set-Up
CHECK WHAT STATE SELINUX IS IN
1. Stop apache if installed
#+BEGIN_SRC sh
sudo systemctl stop httpd.service
#+END_SRC
2. Disable apache from starting at boot
#+BEGIN_SRC sh
sudo systemctl disable httpd.service
#+END_SRC
3. Install epel repository
#+BEGIN_SRC sh
sudo yum install epel-release
#+END_SRC
4. Install nginx
#+BEGIN_SRC sh
sudo yum -y install nginx
#+END_SRC
5. Start Nginx and enable at boot
#+BEGIN_SRC sh
sudo systemctl start nginx.service
sudo systemctl enable nginx.service
#+END_SRC

+ Create User for Webspace
#+BEGIN_SRC sh
sudo adduser nginxsite
sudo passwd nginxsite
#+END_SRC

+ Set DocumentRoot
1. Create directory to hold site
#+BEGIN_SRC sh
sudo mkdir -p /var/www/nginxsite.com/public_html
#+END_SRC
2. Create test index.html use standard html template hello world
#+BEGIN_SRC sh
sudo touch /var/www/nginxsite.com/public_html/index.html
#+END_SRC
3. Change ownership of this directory to the created user
#+BEGIN_SRC sh
sudo chown -R nginxsite:nginxsite /var/www/nginxsite.com/public_html
#+END_SRC
4. Set file permissions
#+BEGIN_SRC sh
sudo chmod 755 /var/www/nginxsite.com/public_html
#+END_SRC

+ Configure Nginx to recognise new VirtualHosts(Server Blocks)
1. Make directories to hold site configs
#+BEGIN_SRC 
mkdir /etc/nginx/sites-available
mkdir /etc/nginx/sites-enabled
#+END_SRC
2. Add the following to to /etc/nginx/nginx.conf
#+BEGIN_SRC 
include /etc/nginx/sites-enabled/*.conf;
server_names_hash_bucket_size 64;
#+END_SRC

+ Create the Server Block
1. create the file /etc/nginx/sites-available/nginxsite.com.conf
#+BEGIN_SRC 
server {
listen       80;
server_name  nginxsite.com www.nginxsite.com;
location / {
root   /var/www/nginxsite.com/public_html;
index  index.html index.htm;
try_files $uri $uri/ =404;
}    error_page   500 502 503 504  /50x.html;
location = /50x.html {
root   html;
}
}
#+END_SRC
2. create the symbolic link from sites-available to sites-enabled. Makesure that absoulte path is used for the link
#+BEGIN_SRC sh 
sudo ln -s /etc/nginx/sites-available/nginxsite.com.conf /etc/nginx/sites-enabled/nginxsite.com.conf
#+END_SRC
3. test the config and restart the service it syntax is correct
#+BEGIN_SRC sh
sudo nginx -t
sudo systemctl restart nginx.service
#+END_SRC

*** Link
[[https://www.godaddy.com/garage/tech/config/how-to-install-and-configure-nginx-on-centos-6/][Install and Configure NGINX on CentOS 6]]
* Usage
** Installation (RHEL)
- Install epel repository 
#+BEGIN_SRC sh
yum update
wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
rpm -uvh epel-release-6-8.noarch.rpm
yum repolist
yum update
#+END_SRC

- Install nginx
#+BEGIN_SRC sh
yum install nginx
#+END_SRC

- Start and Enable the service (Sysvinit)
#+BEGIN_SRC sh
chkconfig nginx on
service nginx start
#+END_SRC

- Test nginx
#+BEGIN_SRC sh
yum install lynx
lynx http://localhost
#+END_SRC
This should show the default nginx page if installed correctly

** Basic Configuration of a New Installation
/etc/nginx/nginx.conf

- adding a vhost.d directory to the configuration
#+BEGIN_EXAMPLE
include /etc/nginx/vhost.d/*.conf
#+END_EXAMPLE
this would be placed under the other include files

- create the vhost.d directory
#+BEGIN_SRC sh
cd /etc/nginx
mkdir vhost.d
cd vhost.d
mv /etc/nginx/conf.d/default.conf .
#+END_SRC

- edit the default.conf root filesystem
#+BEGIN_EXAMPLE
location / {
	root  /var/www/html;
	index index.html index.htm;
}
#+END_EXAMPLE

- create /var/www/html
#+BEGIN_SRC sh
mkdir /var/www/html
echo "This is our new Config and Index" > /var/www/html/index.html
#+END_SRC

- test the new configuration
#+BEGIN_SRC sh
nginx -t
#+END_SRC

- restart the service if test is successful
#+BEGIN_SRC sh
service nginx restart
lynx http://localhost
#+END_SRC
this should now print the new index.html

** Vhost File
   
- adding a virtual host
/etc/nginx/vhost.d/myexample.local.conf
#+BEGIN_EXAMPLE
server {
	listen 80;

	root /var/www/html/myexample;
	index index.html index.htm index.php;
	
	server_name myexample.local www.myexample.local;
}
#+END_EXAMPLE

- create the myexample.local files
#+BEGIN_SRC sh
mkdir -p /var/www/html/myexample
echo "This is our new Config for myexample.local" > /var/www/html/myexample/index.html
#+END_SRC

- test the new config
#+BEGIN_SRC sh
nginx -t
#+END_SRC

- restart the service
#+BEGIN_SRC sh
service nginx restart
#+END_SRC
both the new myexample.local and the default weeb page will be viewable

** Upstream Module
Placing of the Nginx server infront of another server (example apllication server, such as node.js), proxy the connection.

- create a new vhost file
/etc/nginx/vhost.d/mynode.local.conf
#+BEGIN_EXAMPLE
upstream mynode {
	server localhost:8888;
}

server {
	server_name www.mynode.local mynode.local;

	location / {
		proxy_pass http://mynode;
	}
}
#+END_EXAMPLE

- restart the service
#+BEGIN_SRC sh
service nginx restart
lynx http://www.mynode.local
#+END_SRC

The advantage of using nginx it can provide full web server functionality (logging), where maybe the application server could be lacking

** Basic Load Balancing

- edit the vhost file
/etc/nginx/vhost.d/mynode.local.conf
#+BEGIN_EXAMPLE
upstream mynode {
	server localhost:8888;
	server localhost:8889;
}

server {
	server_name www.mynode.local mynode.local;

	location / {
		proxy_pass http://mynode;
	}
}
#+END_EXAMPLE
- the node.js applicaition, or whatever application or site will have to be configured and setup to run on both ports
  
- test and restart
#+BEGIN_SRC sh
nginx -t
service nginx restart
#+END_SRC

*** Weights
#+BEGIN_EXAMPLE
upstream mynode {
	server localhost:8888 weight=1;
	server localhost:8889 weight=4;
}

server {
	server_name www.mynode.local mynode.local;

	location / {
		proxy_pass http://mynode;
	}
}
#+END_EXAMPLE
weights are proportional, weight=4 should get four times as much traffic as weight=1

** SSL Certification Management
   
- create an ssl directory
#+BEGIN_SRC sh
mkdir -p /etc/nginx/ssl
cd ssl
#+END_SRC

- create the server csr and key files
#+BEGIN_SRC sh
openssl genrsa -des3 -out server.key 1024
openssl req -new -key server.key -out server.csr
#+END_SRC

- remove passphrase from server.key as a restart of nginx will always prompt for the key
#+BEGIN_SRC sh
cp server.key server.key.org
openssl rsa -in server.key.org -out server.key
#+END_SRC

- create the self signed certificate
#+BEGIN_SRC sh
openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
#+END_SRC

- add the certificate to the vhost file
#+BEGIN_EXAMPLE
server {
	listen 80;

	root /var/www/html/myexample;
	index index.html index.htm index.php;
	
	server_name myexample.local www.myexample.local;
}

server {
	listen 443;

	root /var/www/html/myexample;
	index index.html index.htm index.php
	
	server_name www.myexample.local myexample.local
	
	ssl on;
	ssl_certificate /etc/nginx/ssl/server.crt;
	ssl_certificate_key /etc/nginx/ssl/server.key;
}
#+END_EXAMPLE

- test configuration and restart service
#+BEGIN_SRC sh
nginx -t
service nginx restart
lynx https://www.myexample.local
#+END_SRC

** Location Directive 
/etc/nginx/vhost.d/myexample.local.conf
- nginx allows different content to be served by the set URI
#+BEGIN_EXAMPLE
server {
	listen 80;

	index index.html index.htm index.php;
	
	server_name myexample.local www.myexample.local;

	location / {
		root /var/www/html/myexample
	}
	
	location /google/ {
		proxy_pass http://www.google.com;
	}
	
	location /images/ {
		root /var/www/html/images;
	}
}

server {
	listen 443;

	root /var/www/html/myexample;
	index index.html index.htm index.php
	
	server_name www.myexample.local myexample.local
	
	ssl on;
	ssl_certificate /etc/nginx/ssl/server.crt;
	ssl_certificate_key /etc/nginx/ssl/server.key;
}
#+END_EXAMPLE
- First location  - is just reimplementing the root variable
- Second location - is just passing the request off to www.google.com
- Third location  - is an image directory. 
  - This means it can be shared across sites.

** Return Directive
   
- this allows for return codes to be leveraged to provide functionality
  - provide an error code
  - provide a redirect
   
#+BEGIN_EXAMPLE
server {
	listen 80;

	index index.html index.htm index.php;
	
	server_name myexample.local www.myexample.local;

	# this will redirect /forum to google.com
	location /forum {
		return 301 http://www.google.com;
	}

	location / {
		root /var/www/html/myexample
	}
	
}

#+END_EXAMPLE

** Basic Rewrites
   
- change from /forum to /forums on site

#+BEGIN_EXAMPLE
server {
	listen 80;

	index index.html index.htm index.php;
	
	server_name myexample.local www.myexample.local;

	location /forum {
		rewrite ^/forum/(.*)$ http://www.myexample.local/forums/$1 permanent;
	}

	location / {
		root /var/www/html/myexample
	}
	
}

#+END_EXAMPLE

** Custom Error Pages
   
- add the new error page
#+BEGIN_SRC sh
echo "This is our custom content does not exist page" > /var/www/html/myexample/404.html
#+END_SRC

- across all sites change in the nginx.conf
  
- for specific virtual hosts add to the vhost file
#+BEGIN_EXAMPLE
server {
	listen 80;

	root /var/www/html/myexample;
	index index.html index.htm index.php;
	
	server_name myexample.local www.myexample.local;
	
	error_page 404 = /404.html;
	location = /403.html {
		root /var/www/html/myexample;
		internal;
	}
}

#+END_EXAMPLE

- internal - only for nginx's use

** Logging
   
- Error Logs 
/etc/nginx/nginx.conf
#+BEGIN_EXAMPLE
error_log /var/log/nginx/error.log;
#+END_EXAMPLE
this will log all error messages

- setting error logging level
#+BEGIN_EXAMPLE
error_log /var/log/nginx/error.log notice;
error_log /var/log/nginx/error.log info;
#+END_EXAMPLE
these two will report at different levels of logging

- Access Logs
  - this is defined in the http format
    #+BEGIN_EXAMPLE
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';	

    access_log /var/log/nginx/access.log main;
    #+END_EXAMPLE
    
- Both error and access logs set like this will log for all domains configured
  
- Configure Virtual Hosts
  
- add error_log and access_log to the vhost file
#+BEGIN_EXAMPLE
server {
	listen 80;

	root /var/www/html/myexample;
	index index.html index.htm index.php;
	
	server_name myexample.local www.myexample.local;
	
	access_log /var/log/nginx/myexample.access.http.log;
	error_log /var/log/nginx/myexample.error.http.log;
}

server {
	listen 443;

	root /var/www/html/myexample;
	index index.html index.htm index.php
	
	server_name www.myexample.local myexample.local

	access_log /var/log/nginx/myexample.access.https.log;
	error_log /var/log/nginx/myexample.error.https.log;
	
	ssl on;
	ssl_certificate /etc/nginx/ssl/server.crt;
	ssl_certificate_key /etc/nginx/ssl/server.key;
}
#+END_EXAMPLE

- for the logs to become active restart nginx
#+BEGIN_SRC sh
service nginx restart
#+END_SRC

*** Custom Log Levels
    
- Setting compression and buffering
#+BEGIN_SRC 
server {
	listen 80;

	root /var/www/html/myexample;
	index index.html index.htm index.php;
	
	server_name myexample.local www.myexample.local;
	
	access_log /var/log/nginx/myexample.access.http.log combined buffer=32k;
	error_log /var/log/nginx/myexample.error.http.log;
}
#+END_SRC
- The buffer size must not exceed the size of an atomic write to a disk file. For FreeBSD this size is unlimited.
  - usually 32k on linux
  
- 8 Logging Levels
  - emerg: Emergency situations where the system is in an unusable state.
  - alert: Severe situation where action is needed promptly.
  - crit: Important problems that need to be addressed.
  - error: An Error has occurred. Something was unsuccessful.
  - warn: Something out of the ordinary happened, but not a cause for concern.
  - notice: Something normal, but worth noting has happened.
  - info: An informational message that might be nice to know.
  - debug: Debugging information that can be useful to pinpoint where a problem is occurring.
#+BEGIN_EXAMPLE
error_log /var/log/nginx/myexample.error.http.log warn;
#+END_EXAMPLE
this would log all emerg, alert, crit, error and warn messages

*** Custom Access Log Format
    
#+BEGIN_SRC 
server {
	listen 80;

	root /var/www/html/myexample;
	index index.html index.htm index.php;
	
	server_name myexample.local www.myexample.local;
	
	log_format myAccessFormat 'Remote IP: $remote_addr - Time Request: $time_local - Browser Agent: $http_user_agent';
	
	access_log /var/log/nginx/myexample.access.http.log myAccessFormat buffer=32k;
	error_log /var/log/nginx/myexample.error.http.log;
}
#+END_SRC
- the access log will now use the myAccessFormat to record our log
  
** Blocking Ips
/etc/nginx/nginx.conf   
#+BEGIN_EXAMPLE
include blockips.conf;
#+END_EXAMPLE

/etc/nginx/blockips.conf
#+BEGIN_EXAMPLE
deny 72.34.121.10;
#+END_EXAMPLE
any requests from this ip should throw a 403 denied

- test the configuration and restart the service
#+BEGIN_SRC sh
nginx -t
service nginx restart
#+END_SRC

- adding for domain only
#+BEGIN_EXAMPLE
server {
	listen 80;

	index index.html index.htm index.php;
	
	server_name myexample.local www.myexample.local;
	
	log_format myAccessFormat 'Remote IP: $remote_addr - Time Request: $time_local - Browser Agent: $http_user_agent';
	
	access_log /var/log/nginx/myexample.access.http.log myAccessFormat buffer=32k;
	error_log /var/log/nginx/myexample.error.http.log;
	
	location / {
		root /var/www/html/myexample;
		
		deny 72.129.45.10;
	}
}
#+END_EXAMPLE
- the global block list has precedence over the domain block and allow

** Optimization of Nginx
   
- Setting the number of processors
/etc/nginx/nginx.conf
#+BEGIN_EXAMPLE
worker_processes 2;
#+END_EXAMPLE
- this is normally set to the number of available cores
- if set higher than number of caores, it will not damage the system just run at the max number of cores
  
- Setting the number of worker connections
/etc/nginx/nginx.conf
#+BEGIN_EXAMPLE
worker_connections 1024;
#+END_EXAMPLE
- this is the number of connections that can be handled
  
*** Buffers
- client_buffer_size 

- client_header_buffer 
  - 1024
  
- client_max_body_size
  - if exceeded then a 413 - Payload too large - previously know as a "Request Entity Too Large"

/etc/nginx/nginx.conf
#+BEGIN_EXAMPLE
http {
	...			
	client_body_buffer_size 10k;	
	client_header_buffer_size 1k;
	client_max_body_size 8m; # support up to max memory, but need to account for underlying OS
	large_client_header_buffers 2 1k; # 2 at 1k
}
#+END_EXAMPLE

*** Timeouts
- client_body_timeout
  - how long the server waits until it kills the connection
    
- client_header_timeout
  
- keep_alive_timeout
  
- send_timeout
  
/etc/nginx/nginx.conf
#+BEGIN_EXAMPLE
http {
	...	
	client_body_timeout 12; # 12 seconds is consider the max for a website to render, worst case (should be 3 - 5 secs)
	client_header_timeout 12;
	keepalive_timeout 15;
	send_timeout 10;
}
#+END_EXAMPLE

** PHP
   
- install php
#+BEGIN_SRC sh
yum install php
#+END_SRC

- create a php-fpm socket file
/etc/php-fpm.d/www.conf
#+BEGIN_EXAMPLE
listen = /var/run/php-fpm/www.sock
#+END_EXAMPLE

- add the correct ownership to the new sock file
#+BEGIN_SRC sh
chown nginx:nginx /var/run/php-fpm/www.sock
#+END_SRC

- start and enable php-fpm
#+BEGIN_SRC sh
chkconfig php-fpm on
service php-fpm start
#+END_SRC

** MariaDB for LEMP

- installation (CentOS requires remi repo, but CentOS MariDB is the default)
#+BEGIN_SRC sh
wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
rpm -Uvh remi-release-6.rpm
yum --enablerepremi-test --disablerepo=remi install compat-mysql55
#+END_SRC

- add maria repo
/etc/yum.repos.d/maria.repo
#+BEGIN_EXAMPLE
[mariadb]
name=MariaDB
baseurl=http://yum.mariadb.org/5.5/centos6-amd64
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1
#+END_EXAMPLE

- update the system
#+BEGIN_SRC sh
yum update
yum install MariaDB-devel MariaDB-cient MariaDB-server perl-DBD-MySQL
#+END_SRC

- start the service
#+BEGIN_SRC sh
service mysql start
#+END_SRC

- secure setup
#+BEGIN_SRC sh
mysql_secure_installation
#+END_SRC
this will run you through a set of questions that will allow you to set and remove passwords and users

- confirm that you can connect to db
#+BEGIN_SRC sh
mysql -u root -p
#+END_SRC

- restart php-fpm
#+BEGIN_SRC sh
service php-fpm restart
#+END_SRC
this has to be do as php-fpm my have a few problems recognizing the newly installed Mariadb

** Nginx configtest
#+BEGIN_SRC sh
nginx -t
#+END_SRC

** Check rewrites in nginx.conf
#+BEGIN_SRC sh
grep -i rewrite /etc/nginx/conf.d/tinygreenpc.com.conf | wc -l
#+END_SRC

** Too Many Open Files Error And Solution
[[http://www.cyberciti.biz/faq/linux-unix-nginx-too-many-open-files/]]

** Check to see what sites are running on 443
#+BEGIN_SRC sh
grep 443 /etc/nginx/conf.d/*
#+END_SRC
or
#+BEGIN_SRC sh
httpd -S 2>&1|grep "port 443 name"|grep -v =hostname=| awk {'print $4'}httpd -S 2>&1|grep "port 443 name"|grep -v =hostname=| awk {'print $4'}
#+END_SRC

** If a site randomy returns 403's and then 200 when curling

Add Options +Indexes to the .htaccess file and you will get 200 on curls

[[https://stackoverflow.com/questions/10365520/error-directory-index-forbidden-by-options-directive][Stackoverflow - error directory index forbidden]]

** Speed up Nginx Performance with Ngx_Pagespeed on CentOS 7
1. These tools will be required
[[file://home/crito/Pictures/org/ngx_pagespeed_1.png]]

2. Pull the source code for Nginx
[[file://home/crito/Pictures/org/ngx_pagespeed_2.png]]

3. Next download the ngx_pagespeed source files unzip compressed files
[[file://home/crito/Pictures/org/ngx_pagespeed_3.png]]

4. Get the opmitized libraries to compile with Nginx
[[file://home/crito/Pictures/org/ngx_pagespeed_4.png]]

5. Configure the Nginx for compilation
[[file://home/crito/Pictures/org/ngx_pagespeed_5.png]]

6. Next compile and install
#+BEGIN_SRC sh
make
make install
#+END_SRC

7. Create the need symbolic links
[[file://home/crito/Pictures/org/ngx_pagespeed_6.png]]   

8. Create the systemd unit file
[[file://home/crito/Pictures/org/ngx_pagespeed_7.png]]

you need to make note the location of the pid file and the Nginx binary  
[[file://home/crito/Pictures/org/ngx_pagespeed_8.png]]

9. Test that the systemd unit file works
#+BEGIN_SRC sh
systemctl start nginx
systemctl enable nginx
systemctl status nginx
#+END_SRC

10. Create a directory where the module is to cache the files for the site
#+BEGIN_SRC sh
mkdir -p /var/ngx_pagespeed_cache
chown -R nobody:nobody /var/ngx_pagespeed_cache
#+END_SRC

11. Enable the module by adding the following lines to the server block in the nginx.conf
[[file://home/crito/Pictures/org/ngx_pagespeed_10.png]]

12. Check that the config file is error free
#+BEGIN_SRC sh
nginx -t
#+END_SRC

13. Now restart the service for the changes to take effect
#+BEGIN_SRC sh 
systemctl restart nginx.service
#+END_SRC

14. Test that Nginx is using Pagespeed
#+BEGIN_SRC sh
curl -I -p http://localhost
#+END_SRC
if Ngx_Pagespeed is enabled you should see the X-Page-Speed header implemented
[[file://home/crito/Pictures/org/ngx_pagespeed_11.png]]

*** Example Nginx with Ngx_Pagespeed enabled
#+BEGIN_EXAMPLE
#user  nobody;
worker_processes  1;
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#pid        logs/nginx.pid;
events {
worker_connections  1024;
}
http {
include       mime.types;
default_type  application/octet-stream;
#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
#                  '$status $body_bytes_sent "$http_referer" '
#                  '"$http_user_agent" "$http_x_forwarded_for"';
#access_log  logs/access.log  main;
sendfile        on;
#tcp_nopush     on;
#keepalive_timeout  0;
keepalive_timeout  65;
#gzip  on;
server {
listen       80;
server_name  localhost; 
#charset koi8-r;
#access_log  logs/host.access.log  main;
# Pagespeed main settings
pagespeed on;
pagespeed FileCachePath /var/ngx_pagespeed_cache;
# Ensure requests for pagespeed optimized resources go to the pagespeed
# handler and no extraneous headers get set.
location ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+" { add_header "" ""; }
location ~ "^/ngx_pagespeed_static/" { }
location ~ "^/ngx_pagespeed_beacon" { }
location / {
root   html;
index  index.html index.htm;
}
#error_page  404              /404.html;
# redirect server error pages to the static page /50x.html
#
error_page   500 502 503 504  /50x.html;
location = /50x.html {
root   html;
}
# proxy the PHP scripts to Apache listening on 127.0.0.1:80
#
#location ~ \.php$ {
#    proxy_pass   http://127.0.0.1;
#}
# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
#
#location ~ \.php$ {
#    root           html;
#    fastcgi_pass   127.0.0.1:9000;
#    fastcgi_index  index.php;
#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
#    include        fastcgi_params;
#}
# deny access to .htaccess files, if Apache's document root
# concurs with nginx's one
#
#location ~ /\.ht {
#    deny  all;
#}
}
# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#    listen       8000;
#    listen       somename:8080;
#    server_name  somename  alias  another.alias;
#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}
# HTTPS server
#
#server {
#    listen       443 ssl;
#    server_name  localhost;
#    ssl_certificate      cert.pem;
#    ssl_certificate_key  cert.key;
#    ssl_session_cache    shared:SSL:1m;
#    ssl_session_timeout  5m;
#    ssl_ciphers  HIGH:!aNULL:!MD5;
#    ssl_prefer_server_ciphers  on;
#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}
}
#+END_EXAMPLE

** Cpanel
*** Restart Apache Service with CPanel
#+BEGIN_SRC sh
/scripts/restartsrv\_apache
#+END_SRC

** Plesk
* Lecture
* Tutorial
** Linux Academy Lab - Nginx installation of SSL Certificate
   LabGuide: [[file://home/crito/Documents/Linux/Labs/Nginx-ssl.pdf][Nginx and Self Signed SSL Certificates]]

* Books
[[file://home/crito/Documents/SysAdmin/Web/Nginx/Complete_NGINX_Cookbook.pdf][Complete Nginx Cookbook]]
[[file://home/crito/Documents/SysAdmin/Web/Nginx/Mastering_Nginx.pdf][Mastering Nginx]]
[[file://home/crito/Documents/SysAdmin/Web/Nginx/Nginx-From_Beginner_to_Pro.pdf][Nginx - From Beginner to Pro]]
[[file://home/crito/Documents/SysAdmin/Web/Nginx/Nginx-HTTP_Server.pdf][Nginx - HTTP Server]]
[[file://home/crito/Documents/SysAdmin/Web/Nginx/Nginx_Essentials.pdf][Nginx - Essentials]]
[[file://home/crito/Documents/SysAdmin/Web/Nginx/Nginx_HTTP_Server_3ed.pdf][Nginx - HTTP Server 3ed]]
[[file://home/crito/Documents/SysAdmin/Web/Nginx/Nginx_Module_Extension.pdf][Nginx Module Extension]]

* Links
[[https://www.linode.com/docs/websites/nginx/how-to-configure-nginx][How To Configure Nginx - Linode]]
[[https://www.digitalocean.com/community/tutorials/understanding-nginx-server-and-location-block-selection-algorithms][Understanding Ngin Server and Location Block Selection Algorithms]]
[[https://www.tecmint.com/nginx-web-server-security-hardening-and-performance-tips/][Nginx Securtiy Hardening and Performance tips - Techmint]]
