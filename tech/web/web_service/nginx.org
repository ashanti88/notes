#+TAGS: web

* nginx									:web:
HomePage: [[https://www.lighttpd.net/][lighttpd.net]]
HomePage: [[https://www.nginx.com/resources/wiki/][nginx.com]]
* Description
Nginx is a web server that is extremely good at serving large amounts of static content.
It is considered less efficient at delivering dynamic content.
* Configuration
** Administration
*** Syntax
+ Comments
In nginx config files the #-hash is used to comment a line
+ terminating lines
nginx terminates lines/statements with the ;-semicolon

*** nginx.conf
**** First Section
user www-data;  - defines the system user that runs the nginx server
worker_processes 4; - this specifies how many threads, instances of nginx to run
pid /run/nginx.pid; - this specifies where the master pid is to be stored

events {
        worker_connections 768;
        # multi_accept on;
        # accept_multex off;
}

**** Second Section
http {


        include /etc/nginx/mime.types; - this includes what is inside mime.type into the http block
        default_type application/octet-stream;
	
	##
        ## Logging Settings - this sets the location for log files
        ##

        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        ##
        ## Gzip Settings
        ##

        gzip on; - this tells nginx to use on the fly gzip compression to reduce bandwidth usage
        gzip_disable "msie6";
	
**** Virtual Host Configs
        ##
        # Virtual Host Configs - this sets the location of the virtual host config files
        ##

        include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*;
}

*** sites-enabled/*
The above /etc/nginx/sites-enabled/ directory usually contain symbolic links to files in /etc/nginx/available-sites/*

**** /etc/nginx/sites-available/default
server {
        listen 80 default_server; - default indicates to direct traffic to this instance if no other virtual host matches
        listen [::]:80 default_server ipv6only=on; - same as above but IPv6

        root /usr/share/nginx/html;
        index index.html index.htm;

        # Make site accessible from http://localhost/
        server_name example.com .example.com; - this should be set to the domain and enables multiple domains to use the same ip. 

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ /index.html;
                # Uncomment to enable naxsi on this location
                # include /etc/nginx/naxsi.rules
        }
}
- server_name example.com .example.com example.*;
  - .example.com  - match all sub-domains
  - *.example.com - match all sub-domains
  - example.*     - match all top level domains
  - ""            - no hostname, will process all requests without hostname or with ip addr

**** Log Files 
+ Disable logs files
access_log off;

**** Location 
This section of the server block tells nginx how to deal with requests to resources within the server.
location ~ IndexPage\.php${}
The ~ indicates that nginx will perform a regular expression match. These matches are case sensitive.
location ~* IndexPage\.php${}
This will now match without case sensitivity.
location ~* \.(pl|cgi|perl|prl){}
This will now match to any perl file .pl .cgi .perl .prl){}
** HowTos
*** Cento/Fedora

+ Initial Set-Up
CHECK WHAT STATE SELINUX IS IN
1. Stop apache if installed
#+BEGIN_SRC sh
sudo systemctl stop httpd.service
#+END_SRC
2. Disable apache from starting at boot
#+BEGIN_SRC sh
sudo systemctl disable httpd.service
#+END_SRC
3. Install epel repository
#+BEGIN_SRC sh
sudo yum install epel-release
#+END_SRC
4. Install nginx
#+BEGIN_SRC sh
sudo yum -y install nginx
#+END_SRC
5. Start Nginx and enable at boot
#+BEGIN_SRC sh
sudo systemctl start nginx.service
sudo systemctl enable nginx.service
#+END_SRC

+ Create User for Webspace
#+BEGIN_SRC sh
sudo adduser nginxsite
sudo passwd nginxsite
#+END_SRC

+ Set DocumentRoot
1. Create directory to hold site
#+BEGIN_SRC sh
sudo mkdir -p /var/www/nginxsite.com/public_html
#+END_SRC
2. Create test index.html use standard html template hello world
#+BEGIN_SRC sh
sudo touch /var/www/nginxsite.com/public_html/index.html
#+END_SRC
3. Change ownership of this directory to the created user
#+BEGIN_SRC sh
sudo chown -R nginxsite:nginxsite /var/www/nginxsite.com/public_html
#+END_SRC
4. Set file permissions
#+BEGIN_SRC sh
sudo chmod 755 /var/www/nginxsite.com/public_html
#+END_SRC

+ Configure Nginx to recognise new VirtualHosts(Server Blocks)
1. Make directories to hold site configs
#+BEGIN_SRC 
mkdir /etc/nginx/sites-available
mkdir /etc/nginx/sites-enabled
#+END_SRC
2. Add the following to to /etc/nginx/nginx.conf
#+BEGIN_SRC 
include /etc/nginx/sites-enabled/*.conf;
server_names_hash_bucket_size 64;
#+END_SRC

+ Create the Server Block
1. create the file /etc/nginx/sites-available/nginxsite.com.conf
#+BEGIN_SRC 
server {
listen       80;
server_name  nginxsite.com www.nginxsite.com;
location / {
root   /var/www/nginxsite.com/public_html;
index  index.html index.htm;
try_files $uri $uri/ =404;
}    error_page   500 502 503 504  /50x.html;
location = /50x.html {
root   html;
}
}
#+END_SRC
2. create the symbolic link from sites-available to sites-enabled. Makesure that absoulte path is used for the link
#+BEGIN_SRC sh 
sudo ln -s /etc/nginx/sites-available/nginxsite.com.conf /etc/nginx/sites-enabled/nginxsite.com.conf
#+END_SRC
3. test the config and restart the service it syntax is correct
#+BEGIN_SRC sh
sudo nginx -t
sudo systemctl restart nginx.service
#+END_SRC

*** Link
[[https://www.godaddy.com/garage/tech/config/how-to-install-and-configure-nginx-on-centos-6/][Install and Configure NGINX on CentOS 6]]
* Usage
** Nginx configtest
> nginx -t

** Check rewrites in nginx.conf
> grep -i rewrite /etc/nginx/conf.d/tinygreenpc.com.conf | wc -l

** Too Many Open Files Error And Solution
[[http://www.cyberciti.biz/faq/linux-unix-nginx-too-many-open-files/]]

** Check to see what sites are running on 443
> grep 443 /etc/nginx/conf.d/*
or
> httpd -S 2>&1|grep "port 443 name"|grep -v =hostname=| awk {'print
$4'}httpd -S 2>&1|grep "port 443 name"|grep -v =hostname=| awk {'print
$4'}

** If a site randomy returns 403's and then 200 when curling

Add Options +Indexes to the .htaccess file and you will get 200 on curls

[[https://stackoverflow.com/questions/10365520/error-directory-index-forbidden-by-options-directive][Stackoverflow - error directory index forbidden]]

** Speed up Nginx Performance with Ngx_Pagespeed on CentOS 7       :web:perf:
1. These tools will be required
[[file://home/crito/Pictures/org/ngx_pagespeed_1.png]]

2. Pull the source code for Nginx
[[file://home/crito/Pictures/org/ngx_pagespeed_2.png]]

3. Next download the ngx_pagespeed source files unzip compressed files
[[file://home/crito/Pictures/org/ngx_pagespeed_3.png]]

4. Get the opmitized libraries to compile with Nginx
[[file://home/crito/Pictures/org/ngx_pagespeed_4.png]]

5. Configure the Nginx for compilation
[[file://home/crito/Pictures/org/ngx_pagespeed_5.png]]

6. Next compile and install
#+BEGIN_SRC sh
make
make install
#+END_SRC

7. Create the need symbolic links
[[file://home/crito/Pictures/org/ngx_pagespeed_6.png]]   

8. Create the systemd unit file
[[file://home/crito/Pictures/org/ngx_pagespeed_7.png]]

you need to make note the location of the pid file and the Nginx binary  
[[file://home/crito/Pictures/org/ngx_pagespeed_8.png]]

9. Test that the systemd unit file works
#+BEGIN_SRC sh
systemctl start nginx
systemctl enable nginx
systemctl status nginx
#+END_SRC

10. Create a directory where the module is to cache the files for the site
#+BEGIN_SRC sh
mkdir -p /var/ngx_pagespeed_cache
chown -R nobody:nobody /var/ngx_pagespeed_cache
#+END_SRC

11. Enable the module by adding the following lines to the server block in the nginx.conf
[[file://home/crito/Pictures/org/ngx_pagespeed_10.png]]

12. Check that the config file is error free
#+BEGIN_SRC sh
nginx -t
#+END_SRC

13. Now restart the service for the changes to take effect
#+BEGIN_SRC sh 
systemctl restart nginx.service
#+END_SRC

14. Test that Nginx is using Pagespeed
#+BEGIN_SRC sh
curl -I -p http://localhost
#+END_SRC
if Ngx_Pagespeed is enabled you should see the X-Page-Speed header implemented
[[file://home/crito/Pictures/org/ngx_pagespeed_11.png]]

*** Example Nginx with Ngx_Pagespeed enabled
#+BEGIN_EXAMPLE
#user  nobody;
worker_processes  1;
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#pid        logs/nginx.pid;
events {
worker_connections  1024;
}
http {
include       mime.types;
default_type  application/octet-stream;
#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
#                  '$status $body_bytes_sent "$http_referer" '
#                  '"$http_user_agent" "$http_x_forwarded_for"';
#access_log  logs/access.log  main;
sendfile        on;
#tcp_nopush     on;
#keepalive_timeout  0;
keepalive_timeout  65;
#gzip  on;
server {
listen       80;
server_name  localhost; 
#charset koi8-r;
#access_log  logs/host.access.log  main;
# Pagespeed main settings
pagespeed on;
pagespeed FileCachePath /var/ngx_pagespeed_cache;
# Ensure requests for pagespeed optimized resources go to the pagespeed
# handler and no extraneous headers get set.
location ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+" { add_header "" ""; }
location ~ "^/ngx_pagespeed_static/" { }
location ~ "^/ngx_pagespeed_beacon" { }
location / {
root   html;
index  index.html index.htm;
}
#error_page  404              /404.html;
# redirect server error pages to the static page /50x.html
#
error_page   500 502 503 504  /50x.html;
location = /50x.html {
root   html;
}
# proxy the PHP scripts to Apache listening on 127.0.0.1:80
#
#location ~ \.php$ {
#    proxy_pass   http://127.0.0.1;
#}
# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
#
#location ~ \.php$ {
#    root           html;
#    fastcgi_pass   127.0.0.1:9000;
#    fastcgi_index  index.php;
#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
#    include        fastcgi_params;
#}
# deny access to .htaccess files, if Apache's document root
# concurs with nginx's one
#
#location ~ /\.ht {
#    deny  all;
#}
}
# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#    listen       8000;
#    listen       somename:8080;
#    server_name  somename  alias  another.alias;
#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}
# HTTPS server
#
#server {
#    listen       443 ssl;
#    server_name  localhost;
#    ssl_certificate      cert.pem;
#    ssl_certificate_key  cert.key;
#    ssl_session_cache    shared:SSL:1m;
#    ssl_session_timeout  5m;
#    ssl_ciphers  HIGH:!aNULL:!MD5;
#    ssl_prefer_server_ciphers  on;
#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}
}
#+END_EXAMPLE

** Cpanel
*** Restart Apache Service with CPanel
> /scripts/restartsrv\_apache

** Plesk
* Lecture
* Tutorial
* Books

* Links
[[https://www.linode.com/docs/websites/nginx/how-to-configure-nginx][How To Configure Nginx - Linode]]
[[https://www.digitalocean.com/community/tutorials/understanding-nginx-server-and-location-block-selection-algorithms][Understanding Ngin Server and Location Block Selection Algorithms]]
[[https://www.tecmint.com/nginx-web-server-security-hardening-and-performance-tips/][Nginx Securtiy Hardening and Performance tips - Techmint]]
