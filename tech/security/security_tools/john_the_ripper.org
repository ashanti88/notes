#+TAGS: sec_o pass


* John the Ripper						 :sec_o:pass:
HomePage: [[http://www.openwall.com/john/][openwall.com/john]]
* Description
* Usage
** Defaults
#+BEGIN_SRC sh
john /tmp/hashes.txt
#+END_SRC
- Haha format = best guest
- Configuration = john.conf
- Wordlist = password.lst
- Modes Single -> Crack -> Wordlist -> Incremental

* Lecture
** ISSA KY Password Cracking Workshop - Password Cracking with John the Ripper - Jeremy Druin
YouTube: [[https://www.youtube.com/watch?v%3DTqlnXH1YhKY&index%3D3&list%3DPLZOToVAK85MqL97pAM9C22Duj0ES3KXVr][youtube.com/ISSA_KY_Workshop]]

- two versions of free jtr
  - vanilla
  - community enhanced version
both can be run side be side

- what happens when all defaults are used?
> john /tmp/myhashes.txt
  - Haha format = best guest
  - Configuration = john.conf
  - Wordlist = password.lst
  - Modes Single -> Crack -> Wordlist -> Incremental

- Preparing Hashes
  - "No password hashes loaded (see FAQ)"
    - this usually indicates that the hash file format is incorrect
- tools that can dump hashes
  - JTR unshadow utility
    - unshadow /etc/passwd /etc/shadow> ~/shadow_hash.txt
    - unshadow provides lots of scripts for conveting, one handy is the pcap
  - PWDumpX
  - Cain
  - Metasploit

- Modes
  - Single crack
    - Uses the user account info as the "wordlist" to generate password guesses for that particular hash
      - The user account is mangled using rules [List.Rules:Single] in john.conf
      - Requires the password hash record to use the following formati
  - tip
    - start with this mode
    - combine target password hash files first for greatest effect 
      
#+BEGIN_SRC sh
echo "password" > password.txt
john --rule=single --wordlist=password.txt --stdout
john --rule=single --wordlist=password.txt --stdout | wc
#+END_SRC

  - Wordlist
    - JTR uses teh wordlist supplied by the user to generate thashes to compare against target hashes
    - Unlike single crack mode, the hash guess generated from the dictionary word is tried against all target hashes
      - This meas JTR will need to generate multiple hashes per dictionary word if the target hashes contain different salts
    - The contents and order of the words in the wordlist is critical
      - If the password is not in the dictionary,obviously the hash will not be cracked
      - If the dictionary contains duplicates, time will be wasted making thesame guess  multiple times
    - Dictionary Attack
      - Hash guesses are generated directly from the words on the wordlist
      - Used when the dictionary has a reasnable chance of containing the password
        - Hashes that have already been cracked
        - Passwords from web, internet or other public breaches
        - passwords from the "top X worst passwords" list
        - passwords generated by Cewl 
    - Hybrid or Rules-Based Attack
        - Hash guesses are generated by mangling the words on the wordlist with "rules"
        - Great when the system implements a known password policy and dict attack fails
	- Determine policy by reading the documentation or creating a new account with terrible password
	  - error message normally spells out the policy
    - Acquiring Wordlists
      - JTR default wordlists
      - Metasploit enhanced JTR list
      - Kali /usr/share/wordlists
      - Openwall Password Lists
      - Skull Security (Ron Bowes)
      - m3g9tr0n's Cleaned Wordlist
      - Packetstorm
      - CrackStation's Password Cranking Dictionary
      - MD5This
      - HashKill.co.uk
	
  - Tools
     - CeWL can also be used to generate a wordlist for a target
       - target word lwngth, dpider depth and output file optional
    - FAB
      - Uses the mini-exiftool Ruby library to parse metadata from file
      - The metadata can be used as guesses for usernames and passwords
#+BEGIN_SRC sh
fab - v Employee\ confidentiality\ Statement.doc
#+END_SRC    
    - Strings
      - strings can also be used to run through documents and pull a wordlist together
    - Crunch
      - Generates words based on character set and rules
 #+BEGIN_SRC sh
# use default a -> z
crunch 1 2 
# no duplicates
crunch 1 2 -d 
#  a to cc
cruchch 1 2 abc + + +
# a -> cc into dictionary.txt
crunch 1 2 abc + + + -o dictionary.txt
 #+END_SRC
  - Trimming wordlist to match target
    - Determine requirements then removes any words from list that do not match
    - pw-inspector is able to automate this task
#+BEGIN_SRC 
pw-inpector -i /tmp/password -o /tmp/candidates -m -M12 -c 3 -l -u -n -s   
#+END_SRC
  
  - Rules
    - Creating Mangling Rules
      - Rules can be created in john.conf configuration file
      - Several rules are included by default
      - Be careful to use lowercase wordlists that have un-mangled, unique words
	- Mangling words that are already mangled is a waste of time and may miss a hash
      - Consider having a dedicated "pure" dictionary to use in mangling
    - Rules begin with a [List.Rules] label declaring the name of the rule followed by one or more rule commands
      - rule syntax is explaines at http://www.openwall.com/john/doc/RULES.shtml
    - Good idea is to put the company name in to a file and run all rules against it
#+BEGIN_SRC sh
john --rule=all -wordlist=/tmp/company_name --stdout
#+END_SRC 
    - Also CeWL FB and LindedIn

  - Incremental
    - tries all chars combinations for given char set
    - Pre-defined incremental modes
      - ASCII - 95 printable chars
      - LM_ASCII
      - Alnum - 62 alphanumeric characters
      - Alpha - 52 letters
      - LowerNum
      - UpperNum
      - LowerSpace
      - Lower
      - Upper
      - Digits

  - Supported Hash Formats
#+BEGIN_SRC sh
john --list=formats
#+END_SRC

* Tutorial
* Books
* Links
